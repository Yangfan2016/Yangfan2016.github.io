{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/LICENSE","path":"LICENSE","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/uploads/favicon.ico","path":"uploads/favicon.ico","modified":0,"renderable":0},{"_id":"source/uploads/me.jpg","path":"uploads/me.jpg","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/LICENSE","hash":"89748de5eaa9fc527cafa31a5f1881cd0b7ae619","modified":1556180921550},{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1556180895775},{"_id":"themes/indigo/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1556180896315},{"_id":"themes/indigo/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1556180896327},{"_id":"themes/indigo/_config.yml","hash":"e62afa218e626764d2138e63610116361e3bd3cd","modified":1556180896617},{"_id":"themes/indigo/package.json","hash":"81db2293986662bb5ee784c5d2a2700e1f6fa1ba","modified":1556180896322},{"_id":"source/README.md","hash":"9517348e012835e9abef41781ca2739118f69b51","modified":1556180945734},{"_id":"source/_posts/Canvas-实现一个简单的贪吃蛇.md","hash":"9d57eb37bf22bcc37d5762519660ca57950d8e91","modified":1556182778245},{"_id":"source/_posts/Debounce-and-Throttle.md","hash":"5923b966845b08c6494c2088e7ea59832b1d7659","modified":1556182778251},{"_id":"source/_posts/Element-UI-组件-el-scrollbar-的文档.md","hash":"c7374cd6d074743d73849e6b30942162c8dcc588","modified":1556182778253},{"_id":"source/_posts/Vue工程化开发（一）.md","hash":"745c7978f6a2ab79ea2b5087f88664da94c729b3","modified":1556182778253},{"_id":"source/_posts/You-don't-know-cross-origin.md","hash":"7216e79049aa40ef02eee49b5b2c1089c93c892b","modified":1556181047712},{"_id":"source/_posts/axios-入门.md","hash":"f1b38c4d9f8303b7791cbdd3b86cb0aef9705f25","modified":1556182778228},{"_id":"source/_posts/shell常用命令.md","hash":"d37f92d368a4b0a3455fed691db539421dc0e9d2","modified":1556182778253},{"_id":"source/_posts/【译】React-函数式组件和-React-类有何不同.md","hash":"162e544f0c500eb9d01abeef9909c23ff2660e92","modified":1556180651877},{"_id":"source/_posts/【译】深入理解-ES2015，第一趴：块作用域-let-和-const.md","hash":"0e1b87018ad23baf7e56f32a23d4d52eb8d1871c","modified":1556180651877},{"_id":"source/_posts/一次-bug-的寻找之旅.md","hash":"19934144d7cd411852743b7bdc69484617ea6ba2","modified":1556180651877},{"_id":"source/_posts/下载-Github-仓库的指定文件夹.md","hash":"19d085b220ab5e6b1927205a10b7c4c7ee499b39","modified":1556180651877},{"_id":"source/_posts/入门级的git使用指北.md","hash":"20897b4277b220bb708e88f94ce8f7e95eee4781","modified":1556183168151},{"_id":"source/_posts/一个简单前端工具集.md","hash":"4e3ed1228873c443e6f7e8bab813c79e1c1d7bb6","modified":1556182885711},{"_id":"source/_posts/微信扫码登录原理解析.md","hash":"20169656d8601f743c0cdd881fafb841bc0e4631","modified":1556182872867},{"_id":"source/_posts/十大经典排序算法-JavaScript篇.md","hash":"e0ea4bcefb206ac4095e174fc49a15a714fedf6d","modified":1556182876837},{"_id":"source/_posts/快速构建一个-react-插件.md","hash":"9e34d7e7d07c2ebd286aa84dba55871fe1fde02b","modified":1556180651877},{"_id":"source/_posts/快速构建一个-vue-插件.md","hash":"69a2e1c455a68c05d9239a282c0231f550688901","modified":1556180651877},{"_id":"source/_posts/教你快速搭建个人博客.md","hash":"be4750f0a75956d20f3008a38fefc0f9e3cad6a8","modified":1556182866601},{"_id":"source/_posts/浅析js中的位运算及应用.md","hash":"a5cc0c966246198a57c0c6836eefbf76d713d093","modified":1556182862777},{"_id":"source/_posts/浏览器杂谈.md","hash":"691b4741bc940f33a34a8e16f593326b341dc87e","modified":1556182854754},{"_id":"source/_posts/网易云音乐播放器.md","hash":"240c332a3c90f98ffbc53352d5439f59e76109a7","modified":1556182846714},{"_id":"source/_posts/你所不知道的-chrome-控制台.md","hash":"20a2d5269e90e24eebe5b9969a2f299c54038c47","modified":1556180651877},{"_id":"source/_posts/转-如何监听JS变量的变化.md","hash":"0c5db45272497d4da50b07454e6d12d08c7811d6","modified":1556182839711},{"_id":"source/_posts/高德地图 Javascript API 入门（一）.md","hash":"cc98ee1f6ede1394676a1cec4a5c17196a953f6f","modified":1556182836531},{"_id":"source/_posts/高德地图 Javascript API 入门（三）.md","hash":"d94c7f51074c31f3505dacc00fe4391ccb0c7a46","modified":1556182832857},{"_id":"source/_posts/高德地图 Javascript API 入门（二）.md","hash":"956ab736ee16f6f1ebd8c973392172bf54c32947","modified":1556182827205},{"_id":"source/_posts/高德地图 Javascript API 入门（五）.md","hash":"289bc6cd0cd80d883728c29200f8b3328b560944","modified":1556182824437},{"_id":"source/_posts/高德地图 Javascript API 入门（八）.md","hash":"b509eb25c482887815686ea086306be48dfe5416","modified":1556182820705},{"_id":"source/_posts/高德地图 Javascript API 入门（六）.md","hash":"668293fa0d7fb5575d742a86675c99fa6e721597","modified":1556182816705},{"_id":"source/tags/index.md","hash":"89c3b4b95552eb7e014cebf71ea57423e8f91f3d","modified":1556180945737},{"_id":"source/uploads/favicon.ico","hash":"cbe9fbf1347ace35b6d21e292f5c376e4e76db15","modified":1556180651877},{"_id":"source/uploads/me.jpg","hash":"58b2f691558a66d8212c7b6eff8f0959a43c7cf5","modified":1556180651877},{"_id":"themes/indigo/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1556180895781},{"_id":"themes/indigo/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1556180895788},{"_id":"themes/indigo/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1556180895793},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1556180895800},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1556180895806},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1556180895811},{"_id":"themes/indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1556180895829},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1556180895845},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1556180895850},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1556180895858},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1556180895866},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1556180895885},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1556180895895},{"_id":"themes/indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1556180895900},{"_id":"themes/indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1556180896333},{"_id":"source/_posts/高德地图 Javascript API 入门（七）.md","hash":"1a987435b482dca3db79536e31c497f128507651","modified":1556182830152},{"_id":"source/_posts/转-如何监听DOM树改变.md","hash":"c6209e25669e216df7f1b7f71179546c61167da2","modified":1556182843702},{"_id":"source/_posts/Javascript-类与继承.md","hash":"27a71cb1492afff941f796d35b11d714188d8a90","modified":1556182778253},{"_id":"source/_posts/高德地图 Javascript API 入门（四）.md","hash":"6c79f7a6d9100a9238ae52c39f8cc800e5c3c5bb","modified":1556182811915},{"_id":"source/_posts/浏览器兼容性问题Q-A.md","hash":"576136d778e04d71e2809c9a9ad6b9af1ac7d1d2","modified":1556182859687},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1556180895915},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1556180895923},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"e1a71a30a1c7a664ddf3ba3e7eb3a5b90bc4b33c","modified":1556180895935},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1556180895947},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1556180895972},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1556180895985},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1556180896002},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1556180896011},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1556180896028},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1556180896279},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"439d6315a1b16e32b77a68c3f0cb2961d581086a","modified":1556180896287},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1556180896303},{"_id":"themes/indigo/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1556180896422},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1556180651940},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"62a4893b1a32e997dcdb6e467b10559df75221e2","modified":1556180651940},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1556180651955},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1556180651955},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1556180651955},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1556180651955},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1556180651955},{"_id":"themes/indigo/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1556180896587},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1556180896613},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1556180896298},{"_id":"themes/indigo/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1556180896601},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1556180896037},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1556180896049},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1556180896057},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1556180896068},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1556180896078},{"_id":"themes/indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1556180896087},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1556180896100},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1556180896109},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1556180896115},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1556180896121},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1556180896128},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"a976ca36bd09aeb2902bf94fcc7a59975ea25148","modified":1556180896134},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1556180896144},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"bcc3bd7a9023d71778f15e98c88552335ae69a69","modified":1556180896153},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1556180896165},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1556180896174},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1556180896181},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1556180896195},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1556180896206},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1556180896212},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1556180896221},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1556180896231},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1556180896242},{"_id":"themes/indigo/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1556180896574},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1556180896251},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1556180896429},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1556180896435},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1556180896455},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1556180896461},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1556180896467},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1556180896473},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1556180896480},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1556180896486},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1556180896491},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1556180896498},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1556180896505},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1556180896517},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1556180896525},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1556180896531},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"082896b966ed25b39c74e7b007b4f54c235685a4","modified":1556180896536},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1556180896261},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1556180896270},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1556180896549},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1556180896511},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1556180896543},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1556180896443},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1556180651924},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1556180651924},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1556180651924},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1556180651924},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1556180651924},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1556180651924},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1556180651940},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1556180651924},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1556180651924},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1556180651924},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1556180896352},{"_id":"public/atom.xml","hash":"166c1757b6d418b2473f76a79d30fb8464516cd9","modified":1556183209477},{"_id":"public/content.json","hash":"7d3a17f9a1364817c8ab144f1bdf0669361cf7e0","modified":1556183210589},{"_id":"public/tags/index.html","hash":"9df457b56cfcc2efd68b92306816b152c5091ccf","modified":1556183210617},{"_id":"public/archives/index.html","hash":"f43fa0092ea76fc2a20351ca9ae5ca827057dfe6","modified":1556183210617},{"_id":"public/archives/page/2/index.html","hash":"e70e2d7ed0de6744bcbc64240bf4aede93d0b011","modified":1556183210618},{"_id":"public/archives/page/4/index.html","hash":"0b07181efdfde4017e3f0e0f3ab87ced24050161","modified":1556183210618},{"_id":"public/archives/2017/page/2/index.html","hash":"3726825ff850061ac156ca32761ae21e5b26b243","modified":1556183210618},{"_id":"public/archives/2017/02/index.html","hash":"5821163e08717406a42131aabf5fae6b0c4c662b","modified":1556183210618},{"_id":"public/archives/2017/03/index.html","hash":"e13a5e559b88715123e51a2f8e5c56e9786007f3","modified":1556183210618},{"_id":"public/archives/2017/07/index.html","hash":"0e19811c6be172fca4b70429e386ae0f9d4380c6","modified":1556183210618},{"_id":"public/archives/2017/09/index.html","hash":"cf4804f3393a397734e181a71ab35e62ea3ac4de","modified":1556183210618},{"_id":"public/archives/2017/10/index.html","hash":"80f3fee93de0c141195492ba312dafa64f63aa3c","modified":1556183210618},{"_id":"public/archives/2017/11/index.html","hash":"36fbad3e15b8b2f9926da81b158b0da40cef298e","modified":1556183210618},{"_id":"public/archives/2018/index.html","hash":"1df8c93ed13a937d248e5f4bdd7dc2e921e051fb","modified":1556183210618},{"_id":"public/archives/2018/page/2/index.html","hash":"fb08ded108f3fbd25d835b891e8dc7ed57497217","modified":1556183210618},{"_id":"public/archives/2018/01/index.html","hash":"3e6336a10ef7cd842e93b6614c70fadf63dda9cf","modified":1556183210618},{"_id":"public/archives/2018/05/index.html","hash":"fc037237f019c0cac65f9b754d877f4f36075f44","modified":1556183210618},{"_id":"public/archives/2018/06/index.html","hash":"232dec8564ea2ccaa0f6e16ef3fdf302389fe12d","modified":1556183210618},{"_id":"public/archives/2018/07/index.html","hash":"786183feedd37eac7499971d6ddab01384a8ec12","modified":1556183210618},{"_id":"public/archives/2018/08/index.html","hash":"3c3553d7edee0f5fb86691081bbae802edb5fca6","modified":1556183210618},{"_id":"public/archives/2018/09/index.html","hash":"a86f0b51a5a30ee4bdf6f9539c918730e8346afe","modified":1556183210618},{"_id":"public/archives/2018/10/index.html","hash":"38e3c53e4da4cb9fb70da8864c9e9d453d1e57eb","modified":1556183210618},{"_id":"public/archives/2018/11/index.html","hash":"9437c309a4f074b14fddb3e34a2fe4711fe9e9be","modified":1556183210618},{"_id":"public/archives/2019/index.html","hash":"2d55232040e8e8eea736b31f2cb4c64b3223e6ae","modified":1556183210618},{"_id":"public/archives/2019/01/index.html","hash":"61a687091cd87ae6874a93fcc62e03de1a396a4d","modified":1556183210618},{"_id":"public/archives/2019/02/index.html","hash":"3a239c2ec9e4a6e8986261a7de43a639291f0fb9","modified":1556183210618},{"_id":"public/archives/2019/03/index.html","hash":"6d8969d9b718ce5d3d318323751312789efed10b","modified":1556183210618},{"_id":"public/archives/2019/04/index.html","hash":"0b095f411d3bcd1ff1ec269a01c2a4a64c6b19d5","modified":1556183210619},{"_id":"public/page/4/index.html","hash":"093b68254cb474105ed04c6419728f74e5b5cd4e","modified":1556183210619},{"_id":"public/tags/网站优化/index.html","hash":"ccf5cd417d2879f883e42f623d2bd912b94fc637","modified":1556183210619},{"_id":"public/tags/博客/index.html","hash":"e74c49ed7229b08badbd08b85eb66a0625d20718","modified":1556183210619},{"_id":"public/tags/Git/index.html","hash":"aaf3f3621311d65bdc66f504e984f3899df5b55c","modified":1556183210619},{"_id":"public/tags/建站/index.html","hash":"778fb5587071a251493aaa316b24ac8dc2989660","modified":1556183210619},{"_id":"public/tags/Hexo/index.html","hash":"7a6f398a2988d920936f1a523ea17f441e54288a","modified":1556183210619},{"_id":"public/tags/前端/index.html","hash":"33b0e75e2a4798d21aaf48a4c1ac0c3fe8238297","modified":1556183210619},{"_id":"public/tags/音乐播放器/index.html","hash":"4e329de4be739949e529957a9b92cd1362700a83","modified":1556183210619},{"_id":"public/tags/翻译计划/index.html","hash":"f2d0fb26c273173940c1222ec1b2a1426aaea176","modified":1556183210619},{"_id":"public/tags/算法/index.html","hash":"05b73ee2971c17ec5306c5d66d268860ef8fb70e","modified":1556183210619},{"_id":"public/tags/浏览器/index.html","hash":"8913d9395038a82ce9cb394407aa9d0cb73a9275","modified":1556183210619},{"_id":"public/tags/兼容性/index.html","hash":"f9b1c375a33e3f9850809b6aed7723f38b1c7895","modified":1556183210619},{"_id":"public/2019/04/17/一次-bug-的寻找之旅/index.html","hash":"4b21f085267b3078c075dc00140b0b1dcbca222e","modified":1556183210619},{"_id":"public/2019/04/07/【译】React-函数式组件和-React-类有何不同/index.html","hash":"a63c357fac2b64fe462d3c2bc85c3ea62887f76d","modified":1556183210619},{"_id":"public/2019/03/05/Element-UI-组件-el-scrollbar-的文档/index.html","hash":"9a3205b1e9bc4e59eebccbddada117031627c279","modified":1556183210619},{"_id":"public/2019/02/19/你所不知道的-chrome-控制台/index.html","hash":"91d1b8842f81ffc318f150ef72b5ca72d76cf94c","modified":1556183210619},{"_id":"public/2019/01/23/下载-Github-仓库的指定文件夹/index.html","hash":"8825000ee174b8f8ec1f8acdd186e62cc29951c9","modified":1556183210619},{"_id":"public/2019/01/15/【译】深入理解-ES2015，第一趴：块作用域-let-和-const/index.html","hash":"28f04392b76d3cadac4a0c7b1c3a0a79695f6af1","modified":1556183210619},{"_id":"public/2019/01/10/快速构建一个-vue-插件/index.html","hash":"c51bf9f9c13d9c4e2070728c466ebb34c91bd9c6","modified":1556183210619},{"_id":"public/2019/01/04/快速构建一个-react-插件/index.html","hash":"c7755104edf4c0c9b782636a73f5153466cf0101","modified":1556183210619},{"_id":"public/2018/11/19/You-don't-know-cross-origin/index.html","hash":"c5ea5227786bf076773340ef1e451ea9659dbe1b","modified":1556183210619},{"_id":"public/2018/11/15/Canvas-实现一个简单的贪吃蛇/index.html","hash":"d7756cc27fae24be1ef300b782444a7d9e84d338","modified":1556183210619},{"_id":"public/2018/10/14/一个简单前端工具集/index.html","hash":"3c2dd247531b7932da462e58bae2132eb13f7128","modified":1556183210620},{"_id":"public/2018/09/23/浅析js中的位运算及应用/index.html","hash":"47cd2760decb5de40fead57adefc8ab456bd6aa3","modified":1556183210620},{"_id":"public/2018/09/06/Javascript-类与继承/index.html","hash":"d1745631e79378b4656a16786119d7c8181065e2","modified":1556183210620},{"_id":"public/2018/08/13/十大经典排序算法-JavaScript篇/index.html","hash":"73d38dd97074d252c07e51e215ae71684c66cbf5","modified":1556183210620},{"_id":"public/2018/07/03/微信扫码登录原理解析/index.html","hash":"edb557c504a5bc762d8d945d4436e1d8ec1e5a7f","modified":1556183210620},{"_id":"public/2018/06/22/Debounce-and-Throttle/index.html","hash":"bdedb8042321a54b4a3de065350824281ae62173","modified":1556183210620},{"_id":"public/2018/06/05/浏览器杂谈/index.html","hash":"ecc01e829c34c33ddd931b15e0c321baa59c95c5","modified":1556183210620},{"_id":"public/2018/05/14/浏览器兼容性问题Q-A/index.html","hash":"e723f0900d49e274ee68e30474ecf38e3b1869f3","modified":1556183210620},{"_id":"public/2018/05/08/入门级的git使用指北/index.html","hash":"2bcd65ca1bc9c175cfe44fc35bd360eea6567be8","modified":1556183210620},{"_id":"public/2018/01/12/Vue工程化开发（一）/index.html","hash":"9fcf3797a01b733b437629ea1da7e84f1bca74ad","modified":1556183210620},{"_id":"public/2017/11/08/转-如何监听DOM树改变/index.html","hash":"629c4de7e2791d36d2f34ea2ed270deafb86091a","modified":1556183210620},{"_id":"public/2017/10/12/axios-入门/index.html","hash":"469ab3e03268dbe2c727e0c069b9d7bf769de43d","modified":1556183210620},{"_id":"public/2017/09/20/转-如何监听JS变量的变化/index.html","hash":"73240567bc046519188fefc867200681f72c661d","modified":1556183210620},{"_id":"public/2017/07/16/shell常用命令/index.html","hash":"a0c89a8774c41cdf28faef4726e11d66d007e9cf","modified":1556183210620},{"_id":"public/2017/03/07/高德地图 Javascript API 入门（八）/index.html","hash":"d31afd5be5e441a01bee99d7e0c742c9ccdb5250","modified":1556183210620},{"_id":"public/2017/03/04/高德地图 Javascript API 入门（七）/index.html","hash":"98fa89e8fbde23a4f9ab4ed56f94e235628f641c","modified":1556183210620},{"_id":"public/2017/02/28/高德地图 Javascript API 入门（六）/index.html","hash":"d8a53d4f2a5094bb9c86a7b18b06c94385238125","modified":1556183210620},{"_id":"public/2017/02/26/高德地图 Javascript API 入门（五）/index.html","hash":"5faad59f104428f17557c0ffff9fcc15a7b96c2d","modified":1556183210620},{"_id":"public/2017/02/22/高德地图 Javascript API 入门（四）/index.html","hash":"984dad82953168cd82389de47d35aa54067ffdad","modified":1556183210620},{"_id":"public/2017/02/22/高德地图 Javascript API 入门（三）/index.html","hash":"83cff5e2cf0787ce9092bdc040fc06f866f1545a","modified":1556183210620},{"_id":"public/2017/02/21/高德地图 Javascript API 入门（二）/index.html","hash":"73d966672ebb5f33a402e46677ccb6cdca44cb0a","modified":1556183210620},{"_id":"public/2017/02/20/高德地图 Javascript API 入门（一）/index.html","hash":"aca1d453b43f8c3b5840cd2c820fb0012e7d3e75","modified":1556183210621},{"_id":"public/2017/02/18/网易云音乐播放器/index.html","hash":"e70c151a2a27d42d5295818ea2551eb9c4e3c2b0","modified":1556183210621},{"_id":"public/2017/02/03/教你快速搭建个人博客/index.html","hash":"6415154e7b9322f4603632ce74a2fb566f058642","modified":1556183210621},{"_id":"public/archives/page/3/index.html","hash":"f234214359f8b971df3fdf5933c980ecd16db54e","modified":1556183210621},{"_id":"public/archives/2017/index.html","hash":"90b638f21979a12e60bb99074d1f1c5e244d9458","modified":1556183210621},{"_id":"public/index.html","hash":"b695d0cc0f98b5145da9691f9df17b5990fe1f69","modified":1556183210621},{"_id":"public/page/2/index.html","hash":"3199c32fd7f8c83ea2c937ae66731dfe4cf877be","modified":1556183210621},{"_id":"public/page/3/index.html","hash":"351df4ee31db215897466c507a8d1746f15c3349","modified":1556183210621},{"_id":"public/tags/JS/index.html","hash":"5494717a1b209ec97989480536ecc97200b8a136","modified":1556183210621},{"_id":"public/tags/GIS/index.html","hash":"00054a36e6a3abe5d1fb2d641c9f62b6fe24c259","modified":1556183210621},{"_id":"public/tags/API/index.html","hash":"a67af893d452e48c3932ed6b7ab79a223898b324","modified":1556183210621},{"_id":"public/LICENSE","hash":"89748de5eaa9fc527cafa31a5f1881cd0b7ae619","modified":1556183210637},{"_id":"public/README.md","hash":"9517348e012835e9abef41781ca2739118f69b51","modified":1556183210637},{"_id":"public/uploads/favicon.ico","hash":"cbe9fbf1347ace35b6d21e292f5c376e4e76db15","modified":1556183210637},{"_id":"public/uploads/me.jpg","hash":"58b2f691558a66d8212c7b6eff8f0959a43c7cf5","modified":1556183210637},{"_id":"public/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1556183210637},{"_id":"public/img/avatar.jpg","hash":"62a4893b1a32e997dcdb6e467b10559df75221e2","modified":1556183210637},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1556183210637},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1556183210637},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1556183210637},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1556183210637},{"_id":"public/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1556183210637},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1556183210637},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1556183210637},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1556183210637},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1556183210637},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1556183210637},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1556183210637},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1556183210638},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1556183210638},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1556183210638},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1556183210638},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1556183210638},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1556183210638},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1556183210638},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1556183210638},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1556183210638},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1556183210683},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1556183210683},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1556183210684},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1556183210684},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1556183210684},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1556183210684},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1556183210684},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1556183210737},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1556183210737},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1556183210737},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1556183210737},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1556183210737},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1556183210738},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1556183210751},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1556183210949},{"_id":"public/css/style.css","hash":"27f88e278b738328b5acd28e88b5cb20daa490e6","modified":1556183212757}],"Category":[],"Data":[],"Page":[{"title":"TagCloud","date":"2017-02-03T14:04:03.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: TagCloud\ndate: 2017-02-03 22:04:03\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-04-25T08:29:05.737Z","path":"tags/index.html","layout":"page","_id":"cjuwfaule001maeyyfcws1ifs","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Debounce and Throttle","date":"2018-06-22T08:41:29.000Z","_content":"\n# 防抖动与节流\n\n> [DEMO](http://yangfan2016.github.io/myweb2016/demo/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/)\n\n### 防抖动\n```js\nvar debounce = function (fn, delay, isImmediate) {\n    var timer = null;\n    // 默认不立即触发\n    isImmediate = typeof isImmediate === \"undefined\" ? false : isImmediate;\n\n    return function () {\n        var ctx = this, // 保存作用域\n            args = arguments; // 保存参数\n        // 初始化清空所有定时器\n        if (timer) {\n            clearTimeout(timer);\n        }\n        // 如果是立即触发\n        if (isImmediate) {\n            if (!timer) { // timer为空时触发操作\n                fn.apply(ctx, args);\n            }\n            // delay时间后置空timer\n            timer = setTimeout(_ => {\n                timer = null;\n            }, delay);\n        } else { // delay时间后触发操作\n            timer = setTimeout(_ => {\n                fn.apply(ctx, args);\n            }, delay);\n        }\n    };\n};\n```\n\n防抖动立即触发\n![debounce-immediate.png](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/debounce-immediate.png)\n\n防抖动\n![debounce.png](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/debounce.png)\n\n### 节流\n```js\nvar throttle = function (fn, delay, isImmediate) {\n    var timer = null;\n    // 默认立即触发\n    isImmediate = typeof isImmediate === \"undefined\" ? true : isImmediate;\n\n    return function () {\n        var ctx = this, // 保存作用域\n            args = arguments; // 保存参数\n        if (!timer) { // timer为空时\n            if (isImmediate) fn.apply(ctx, args); // 立即触发\n            timer = setTimeout(function () {\n                clearTimeout(timer);\n                timer = null;\n                if (!isImmediate) fn.apply(ctx, args); // delay时间后触发操作\n            }, delay);\n        }\n    };\n};\n\n```\n节流立即触发\n![throttle-immediate.png](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/throttle-immediate.png)\n节流\n![throttle.png](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/throttle.png)\n### 总结\n\n- 防抖动：将多个操作合并为一个操作（例如，键盘输入关键字搜索内容），在规定延时时间后触发，如果在定时器时间范围内触发，则会清楚定时器，重新计时\n- 节流：在给定的延时时间后触发一次操作，在此时间范围内的操作均不触发（例如，图片懒加载、向下无限滚动获取新数据）","source":"_posts/Debounce-and-Throttle.md","raw":"---\ntitle: Debounce and Throttle\ndate: 2018-06-22 16:41:29\ntags: [JS,网站优化]\n---\n\n# 防抖动与节流\n\n> [DEMO](http://yangfan2016.github.io/myweb2016/demo/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/)\n\n### 防抖动\n```js\nvar debounce = function (fn, delay, isImmediate) {\n    var timer = null;\n    // 默认不立即触发\n    isImmediate = typeof isImmediate === \"undefined\" ? false : isImmediate;\n\n    return function () {\n        var ctx = this, // 保存作用域\n            args = arguments; // 保存参数\n        // 初始化清空所有定时器\n        if (timer) {\n            clearTimeout(timer);\n        }\n        // 如果是立即触发\n        if (isImmediate) {\n            if (!timer) { // timer为空时触发操作\n                fn.apply(ctx, args);\n            }\n            // delay时间后置空timer\n            timer = setTimeout(_ => {\n                timer = null;\n            }, delay);\n        } else { // delay时间后触发操作\n            timer = setTimeout(_ => {\n                fn.apply(ctx, args);\n            }, delay);\n        }\n    };\n};\n```\n\n防抖动立即触发\n![debounce-immediate.png](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/debounce-immediate.png)\n\n防抖动\n![debounce.png](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/debounce.png)\n\n### 节流\n```js\nvar throttle = function (fn, delay, isImmediate) {\n    var timer = null;\n    // 默认立即触发\n    isImmediate = typeof isImmediate === \"undefined\" ? true : isImmediate;\n\n    return function () {\n        var ctx = this, // 保存作用域\n            args = arguments; // 保存参数\n        if (!timer) { // timer为空时\n            if (isImmediate) fn.apply(ctx, args); // 立即触发\n            timer = setTimeout(function () {\n                clearTimeout(timer);\n                timer = null;\n                if (!isImmediate) fn.apply(ctx, args); // delay时间后触发操作\n            }, delay);\n        }\n    };\n};\n\n```\n节流立即触发\n![throttle-immediate.png](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/throttle-immediate.png)\n节流\n![throttle.png](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/throttle.png)\n### 总结\n\n- 防抖动：将多个操作合并为一个操作（例如，键盘输入关键字搜索内容），在规定延时时间后触发，如果在定时器时间范围内触发，则会清楚定时器，重新计时\n- 节流：在给定的延时时间后触发一次操作，在此时间范围内的操作均不触发（例如，图片懒加载、向下无限滚动获取新数据）","slug":"Debounce-and-Throttle","published":1,"updated":"2019-04-25T08:59:38.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauif0000aeyyjtlwo50z","content":"<h1 id=\"防抖动与节流\"><a href=\"#防抖动与节流\" class=\"headerlink\" title=\"防抖动与节流\"></a>防抖动与节流</h1><blockquote>\n<p><a href=\"http://yangfan2016.github.io/myweb2016/demo/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/\" target=\"_blank\" rel=\"noopener\">DEMO</a></p>\n</blockquote>\n<h3 id=\"防抖动\"><a href=\"#防抖动\" class=\"headerlink\" title=\"防抖动\"></a>防抖动</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> debounce = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn, delay, isImmediate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 默认不立即触发</span></span><br><span class=\"line\">    isImmediate = <span class=\"keyword\">typeof</span> isImmediate === <span class=\"string\">\"undefined\"</span> ? <span class=\"literal\">false</span> : isImmediate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>, <span class=\"comment\">// 保存作用域</span></span><br><span class=\"line\">            args = <span class=\"built_in\">arguments</span>; <span class=\"comment\">// 保存参数</span></span><br><span class=\"line\">        <span class=\"comment\">// 初始化清空所有定时器</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            clearTimeout(timer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果是立即触发</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isImmediate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!timer) &#123; <span class=\"comment\">// timer为空时触发操作</span></span><br><span class=\"line\">                fn.apply(ctx, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// delay时间后置空timer</span></span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;, delay);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// delay时间后触发操作</span></span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">                fn.apply(ctx, args);</span><br><span class=\"line\">            &#125;, delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>防抖动立即触发<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/debounce-immediate.png\" alt=\"debounce-immediate.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">debounce-immediate.png</div>\n            </figure></p>\n<p>防抖动<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/debounce.png\" alt=\"debounce.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">debounce.png</div>\n            </figure></p>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn, delay, isImmediate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 默认立即触发</span></span><br><span class=\"line\">    isImmediate = <span class=\"keyword\">typeof</span> isImmediate === <span class=\"string\">\"undefined\"</span> ? <span class=\"literal\">true</span> : isImmediate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>, <span class=\"comment\">// 保存作用域</span></span><br><span class=\"line\">            args = <span class=\"built_in\">arguments</span>; <span class=\"comment\">// 保存参数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123; <span class=\"comment\">// timer为空时</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isImmediate) fn.apply(ctx, args); <span class=\"comment\">// 立即触发</span></span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                clearTimeout(timer);</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!isImmediate) fn.apply(ctx, args); <span class=\"comment\">// delay时间后触发操作</span></span><br><span class=\"line\">            &#125;, delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>节流立即触发<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/throttle-immediate.png\" alt=\"throttle-immediate.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">throttle-immediate.png</div>\n            </figure><br>节流<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/throttle.png\" alt=\"throttle.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">throttle.png</div>\n            </figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>防抖动：将多个操作合并为一个操作（例如，键盘输入关键字搜索内容），在规定延时时间后触发，如果在定时器时间范围内触发，则会清楚定时器，重新计时</li>\n<li>节流：在给定的延时时间后触发一次操作，在此时间范围内的操作均不触发（例如，图片懒加载、向下无限滚动获取新数据）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"防抖动与节流\"><a href=\"#防抖动与节流\" class=\"headerlink\" title=\"防抖动与节流\"></a>防抖动与节流</h1><blockquote>\n<p><a href=\"http://yangfan2016.github.io/myweb2016/demo/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/\" target=\"_blank\" rel=\"noopener\">DEMO</a></p>\n</blockquote>\n<h3 id=\"防抖动\"><a href=\"#防抖动\" class=\"headerlink\" title=\"防抖动\"></a>防抖动</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> debounce = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn, delay, isImmediate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 默认不立即触发</span></span><br><span class=\"line\">    isImmediate = <span class=\"keyword\">typeof</span> isImmediate === <span class=\"string\">\"undefined\"</span> ? <span class=\"literal\">false</span> : isImmediate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>, <span class=\"comment\">// 保存作用域</span></span><br><span class=\"line\">            args = <span class=\"built_in\">arguments</span>; <span class=\"comment\">// 保存参数</span></span><br><span class=\"line\">        <span class=\"comment\">// 初始化清空所有定时器</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            clearTimeout(timer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果是立即触发</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isImmediate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!timer) &#123; <span class=\"comment\">// timer为空时触发操作</span></span><br><span class=\"line\">                fn.apply(ctx, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// delay时间后置空timer</span></span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;, delay);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// delay时间后触发操作</span></span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">                fn.apply(ctx, args);</span><br><span class=\"line\">            &#125;, delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>防抖动立即触发<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/debounce-immediate.png\" alt=\"debounce-immediate.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">debounce-immediate.png</div>\n            </figure></p>\n<p>防抖动<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/debounce.png\" alt=\"debounce.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">debounce.png</div>\n            </figure></p>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn, delay, isImmediate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 默认立即触发</span></span><br><span class=\"line\">    isImmediate = <span class=\"keyword\">typeof</span> isImmediate === <span class=\"string\">\"undefined\"</span> ? <span class=\"literal\">true</span> : isImmediate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>, <span class=\"comment\">// 保存作用域</span></span><br><span class=\"line\">            args = <span class=\"built_in\">arguments</span>; <span class=\"comment\">// 保存参数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123; <span class=\"comment\">// timer为空时</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isImmediate) fn.apply(ctx, args); <span class=\"comment\">// 立即触发</span></span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                clearTimeout(timer);</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!isImmediate) fn.apply(ctx, args); <span class=\"comment\">// delay时间后触发操作</span></span><br><span class=\"line\">            &#125;, delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>节流立即触发<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/throttle-immediate.png\" alt=\"throttle-immediate.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">throttle-immediate.png</div>\n            </figure><br>节流<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/throttle.png\" alt=\"throttle.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">throttle.png</div>\n            </figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>防抖动：将多个操作合并为一个操作（例如，键盘输入关键字搜索内容），在规定延时时间后触发，如果在定时器时间范围内触发，则会清楚定时器，重新计时</li>\n<li>节流：在给定的延时时间后触发一次操作，在此时间范围内的操作均不触发（例如，图片懒加载、向下无限滚动获取新数据）</li>\n</ul>\n"},{"title":"Element-UI  组件 el-scrollbar 的文档","date":"2019-03-05T09:09:53.000Z","_content":"\n\n## Element-UI  组件 el-scrollbar 的文档\n\n### 前言\n\n我们在 Element-UI 的其他组件里发现，有使用这个组件，并且还不错，由于 Element-UI 官方文档并没有写到关于 `el-scrollbar` 的文档，所以稳定性上可能是有些问题，这里只是爬了源码，翻译了一些属性的使用，仅供参考\n \n### 快速使用\n\n```html\n\n<el-scrollbar>\n    <li v-for=\"user in userList\" :key=\"user.id\">{{user.name}}</li>\n</el-scrollbar>\n\n```\n\n### 具体实例\n\n```html\n<el-scrollbar\n    wrapClass=\"yf-container\"\n    viewClass=\"yf-content\"\n    wrapStyle=\"color:'#fff';fontSize:'16px';\"\n    viewStyle=\"color:'#fff';fontSize:'16px';\"\n    :native=\"false\"\n    :noresize=\"true\"\n    tag=\"ul\"\n>\n    <li v-for=\"user in userList\" :key=\"user.id\">{{user.name}}</li>\n</el-scrollbar>\n\n```\n\n### 结构构成\n\n![constructor](https://user-gold-cdn.xitu.io/2019/1/21/1686f8b54408c5e2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n### 文档\n\nAttribute\n\n| 参数 | 说明 | 类型 | 可选值\t| 默认值 | \n| :----: | :----: | :----: | :----: | :----: |\n| wrapClass | 可选参数，容器的样式名 | string | - | - |\n| viewClass | 可选参数，展示视图的样式名 | string | - | - |\n| wrapStyle | 可选参数，容器的样式 | string | - | - |\n| viewStyle | 可选参数，展示视图的样式 | string | - | - |\n| native    | 可选参数，是否使用原生滚动 | boolean | - | false |\n| noresize | 可选参数，容器大小是否是不可变的 | boolean | - | false |\n| tag      | 可选参数，渲染容器的标签 | string | - | div |\n\n\n### 备注\n\n源码 [https://github.com/ElemeFE/element/blob/dev/packages/scrollbar/src/main.js](https://github.com/ElemeFE/element/blob/dev/packages/scrollbar/src/main.js)  \n\n文章 [element ScrollBar滚动组件源码深入分析](https://juejin.im/post/5c4583eee51d4526e57d8a5a)","source":"_posts/Element-UI-组件-el-scrollbar-的文档.md","raw":"---\ntitle: Element-UI  组件 el-scrollbar 的文档\ndate: 2019-03-05 17:09:53\ntags:\n---\n\n\n## Element-UI  组件 el-scrollbar 的文档\n\n### 前言\n\n我们在 Element-UI 的其他组件里发现，有使用这个组件，并且还不错，由于 Element-UI 官方文档并没有写到关于 `el-scrollbar` 的文档，所以稳定性上可能是有些问题，这里只是爬了源码，翻译了一些属性的使用，仅供参考\n \n### 快速使用\n\n```html\n\n<el-scrollbar>\n    <li v-for=\"user in userList\" :key=\"user.id\">{{user.name}}</li>\n</el-scrollbar>\n\n```\n\n### 具体实例\n\n```html\n<el-scrollbar\n    wrapClass=\"yf-container\"\n    viewClass=\"yf-content\"\n    wrapStyle=\"color:'#fff';fontSize:'16px';\"\n    viewStyle=\"color:'#fff';fontSize:'16px';\"\n    :native=\"false\"\n    :noresize=\"true\"\n    tag=\"ul\"\n>\n    <li v-for=\"user in userList\" :key=\"user.id\">{{user.name}}</li>\n</el-scrollbar>\n\n```\n\n### 结构构成\n\n![constructor](https://user-gold-cdn.xitu.io/2019/1/21/1686f8b54408c5e2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n### 文档\n\nAttribute\n\n| 参数 | 说明 | 类型 | 可选值\t| 默认值 | \n| :----: | :----: | :----: | :----: | :----: |\n| wrapClass | 可选参数，容器的样式名 | string | - | - |\n| viewClass | 可选参数，展示视图的样式名 | string | - | - |\n| wrapStyle | 可选参数，容器的样式 | string | - | - |\n| viewStyle | 可选参数，展示视图的样式 | string | - | - |\n| native    | 可选参数，是否使用原生滚动 | boolean | - | false |\n| noresize | 可选参数，容器大小是否是不可变的 | boolean | - | false |\n| tag      | 可选参数，渲染容器的标签 | string | - | div |\n\n\n### 备注\n\n源码 [https://github.com/ElemeFE/element/blob/dev/packages/scrollbar/src/main.js](https://github.com/ElemeFE/element/blob/dev/packages/scrollbar/src/main.js)  \n\n文章 [element ScrollBar滚动组件源码深入分析](https://juejin.im/post/5c4583eee51d4526e57d8a5a)","slug":"Element-UI-组件-el-scrollbar-的文档","published":1,"updated":"2019-04-25T08:59:38.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauiw0001aeyyg5zro04j","content":"<h2 id=\"Element-UI-组件-el-scrollbar-的文档\"><a href=\"#Element-UI-组件-el-scrollbar-的文档\" class=\"headerlink\" title=\"Element-UI  组件 el-scrollbar 的文档\"></a>Element-UI  组件 el-scrollbar 的文档</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>我们在 Element-UI 的其他组件里发现，有使用这个组件，并且还不错，由于 Element-UI 官方文档并没有写到关于 <code>el-scrollbar</code> 的文档，所以稳定性上可能是有些问题，这里只是爬了源码，翻译了一些属性的使用，仅供参考</p>\n<h3 id=\"快速使用\"><a href=\"#快速使用\" class=\"headerlink\" title=\"快速使用\"></a>快速使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-scrollbar</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in userList\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">el-scrollbar</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"具体实例\"><a href=\"#具体实例\" class=\"headerlink\" title=\"具体实例\"></a>具体实例</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-scrollbar</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">wrapClass</span>=<span class=\"string\">\"yf-container\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">viewClass</span>=<span class=\"string\">\"yf-content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">wrapStyle</span>=<span class=\"string\">\"color:'#fff';fontSize:'16px';\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">viewStyle</span>=<span class=\"string\">\"color:'#fff';fontSize:'16px';\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:native</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:noresize</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tag</span>=<span class=\"string\">\"ul\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in userList\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">el-scrollbar</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"结构构成\"><a href=\"#结构构成\" class=\"headerlink\" title=\"结构构成\"></a>结构构成</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/1/21/1686f8b54408c5e2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"constructor\" title=\"\">\n                </div>\n                <div class=\"image-caption\">constructor</div>\n            </figure>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><p>Attribute</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">可选值</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">wrapClass</td>\n<td style=\"text-align:center\">可选参数，容器的样式名</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">viewClass</td>\n<td style=\"text-align:center\">可选参数，展示视图的样式名</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wrapStyle</td>\n<td style=\"text-align:center\">可选参数，容器的样式</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">viewStyle</td>\n<td style=\"text-align:center\">可选参数，展示视图的样式</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">native</td>\n<td style=\"text-align:center\">可选参数，是否使用原生滚动</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">noresize</td>\n<td style=\"text-align:center\">可选参数，容器大小是否是不可变的</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tag</td>\n<td style=\"text-align:center\">可选参数，渲染容器的标签</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">div</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>源码 <a href=\"https://github.com/ElemeFE/element/blob/dev/packages/scrollbar/src/main.js\" target=\"_blank\" rel=\"noopener\">https://github.com/ElemeFE/element/blob/dev/packages/scrollbar/src/main.js</a>  </p>\n<p>文章 <a href=\"https://juejin.im/post/5c4583eee51d4526e57d8a5a\" target=\"_blank\" rel=\"noopener\">element ScrollBar滚动组件源码深入分析</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Element-UI-组件-el-scrollbar-的文档\"><a href=\"#Element-UI-组件-el-scrollbar-的文档\" class=\"headerlink\" title=\"Element-UI  组件 el-scrollbar 的文档\"></a>Element-UI  组件 el-scrollbar 的文档</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>我们在 Element-UI 的其他组件里发现，有使用这个组件，并且还不错，由于 Element-UI 官方文档并没有写到关于 <code>el-scrollbar</code> 的文档，所以稳定性上可能是有些问题，这里只是爬了源码，翻译了一些属性的使用，仅供参考</p>\n<h3 id=\"快速使用\"><a href=\"#快速使用\" class=\"headerlink\" title=\"快速使用\"></a>快速使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-scrollbar</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in userList\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">el-scrollbar</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"具体实例\"><a href=\"#具体实例\" class=\"headerlink\" title=\"具体实例\"></a>具体实例</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-scrollbar</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">wrapClass</span>=<span class=\"string\">\"yf-container\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">viewClass</span>=<span class=\"string\">\"yf-content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">wrapStyle</span>=<span class=\"string\">\"color:'#fff';fontSize:'16px';\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">viewStyle</span>=<span class=\"string\">\"color:'#fff';fontSize:'16px';\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:native</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:noresize</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tag</span>=<span class=\"string\">\"ul\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in userList\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">el-scrollbar</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"结构构成\"><a href=\"#结构构成\" class=\"headerlink\" title=\"结构构成\"></a>结构构成</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/1/21/1686f8b54408c5e2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"constructor\" title=\"\">\n                </div>\n                <div class=\"image-caption\">constructor</div>\n            </figure>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><p>Attribute</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">可选值</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">wrapClass</td>\n<td style=\"text-align:center\">可选参数，容器的样式名</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">viewClass</td>\n<td style=\"text-align:center\">可选参数，展示视图的样式名</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wrapStyle</td>\n<td style=\"text-align:center\">可选参数，容器的样式</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">viewStyle</td>\n<td style=\"text-align:center\">可选参数，展示视图的样式</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">native</td>\n<td style=\"text-align:center\">可选参数，是否使用原生滚动</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">noresize</td>\n<td style=\"text-align:center\">可选参数，容器大小是否是不可变的</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tag</td>\n<td style=\"text-align:center\">可选参数，渲染容器的标签</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">div</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>源码 <a href=\"https://github.com/ElemeFE/element/blob/dev/packages/scrollbar/src/main.js\" target=\"_blank\" rel=\"noopener\">https://github.com/ElemeFE/element/blob/dev/packages/scrollbar/src/main.js</a>  </p>\n<p>文章 <a href=\"https://juejin.im/post/5c4583eee51d4526e57d8a5a\" target=\"_blank\" rel=\"noopener\">element ScrollBar滚动组件源码深入分析</a></p>\n"},{"title":"Vue工程化开发（一）","date":"2018-01-12T02:58:42.000Z","_content":"\n# Vue工程化开发（一）\n\n\n\n> 利用Vue-cli脚手架在现有的MVC项目中进行前端开发\n\n#### 开发环境\n- Node\n- npm\n- Vue-cli\n\n\n## 搭建项目\n\n#### 1. 首先在项目中搭建一个前台文件夹，用 `vue init webpack projectname` （例如: `vue init webpack frontend`） \n\nfrontend 为Vue-cli自动生成的项目文件  \ncontent 目录下存放打包后的资源文件  \nviews目录下存放自动生成的cshtml文件  \n\n![](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-004.png) \n  \n  \n#### 2. 进入此文件夹（这里是 frontend）   配置 package.json ，安装所需插件  \n\n![](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-005.png) \n\n\n#### 3. 修改打包配置   进入 config/index.js     修改如下  \n\n![](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-001.jpg)\n\n#### 4. 在当前目录下新建一个模板页 index.cshtml  如下\n\n![](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-002.jpg)  \n\n#### 5. 修改打包html文件的配置  进入 build/webpack.prod.conf.js\n\n![](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-003.png) \n\n#### 6. `npm run dev`  测试  \n\n#### 7. `npm run build` 打包  \n\n\n## 项目目录\n\n![](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-006.png)\n\n","source":"_posts/Vue工程化开发（一）.md","raw":"---\ntitle: Vue工程化开发（一）\ndate: 2018-01-12 10:58:42\ntags:\n---\n\n# Vue工程化开发（一）\n\n\n\n> 利用Vue-cli脚手架在现有的MVC项目中进行前端开发\n\n#### 开发环境\n- Node\n- npm\n- Vue-cli\n\n\n## 搭建项目\n\n#### 1. 首先在项目中搭建一个前台文件夹，用 `vue init webpack projectname` （例如: `vue init webpack frontend`） \n\nfrontend 为Vue-cli自动生成的项目文件  \ncontent 目录下存放打包后的资源文件  \nviews目录下存放自动生成的cshtml文件  \n\n![](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-004.png) \n  \n  \n#### 2. 进入此文件夹（这里是 frontend）   配置 package.json ，安装所需插件  \n\n![](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-005.png) \n\n\n#### 3. 修改打包配置   进入 config/index.js     修改如下  \n\n![](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-001.jpg)\n\n#### 4. 在当前目录下新建一个模板页 index.cshtml  如下\n\n![](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-002.jpg)  \n\n#### 5. 修改打包html文件的配置  进入 build/webpack.prod.conf.js\n\n![](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-003.png) \n\n#### 6. `npm run dev`  测试  \n\n#### 7. `npm run build` 打包  \n\n\n## 项目目录\n\n![](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-006.png)\n\n","slug":"Vue工程化开发（一）","published":1,"updated":"2019-04-25T08:59:38.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauj30003aeyyd1hu5oa4","content":"<h1 id=\"Vue工程化开发（一）\"><a href=\"#Vue工程化开发（一）\" class=\"headerlink\" title=\"Vue工程化开发（一）\"></a>Vue工程化开发（一）</h1><blockquote>\n<p>利用Vue-cli脚手架在现有的MVC项目中进行前端开发</p>\n</blockquote>\n<h4 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h4><ul>\n<li>Node</li>\n<li>npm</li>\n<li>Vue-cli</li>\n</ul>\n<h2 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h2><h4 id=\"1-首先在项目中搭建一个前台文件夹，用-vue-init-webpack-projectname-（例如-vue-init-webpack-frontend）\"><a href=\"#1-首先在项目中搭建一个前台文件夹，用-vue-init-webpack-projectname-（例如-vue-init-webpack-frontend）\" class=\"headerlink\" title=\"1. 首先在项目中搭建一个前台文件夹，用 vue init webpack projectname （例如: vue init webpack frontend）\"></a>1. 首先在项目中搭建一个前台文件夹，用 <code>vue init webpack projectname</code> （例如: <code>vue init webpack frontend</code>）</h4><p>frontend 为Vue-cli自动生成的项目文件<br>content 目录下存放打包后的资源文件<br>views目录下存放自动生成的cshtml文件  </p>\n<p><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-004.png\" alt=\"\"> </p>\n<h4 id=\"2-进入此文件夹（这里是-frontend）-配置-package-json-，安装所需插件\"><a href=\"#2-进入此文件夹（这里是-frontend）-配置-package-json-，安装所需插件\" class=\"headerlink\" title=\"2. 进入此文件夹（这里是 frontend）   配置 package.json ，安装所需插件\"></a>2. 进入此文件夹（这里是 frontend）   配置 package.json ，安装所需插件</h4><p><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-005.png\" alt=\"\"> </p>\n<h4 id=\"3-修改打包配置-进入-config-index-js-修改如下\"><a href=\"#3-修改打包配置-进入-config-index-js-修改如下\" class=\"headerlink\" title=\"3. 修改打包配置   进入 config/index.js     修改如下\"></a>3. 修改打包配置   进入 config/index.js     修改如下</h4><p><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-001.jpg\" alt=\"\"></p>\n<h4 id=\"4-在当前目录下新建一个模板页-index-cshtml-如下\"><a href=\"#4-在当前目录下新建一个模板页-index-cshtml-如下\" class=\"headerlink\" title=\"4. 在当前目录下新建一个模板页 index.cshtml  如下\"></a>4. 在当前目录下新建一个模板页 index.cshtml  如下</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-002.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>  \n<h4 id=\"5-修改打包html文件的配置-进入-build-webpack-prod-conf-js\"><a href=\"#5-修改打包html文件的配置-进入-build-webpack-prod-conf-js\" class=\"headerlink\" title=\"5. 修改打包html文件的配置  进入 build/webpack.prod.conf.js\"></a>5. 修改打包html文件的配置  进入 build/webpack.prod.conf.js</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-003.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure> \n<h4 id=\"6-npm-run-dev-测试\"><a href=\"#6-npm-run-dev-测试\" class=\"headerlink\" title=\"6. npm run dev  测试\"></a>6. <code>npm run dev</code>  测试</h4><h4 id=\"7-npm-run-build-打包\"><a href=\"#7-npm-run-build-打包\" class=\"headerlink\" title=\"7. npm run build 打包\"></a>7. <code>npm run build</code> 打包</h4><h2 id=\"项目目录\"><a href=\"#项目目录\" class=\"headerlink\" title=\"项目目录\"></a>项目目录</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-006.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue工程化开发（一）\"><a href=\"#Vue工程化开发（一）\" class=\"headerlink\" title=\"Vue工程化开发（一）\"></a>Vue工程化开发（一）</h1><blockquote>\n<p>利用Vue-cli脚手架在现有的MVC项目中进行前端开发</p>\n</blockquote>\n<h4 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h4><ul>\n<li>Node</li>\n<li>npm</li>\n<li>Vue-cli</li>\n</ul>\n<h2 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h2><h4 id=\"1-首先在项目中搭建一个前台文件夹，用-vue-init-webpack-projectname-（例如-vue-init-webpack-frontend）\"><a href=\"#1-首先在项目中搭建一个前台文件夹，用-vue-init-webpack-projectname-（例如-vue-init-webpack-frontend）\" class=\"headerlink\" title=\"1. 首先在项目中搭建一个前台文件夹，用 vue init webpack projectname （例如: vue init webpack frontend）\"></a>1. 首先在项目中搭建一个前台文件夹，用 <code>vue init webpack projectname</code> （例如: <code>vue init webpack frontend</code>）</h4><p>frontend 为Vue-cli自动生成的项目文件<br>content 目录下存放打包后的资源文件<br>views目录下存放自动生成的cshtml文件  </p>\n<p><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-004.png\" alt=\"\"> </p>\n<h4 id=\"2-进入此文件夹（这里是-frontend）-配置-package-json-，安装所需插件\"><a href=\"#2-进入此文件夹（这里是-frontend）-配置-package-json-，安装所需插件\" class=\"headerlink\" title=\"2. 进入此文件夹（这里是 frontend）   配置 package.json ，安装所需插件\"></a>2. 进入此文件夹（这里是 frontend）   配置 package.json ，安装所需插件</h4><p><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-005.png\" alt=\"\"> </p>\n<h4 id=\"3-修改打包配置-进入-config-index-js-修改如下\"><a href=\"#3-修改打包配置-进入-config-index-js-修改如下\" class=\"headerlink\" title=\"3. 修改打包配置   进入 config/index.js     修改如下\"></a>3. 修改打包配置   进入 config/index.js     修改如下</h4><p><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-001.jpg\" alt=\"\"></p>\n<h4 id=\"4-在当前目录下新建一个模板页-index-cshtml-如下\"><a href=\"#4-在当前目录下新建一个模板页-index-cshtml-如下\" class=\"headerlink\" title=\"4. 在当前目录下新建一个模板页 index.cshtml  如下\"></a>4. 在当前目录下新建一个模板页 index.cshtml  如下</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-002.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>  \n<h4 id=\"5-修改打包html文件的配置-进入-build-webpack-prod-conf-js\"><a href=\"#5-修改打包html文件的配置-进入-build-webpack-prod-conf-js\" class=\"headerlink\" title=\"5. 修改打包html文件的配置  进入 build/webpack.prod.conf.js\"></a>5. 修改打包html文件的配置  进入 build/webpack.prod.conf.js</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-003.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure> \n<h4 id=\"6-npm-run-dev-测试\"><a href=\"#6-npm-run-dev-测试\" class=\"headerlink\" title=\"6. npm run dev  测试\"></a>6. <code>npm run dev</code>  测试</h4><h4 id=\"7-npm-run-build-打包\"><a href=\"#7-npm-run-build-打包\" class=\"headerlink\" title=\"7. npm run build 打包\"></a>7. <code>npm run build</code> 打包</h4><h2 id=\"项目目录\"><a href=\"#项目目录\" class=\"headerlink\" title=\"项目目录\"></a>项目目录</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/webpack-vue-cli-006.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n"},{"title":"You don't know cross-origin","date":"2018-11-19T12:19:05.000Z","_content":"\n![cross-origin](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cross-origin.png)\n\n## Why \n> 为什么会存在跨域问题\n\n- 同源策略  \n由于出于安全考虑，浏览器规定JavaScript不能操作其他域下的页面DOM，不能接受其他域下的xhr请求（不只是js，引用非同域下的字体文件，还有canvas引用非同域下的图片，也被同源策略所约束）\n只要协议、域名、端口有一者不同，就被视为非同域。\n\n## How\n> 如何解决  \n\n要解决跨域问题，就要绕过浏览器对js的限制，另辟蹊径\n\n\n1. JSONP  \n这是最简单，也是最流行的跨域解决方案，它利用script标签不受同源策略的影响，解决跨域，需要后台配合，返回特殊格式的数据\n\n前端\n```html\n<script>\n    function JSONP(link) {\n        let script=document.createElement(\"script\");\n        script.src=link;\n        document.body.appendChild(script);\n    }\n\n    function getUser(data) {\n        console.log(data);// todo\n    }\n    const API_URL_USER='http://cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=getUser'; // 这里以爱奇艺的接口为例（来源网络，侵删）\n    JSONP(API_URL_USER);\n</script>\n```\n\n后端\n```js\n// Express(Nodejs)\n// mock data\nconst USERS=[\n    {name:\"Tom\",age:23},\n    {name:\"Jack\",age:23}\n];\n\napp.get(\"/user\",function (req,res) {\n    let cbName=req.query[\"callback\"];\n    // 这里做一个容错处理\n    res.send(`\n        try{\n            ${cbName}(${JSON.stringify(USRES)});\n        }catch(ex) {\n            console.error(\"The data is invalid\");\n        }\n    `);\n});\n```\n\n2. CORS (cross-origin resource sharing)  \n跨域资源共享，是W3C的一个标准，它允许浏览器发送跨域服务器的请求，CORS需要浏览器和服务器同时支持\n\n后端\n\n简单请求和非简单请求详情，请阅读阮一峰老师的[博文](http://www.ruanyifeng.com/blog/2016/04/cors.html)，这里不再敖述\n```js\napp.use(function (req,res,next){\n    res.header('Access-Control-Allow-Origin', 'http://localhost:6666'); // 允许跨域的白名单，一般不建议使用 * 号\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE'); // 允许请求的方法，非简单请求，会进行预检\n    res.header('Access-Control-Allow-Headers', 'Content-Type'); // 允许请求携带的头信息，非简单请求，会进行预检\n    res.header('Access-Control-Allow-Credentials','true'); // 允许发送cookie，这里前端xhr也需要一起配置 `xhr.withCredentials=true`\n    next();\n});\n\n```\n3. 代理  \n只要是在与你同域下的服务器，新建一个代理（服务端不存在同源策略），将你的跨域请求全部代理转发\n\n后端\n```js\nconst proxy=require(\"http-proxy-middleware\"); // 这里使用这个中间件完成代理\napp.use('/api', proxy(\"http://b.com\")); // http://a.com/api -> http://b.com/api\n```\n\n4. window.name+iframe  \nMDN里解释道它是`获取/设置窗口的名称`，因为的它在不同页面甚至域名加载后值都不会改变，该属性也被用于作为 JSONP 的一个更安全的备选来提供跨域通信（cross-domain messaging）\n\n前端\n```html\n<!--http://a.com/page1.html-->\n<script>\n    function request(url,callback) {\n        let iframe=document.createElement(\"iframe\");\n        let isFirst=true;\n        iframe.style.display=\"none\";\n        iframe.addEventListener(\"load\",function () {\n            if (isFirst) { \n                isFirst=false; // 防止iframe循环加载\n                iframe.src=\"http://a.com/page2.html\";\n                callback && callback(iframe.contentWindow.name);\n                iframe.remove();               \n            }\n        });\n        iframe.src=url;\n    }\n\n    requeset(\"http://b.com/user\",function (data) {\n        console.log(data); // todo\n    });\n</script>\n```\n后端\n```js\n// Express(Nodejs)\n// mock data\nconst USERS=[\n    {name:\"Tom\",age:23},\n    {name:\"Jack\",age:23}\n];\n\napp.get(\"/user\",function (req,res) {\n    res.send(`\n        <script>\n            ;window.name=${JSON.stringify(USERS)};\n        </script>\n    `);\n});\n```\n\n\n5. document.domian\n这个使用情况有限，例如  \nhttp://a.c.com    \nhttp://b.c.com  \n主域相同时，分别设置他们页面的`document.domain=\"c.com\";`\n\n6. locaction.hash+iframe\n嵌套两层iframe，达到第一层与第三层同域，就可以互相通信了\n\n```html\n<!--http://a.com/page1.html-->\n<script>\n    let iframe=document.createElement(\"iframe\");\n    iframe.style.display=\"none\";\n    iframe.src=\"http://b.com/user.html\";\n\n    window.addEventListener(\"hashchange\",function () {\n        console.log(location.hash.slice(1)); // todo\n    });\n</script>\n```\n```html\n<!--http://b.com/user.html-->\n<script>\n    let iframe=document.createElement(\"iframe\");\n    iframe.style.display=\"none\";\n\n    function getUserData() {\n        fetch(\"http://b.com/user\")\n            .then(res=>{\n                let data=res.json();\n                iframe.src=`http://a.com/page2.html#${data}`;\n            });\n    }\n\n    getUserData();\n\n    window.addEventListener(\"hashchange\",function () {\n        getUserData();\n    });\n</script>\n```\n```html\n<script>\n    top.location.hash=window.location.hash;\n</script>\n```\n\n7. 图片ping  \n这个只能发出去请求，无法获取到服务器的响应，常常用于网站流量统计\n\n```js\nlet img=new Image();\nimg.addEventListener(\"load\",function () {\n    console.log(\"Send success\"); // todo\n});\nimg.src=\"http://site.c.com/a.gif?count=666\";\n```\n8. postMessage+iframe\n\n```html\n<!-- http://a.com -->\n<button id=\"sendBtn\">从B接口获取用户数据</button>\n<iframe src=\"http://b.com\" id=\"ifr\"></iframe>\n<script>\nwindow.addEventListener(\"message\",function({detail,origin}){\n    if (origin===\"http://b.com\") { // 最好判断下消息来源\n        if (detail.type===\"set-user\") {\n            console.log(detail.data); // todo\n        }\n    }\n});\n\nsendBtn.addEventListener(\"click\",function () {\n    ifr.contentWindow.postMessage({\n        type:\"get-user\",\n    },\"http://b.com\");\n});\n</script>\n```\n\n```html\n<!-- http://b.com -->\n<script>\nwindow.addEventListener(\"messagae\",function({detail,origin}){\n    if (origin===\"http://a.com\") { // 最好判断下消息来源\n        if (detail.type===\"get-user\") {\n            fetch(\"http://b.com/user\")\n            .then(res=>{\n                top.contentWindow.postMessage({\n                    type:\"set-user\",\n                    data:res.json(), // 假设接口返回的是json格式的数据\n                },\"http://a.com\");\n            })\n        }\n    }\n});\n\n\n</script>\n```\n\n9. postMessage+form+iframe  \n\n这个需要后台配合返回特殊格式的数据，TL,DR 可以看这个[demo](https://github.com/Yangfan2016/cross-domain/blob/master/9-iframe_form_postMessage/index.html)\n\n10. WebSocket  \n\nWebSocket是一种通信协议，该协议不实行同源政策，\n注意需要浏览器和服务器都支持的情况下\n\n```html\n <script src=\"//cdn.bootcss.com/socket.io/1.7.2/socket.io.min.js\"></script>\n <script>\n    var io = io.connect('http://b.com');\n    io.on('data', function (data) {\n        console.log(data); // 接受来自服务器的消息\n    });\n</script>\n```\n\n后端\n```js\n// Nodejs\nconst server = require('http').createServer();\nconst io = require('socket.io')(server);\n\nio.on('connection', function (client) {\n    client.emit('data', 'This message from \"http://b.com\"');\n});\n```\n\n## Summary\n- 目前个人在工作中遇到的解决方法就是这些，当然还有许多其他的方法，你看，其实跨域并不难吧 ^_^\n- js通过xhr发的跨域请求，虽然得不到响应，但是可以发送出去，其实如果是单向通信的话，也可以，比如文章阅读统计，网站流量统计\n\n## Reference\n[跨域资源共享 CORS 详解---阮一峰](http://www.ruanyifeng.com/blog/2016/04/cors.html)  \n[不要再问我跨域的问题了](https://segmentfault.com/a/1190000015597029?utm_source=tag-newest)   \n[FatDong1/cross-domain](https://github.com/Yangfan2016/cross-domain) ","source":"_posts/You-don't-know-cross-origin.md","raw":"---\ntitle: You don't know cross-origin\ndate: 2018-11-19 20:19:05\ntags:\n---\n\n![cross-origin](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cross-origin.png)\n\n## Why \n> 为什么会存在跨域问题\n\n- 同源策略  \n由于出于安全考虑，浏览器规定JavaScript不能操作其他域下的页面DOM，不能接受其他域下的xhr请求（不只是js，引用非同域下的字体文件，还有canvas引用非同域下的图片，也被同源策略所约束）\n只要协议、域名、端口有一者不同，就被视为非同域。\n\n## How\n> 如何解决  \n\n要解决跨域问题，就要绕过浏览器对js的限制，另辟蹊径\n\n\n1. JSONP  \n这是最简单，也是最流行的跨域解决方案，它利用script标签不受同源策略的影响，解决跨域，需要后台配合，返回特殊格式的数据\n\n前端\n```html\n<script>\n    function JSONP(link) {\n        let script=document.createElement(\"script\");\n        script.src=link;\n        document.body.appendChild(script);\n    }\n\n    function getUser(data) {\n        console.log(data);// todo\n    }\n    const API_URL_USER='http://cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=getUser'; // 这里以爱奇艺的接口为例（来源网络，侵删）\n    JSONP(API_URL_USER);\n</script>\n```\n\n后端\n```js\n// Express(Nodejs)\n// mock data\nconst USERS=[\n    {name:\"Tom\",age:23},\n    {name:\"Jack\",age:23}\n];\n\napp.get(\"/user\",function (req,res) {\n    let cbName=req.query[\"callback\"];\n    // 这里做一个容错处理\n    res.send(`\n        try{\n            ${cbName}(${JSON.stringify(USRES)});\n        }catch(ex) {\n            console.error(\"The data is invalid\");\n        }\n    `);\n});\n```\n\n2. CORS (cross-origin resource sharing)  \n跨域资源共享，是W3C的一个标准，它允许浏览器发送跨域服务器的请求，CORS需要浏览器和服务器同时支持\n\n后端\n\n简单请求和非简单请求详情，请阅读阮一峰老师的[博文](http://www.ruanyifeng.com/blog/2016/04/cors.html)，这里不再敖述\n```js\napp.use(function (req,res,next){\n    res.header('Access-Control-Allow-Origin', 'http://localhost:6666'); // 允许跨域的白名单，一般不建议使用 * 号\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE'); // 允许请求的方法，非简单请求，会进行预检\n    res.header('Access-Control-Allow-Headers', 'Content-Type'); // 允许请求携带的头信息，非简单请求，会进行预检\n    res.header('Access-Control-Allow-Credentials','true'); // 允许发送cookie，这里前端xhr也需要一起配置 `xhr.withCredentials=true`\n    next();\n});\n\n```\n3. 代理  \n只要是在与你同域下的服务器，新建一个代理（服务端不存在同源策略），将你的跨域请求全部代理转发\n\n后端\n```js\nconst proxy=require(\"http-proxy-middleware\"); // 这里使用这个中间件完成代理\napp.use('/api', proxy(\"http://b.com\")); // http://a.com/api -> http://b.com/api\n```\n\n4. window.name+iframe  \nMDN里解释道它是`获取/设置窗口的名称`，因为的它在不同页面甚至域名加载后值都不会改变，该属性也被用于作为 JSONP 的一个更安全的备选来提供跨域通信（cross-domain messaging）\n\n前端\n```html\n<!--http://a.com/page1.html-->\n<script>\n    function request(url,callback) {\n        let iframe=document.createElement(\"iframe\");\n        let isFirst=true;\n        iframe.style.display=\"none\";\n        iframe.addEventListener(\"load\",function () {\n            if (isFirst) { \n                isFirst=false; // 防止iframe循环加载\n                iframe.src=\"http://a.com/page2.html\";\n                callback && callback(iframe.contentWindow.name);\n                iframe.remove();               \n            }\n        });\n        iframe.src=url;\n    }\n\n    requeset(\"http://b.com/user\",function (data) {\n        console.log(data); // todo\n    });\n</script>\n```\n后端\n```js\n// Express(Nodejs)\n// mock data\nconst USERS=[\n    {name:\"Tom\",age:23},\n    {name:\"Jack\",age:23}\n];\n\napp.get(\"/user\",function (req,res) {\n    res.send(`\n        <script>\n            ;window.name=${JSON.stringify(USERS)};\n        </script>\n    `);\n});\n```\n\n\n5. document.domian\n这个使用情况有限，例如  \nhttp://a.c.com    \nhttp://b.c.com  \n主域相同时，分别设置他们页面的`document.domain=\"c.com\";`\n\n6. locaction.hash+iframe\n嵌套两层iframe，达到第一层与第三层同域，就可以互相通信了\n\n```html\n<!--http://a.com/page1.html-->\n<script>\n    let iframe=document.createElement(\"iframe\");\n    iframe.style.display=\"none\";\n    iframe.src=\"http://b.com/user.html\";\n\n    window.addEventListener(\"hashchange\",function () {\n        console.log(location.hash.slice(1)); // todo\n    });\n</script>\n```\n```html\n<!--http://b.com/user.html-->\n<script>\n    let iframe=document.createElement(\"iframe\");\n    iframe.style.display=\"none\";\n\n    function getUserData() {\n        fetch(\"http://b.com/user\")\n            .then(res=>{\n                let data=res.json();\n                iframe.src=`http://a.com/page2.html#${data}`;\n            });\n    }\n\n    getUserData();\n\n    window.addEventListener(\"hashchange\",function () {\n        getUserData();\n    });\n</script>\n```\n```html\n<script>\n    top.location.hash=window.location.hash;\n</script>\n```\n\n7. 图片ping  \n这个只能发出去请求，无法获取到服务器的响应，常常用于网站流量统计\n\n```js\nlet img=new Image();\nimg.addEventListener(\"load\",function () {\n    console.log(\"Send success\"); // todo\n});\nimg.src=\"http://site.c.com/a.gif?count=666\";\n```\n8. postMessage+iframe\n\n```html\n<!-- http://a.com -->\n<button id=\"sendBtn\">从B接口获取用户数据</button>\n<iframe src=\"http://b.com\" id=\"ifr\"></iframe>\n<script>\nwindow.addEventListener(\"message\",function({detail,origin}){\n    if (origin===\"http://b.com\") { // 最好判断下消息来源\n        if (detail.type===\"set-user\") {\n            console.log(detail.data); // todo\n        }\n    }\n});\n\nsendBtn.addEventListener(\"click\",function () {\n    ifr.contentWindow.postMessage({\n        type:\"get-user\",\n    },\"http://b.com\");\n});\n</script>\n```\n\n```html\n<!-- http://b.com -->\n<script>\nwindow.addEventListener(\"messagae\",function({detail,origin}){\n    if (origin===\"http://a.com\") { // 最好判断下消息来源\n        if (detail.type===\"get-user\") {\n            fetch(\"http://b.com/user\")\n            .then(res=>{\n                top.contentWindow.postMessage({\n                    type:\"set-user\",\n                    data:res.json(), // 假设接口返回的是json格式的数据\n                },\"http://a.com\");\n            })\n        }\n    }\n});\n\n\n</script>\n```\n\n9. postMessage+form+iframe  \n\n这个需要后台配合返回特殊格式的数据，TL,DR 可以看这个[demo](https://github.com/Yangfan2016/cross-domain/blob/master/9-iframe_form_postMessage/index.html)\n\n10. WebSocket  \n\nWebSocket是一种通信协议，该协议不实行同源政策，\n注意需要浏览器和服务器都支持的情况下\n\n```html\n <script src=\"//cdn.bootcss.com/socket.io/1.7.2/socket.io.min.js\"></script>\n <script>\n    var io = io.connect('http://b.com');\n    io.on('data', function (data) {\n        console.log(data); // 接受来自服务器的消息\n    });\n</script>\n```\n\n后端\n```js\n// Nodejs\nconst server = require('http').createServer();\nconst io = require('socket.io')(server);\n\nio.on('connection', function (client) {\n    client.emit('data', 'This message from \"http://b.com\"');\n});\n```\n\n## Summary\n- 目前个人在工作中遇到的解决方法就是这些，当然还有许多其他的方法，你看，其实跨域并不难吧 ^_^\n- js通过xhr发的跨域请求，虽然得不到响应，但是可以发送出去，其实如果是单向通信的话，也可以，比如文章阅读统计，网站流量统计\n\n## Reference\n[跨域资源共享 CORS 详解---阮一峰](http://www.ruanyifeng.com/blog/2016/04/cors.html)  \n[不要再问我跨域的问题了](https://segmentfault.com/a/1190000015597029?utm_source=tag-newest)   \n[FatDong1/cross-domain](https://github.com/Yangfan2016/cross-domain) ","slug":"You-don't-know-cross-origin","published":1,"updated":"2019-04-25T08:30:47.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauj50004aeyy1397axdb","content":"<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cross-origin.png\" alt=\"cross-origin\" title=\"\">\n                </div>\n                <div class=\"image-caption\">cross-origin</div>\n            </figure>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><blockquote>\n<p>为什么会存在跨域问题</p>\n</blockquote>\n<ul>\n<li>同源策略<br>由于出于安全考虑，浏览器规定JavaScript不能操作其他域下的页面DOM，不能接受其他域下的xhr请求（不只是js，引用非同域下的字体文件，还有canvas引用非同域下的图片，也被同源策略所约束）<br>只要协议、域名、端口有一者不同，就被视为非同域。</li>\n</ul>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><blockquote>\n<p>如何解决  </p>\n</blockquote>\n<p>要解决跨域问题，就要绕过浏览器对js的限制，另辟蹊径</p>\n<ol>\n<li>JSONP<br>这是最简单，也是最流行的跨域解决方案，它利用script标签不受同源策略的影响，解决跨域，需要后台配合，返回特殊格式的数据</li>\n</ol>\n<p>前端<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">JSONP</span>(<span class=\"params\">link</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> script=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">        script.src=link;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.body.appendChild(script);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUser</span>(<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(data);<span class=\"comment\">// todo</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> API_URL_USER=<span class=\"string\">'http://cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=getUser'</span>; <span class=\"comment\">// 这里以爱奇艺的接口为例（来源网络，侵删）</span></span></span><br><span class=\"line\"><span class=\"undefined\">    JSONP(API_URL_USER);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>后端<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Express(Nodejs)</span></span><br><span class=\"line\"><span class=\"comment\">// mock data</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> USERS=[</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Tom\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">23</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Jack\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">23</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/user\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cbName=req.query[<span class=\"string\">\"callback\"</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 这里做一个容错处理</span></span><br><span class=\"line\">    res.send(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        try&#123;</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"subst\">$&#123;cbName&#125;</span>(<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(USRES)&#125;</span>);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;catch(ex) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.error(\"The data is invalid\");</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>CORS (cross-origin resource sharing)<br>跨域资源共享，是W3C的一个标准，它允许浏览器发送跨域服务器的请求，CORS需要浏览器和服务器同时支持</li>\n</ol>\n<p>后端</p>\n<p>简单请求和非简单请求详情，请阅读阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">博文</a>，这里不再敖述<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    res.header(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://localhost:6666'</span>); <span class=\"comment\">// 允许跨域的白名单，一般不建议使用 * 号</span></span><br><span class=\"line\">    res.header(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET,PUT,POST,DELETE'</span>); <span class=\"comment\">// 允许请求的方法，非简单请求，会进行预检</span></span><br><span class=\"line\">    res.header(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'Content-Type'</span>); <span class=\"comment\">// 允许请求携带的头信息，非简单请求，会进行预检</span></span><br><span class=\"line\">    res.header(<span class=\"string\">'Access-Control-Allow-Credentials'</span>,<span class=\"string\">'true'</span>); <span class=\"comment\">// 允许发送cookie，这里前端xhr也需要一起配置 `xhr.withCredentials=true`</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>代理<br>只要是在与你同域下的服务器，新建一个代理（服务端不存在同源策略），将你的跨域请求全部代理转发</li>\n</ol>\n<p>后端<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy=<span class=\"built_in\">require</span>(<span class=\"string\">\"http-proxy-middleware\"</span>); <span class=\"comment\">// 这里使用这个中间件完成代理</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>, proxy(<span class=\"string\">\"http://b.com\"</span>)); <span class=\"comment\">// http://a.com/api -&gt; http://b.com/api</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"4\">\n<li>window.name+iframe<br>MDN里解释道它是<code>获取/设置窗口的名称</code>，因为的它在不同页面甚至域名加载后值都不会改变，该属性也被用于作为 JSONP 的一个更安全的备选来提供跨域通信（cross-domain messaging）</li>\n</ol>\n<p>前端<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--http://a.com/page1.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url,callback</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> iframe=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> isFirst=<span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        iframe.style.display=<span class=\"string\">\"none\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        iframe.addEventListener(<span class=\"string\">\"load\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span> (isFirst) &#123; </span></span><br><span class=\"line\"><span class=\"javascript\">                isFirst=<span class=\"literal\">false</span>; <span class=\"comment\">// 防止iframe循环加载</span></span></span><br><span class=\"line\"><span class=\"javascript\">                iframe.src=<span class=\"string\">\"http://a.com/page2.html\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">                callback &amp;&amp; callback(iframe.contentWindow.name);</span></span><br><span class=\"line\"><span class=\"undefined\">                iframe.remove();               </span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        iframe.src=url;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    requeset(<span class=\"string\">\"http://b.com/user\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(data); <span class=\"comment\">// todo</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>后端<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Express(Nodejs)</span></span><br><span class=\"line\"><span class=\"comment\">// mock data</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> USERS=[</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Tom\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">23</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Jack\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">23</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/user\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res</span>) </span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">            ;window.name=<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(USERS)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li><p>document.domian<br>这个使用情况有限，例如<br><a href=\"http://a.c.com\" target=\"_blank\" rel=\"noopener\">http://a.c.com</a><br><a href=\"http://b.c.com\" target=\"_blank\" rel=\"noopener\">http://b.c.com</a><br>主域相同时，分别设置他们页面的<code>document.domain=&quot;c.com&quot;;</code></p>\n</li>\n<li><p>locaction.hash+iframe<br>嵌套两层iframe，达到第一层与第三层同域，就可以互相通信了</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--http://a.com/page1.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> iframe=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    iframe.style.display=<span class=\"string\">\"none\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    iframe.src=<span class=\"string\">\"http://b.com/user.html\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"hashchange\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(location.hash.slice(<span class=\"number\">1</span>)); <span class=\"comment\">// todo</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--http://b.com/user.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> iframe=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    iframe.style.display=<span class=\"string\">\"none\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserData</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        fetch(<span class=\"string\">\"http://b.com/user\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">            .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">let</span> data=res.json();</span></span><br><span class=\"line\"><span class=\"javascript\">                iframe.src=<span class=\"string\">`http://a.com/page2.html#<span class=\"subst\">$&#123;data&#125;</span>`</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    getUserData();</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"hashchange\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        getUserData();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    top.location.hash=<span class=\"built_in\">window</span>.location.hash;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>图片ping<br>这个只能发出去请求，无法获取到服务器的响应，常常用于网站流量统计</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> img=<span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">img.addEventListener(<span class=\"string\">\"load\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Send success\"</span>); <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">img.src=<span class=\"string\">\"http://site.c.com/a.gif?count=666\"</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>postMessage+iframe</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- http://a.com --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sendBtn\"</span>&gt;</span>从B接口获取用户数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://b.com\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ifr\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"message\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;detail,origin&#125;</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (origin===<span class=\"string\">\"http://b.com\"</span>) &#123; <span class=\"comment\">// 最好判断下消息来源</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (detail.type===<span class=\"string\">\"set-user\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(detail.data); <span class=\"comment\">// todo</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">sendBtn.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    ifr.contentWindow.postMessage(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        type:<span class=\"string\">\"get-user\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,<span class=\"string\">\"http://b.com\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- http://b.com --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"messagae\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;detail,origin&#125;</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (origin===<span class=\"string\">\"http://a.com\"</span>) &#123; <span class=\"comment\">// 最好判断下消息来源</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (detail.type===<span class=\"string\">\"get-user\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            fetch(<span class=\"string\">\"http://b.com/user\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">            .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                top.contentWindow.postMessage(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    type:<span class=\"string\">\"set-user\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                    data:res.json(), <span class=\"comment\">// 假设接口返回的是json格式的数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">                &#125;,<span class=\"string\">\"http://a.com\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>postMessage+form+iframe  </li>\n</ol>\n<p>这个需要后台配合返回特殊格式的数据，TL,DR 可以看这个<a href=\"https://github.com/Yangfan2016/cross-domain/blob/master/9-iframe_form_postMessage/index.html\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<ol start=\"10\">\n<li>WebSocket  </li>\n</ol>\n<p>WebSocket是一种通信协议，该协议不实行同源政策，<br>注意需要浏览器和服务器都支持的情况下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.bootcss.com/socket.io/1.7.2/socket.io.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> io = io.connect(<span class=\"string\">'http://b.com'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    io.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(data); <span class=\"comment\">// 接受来自服务器的消息</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>后端<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Nodejs</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).createServer();</span><br><span class=\"line\"><span class=\"keyword\">const</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>)(server);</span><br><span class=\"line\"></span><br><span class=\"line\">io.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">client</span>) </span>&#123;</span><br><span class=\"line\">    client.emit(<span class=\"string\">'data'</span>, <span class=\"string\">'This message from \"http://b.com\"'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><ul>\n<li>目前个人在工作中遇到的解决方法就是这些，当然还有许多其他的方法，你看，其实跨域并不难吧 ^_^</li>\n<li>js通过xhr发的跨域请求，虽然得不到响应，但是可以发送出去，其实如果是单向通信的话，也可以，比如文章阅读统计，网站流量统计</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">跨域资源共享 CORS 详解—阮一峰</a><br><a href=\"https://segmentfault.com/a/1190000015597029?utm_source=tag-newest\" target=\"_blank\" rel=\"noopener\">不要再问我跨域的问题了</a><br><a href=\"https://github.com/Yangfan2016/cross-domain\" target=\"_blank\" rel=\"noopener\">FatDong1/cross-domain</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cross-origin.png\" alt=\"cross-origin\" title=\"\">\n                </div>\n                <div class=\"image-caption\">cross-origin</div>\n            </figure>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><blockquote>\n<p>为什么会存在跨域问题</p>\n</blockquote>\n<ul>\n<li>同源策略<br>由于出于安全考虑，浏览器规定JavaScript不能操作其他域下的页面DOM，不能接受其他域下的xhr请求（不只是js，引用非同域下的字体文件，还有canvas引用非同域下的图片，也被同源策略所约束）<br>只要协议、域名、端口有一者不同，就被视为非同域。</li>\n</ul>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><blockquote>\n<p>如何解决  </p>\n</blockquote>\n<p>要解决跨域问题，就要绕过浏览器对js的限制，另辟蹊径</p>\n<ol>\n<li>JSONP<br>这是最简单，也是最流行的跨域解决方案，它利用script标签不受同源策略的影响，解决跨域，需要后台配合，返回特殊格式的数据</li>\n</ol>\n<p>前端<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">JSONP</span>(<span class=\"params\">link</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> script=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">        script.src=link;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.body.appendChild(script);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUser</span>(<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(data);<span class=\"comment\">// todo</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> API_URL_USER=<span class=\"string\">'http://cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=getUser'</span>; <span class=\"comment\">// 这里以爱奇艺的接口为例（来源网络，侵删）</span></span></span><br><span class=\"line\"><span class=\"undefined\">    JSONP(API_URL_USER);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>后端<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Express(Nodejs)</span></span><br><span class=\"line\"><span class=\"comment\">// mock data</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> USERS=[</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Tom\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">23</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Jack\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">23</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/user\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cbName=req.query[<span class=\"string\">\"callback\"</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 这里做一个容错处理</span></span><br><span class=\"line\">    res.send(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        try&#123;</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"subst\">$&#123;cbName&#125;</span>(<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(USRES)&#125;</span>);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;catch(ex) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.error(\"The data is invalid\");</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>CORS (cross-origin resource sharing)<br>跨域资源共享，是W3C的一个标准，它允许浏览器发送跨域服务器的请求，CORS需要浏览器和服务器同时支持</li>\n</ol>\n<p>后端</p>\n<p>简单请求和非简单请求详情，请阅读阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">博文</a>，这里不再敖述<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    res.header(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://localhost:6666'</span>); <span class=\"comment\">// 允许跨域的白名单，一般不建议使用 * 号</span></span><br><span class=\"line\">    res.header(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET,PUT,POST,DELETE'</span>); <span class=\"comment\">// 允许请求的方法，非简单请求，会进行预检</span></span><br><span class=\"line\">    res.header(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'Content-Type'</span>); <span class=\"comment\">// 允许请求携带的头信息，非简单请求，会进行预检</span></span><br><span class=\"line\">    res.header(<span class=\"string\">'Access-Control-Allow-Credentials'</span>,<span class=\"string\">'true'</span>); <span class=\"comment\">// 允许发送cookie，这里前端xhr也需要一起配置 `xhr.withCredentials=true`</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>代理<br>只要是在与你同域下的服务器，新建一个代理（服务端不存在同源策略），将你的跨域请求全部代理转发</li>\n</ol>\n<p>后端<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy=<span class=\"built_in\">require</span>(<span class=\"string\">\"http-proxy-middleware\"</span>); <span class=\"comment\">// 这里使用这个中间件完成代理</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>, proxy(<span class=\"string\">\"http://b.com\"</span>)); <span class=\"comment\">// http://a.com/api -&gt; http://b.com/api</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"4\">\n<li>window.name+iframe<br>MDN里解释道它是<code>获取/设置窗口的名称</code>，因为的它在不同页面甚至域名加载后值都不会改变，该属性也被用于作为 JSONP 的一个更安全的备选来提供跨域通信（cross-domain messaging）</li>\n</ol>\n<p>前端<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--http://a.com/page1.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url,callback</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> iframe=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> isFirst=<span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        iframe.style.display=<span class=\"string\">\"none\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        iframe.addEventListener(<span class=\"string\">\"load\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span> (isFirst) &#123; </span></span><br><span class=\"line\"><span class=\"javascript\">                isFirst=<span class=\"literal\">false</span>; <span class=\"comment\">// 防止iframe循环加载</span></span></span><br><span class=\"line\"><span class=\"javascript\">                iframe.src=<span class=\"string\">\"http://a.com/page2.html\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">                callback &amp;&amp; callback(iframe.contentWindow.name);</span></span><br><span class=\"line\"><span class=\"undefined\">                iframe.remove();               </span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        iframe.src=url;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    requeset(<span class=\"string\">\"http://b.com/user\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(data); <span class=\"comment\">// todo</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>后端<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Express(Nodejs)</span></span><br><span class=\"line\"><span class=\"comment\">// mock data</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> USERS=[</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Tom\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">23</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Jack\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">23</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/user\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res</span>) </span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">            ;window.name=<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(USERS)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li><p>document.domian<br>这个使用情况有限，例如<br><a href=\"http://a.c.com\" target=\"_blank\" rel=\"noopener\">http://a.c.com</a><br><a href=\"http://b.c.com\" target=\"_blank\" rel=\"noopener\">http://b.c.com</a><br>主域相同时，分别设置他们页面的<code>document.domain=&quot;c.com&quot;;</code></p>\n</li>\n<li><p>locaction.hash+iframe<br>嵌套两层iframe，达到第一层与第三层同域，就可以互相通信了</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--http://a.com/page1.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> iframe=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    iframe.style.display=<span class=\"string\">\"none\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    iframe.src=<span class=\"string\">\"http://b.com/user.html\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"hashchange\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(location.hash.slice(<span class=\"number\">1</span>)); <span class=\"comment\">// todo</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--http://b.com/user.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> iframe=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    iframe.style.display=<span class=\"string\">\"none\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserData</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        fetch(<span class=\"string\">\"http://b.com/user\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">            .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">let</span> data=res.json();</span></span><br><span class=\"line\"><span class=\"javascript\">                iframe.src=<span class=\"string\">`http://a.com/page2.html#<span class=\"subst\">$&#123;data&#125;</span>`</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    getUserData();</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"hashchange\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        getUserData();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    top.location.hash=<span class=\"built_in\">window</span>.location.hash;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>图片ping<br>这个只能发出去请求，无法获取到服务器的响应，常常用于网站流量统计</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> img=<span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">img.addEventListener(<span class=\"string\">\"load\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Send success\"</span>); <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">img.src=<span class=\"string\">\"http://site.c.com/a.gif?count=666\"</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>postMessage+iframe</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- http://a.com --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sendBtn\"</span>&gt;</span>从B接口获取用户数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://b.com\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ifr\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"message\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;detail,origin&#125;</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (origin===<span class=\"string\">\"http://b.com\"</span>) &#123; <span class=\"comment\">// 最好判断下消息来源</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (detail.type===<span class=\"string\">\"set-user\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(detail.data); <span class=\"comment\">// todo</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">sendBtn.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    ifr.contentWindow.postMessage(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        type:<span class=\"string\">\"get-user\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,<span class=\"string\">\"http://b.com\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- http://b.com --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"messagae\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;detail,origin&#125;</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (origin===<span class=\"string\">\"http://a.com\"</span>) &#123; <span class=\"comment\">// 最好判断下消息来源</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (detail.type===<span class=\"string\">\"get-user\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            fetch(<span class=\"string\">\"http://b.com/user\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">            .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                top.contentWindow.postMessage(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    type:<span class=\"string\">\"set-user\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                    data:res.json(), <span class=\"comment\">// 假设接口返回的是json格式的数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">                &#125;,<span class=\"string\">\"http://a.com\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>postMessage+form+iframe  </li>\n</ol>\n<p>这个需要后台配合返回特殊格式的数据，TL,DR 可以看这个<a href=\"https://github.com/Yangfan2016/cross-domain/blob/master/9-iframe_form_postMessage/index.html\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<ol start=\"10\">\n<li>WebSocket  </li>\n</ol>\n<p>WebSocket是一种通信协议，该协议不实行同源政策，<br>注意需要浏览器和服务器都支持的情况下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.bootcss.com/socket.io/1.7.2/socket.io.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> io = io.connect(<span class=\"string\">'http://b.com'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    io.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(data); <span class=\"comment\">// 接受来自服务器的消息</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>后端<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Nodejs</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).createServer();</span><br><span class=\"line\"><span class=\"keyword\">const</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>)(server);</span><br><span class=\"line\"></span><br><span class=\"line\">io.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">client</span>) </span>&#123;</span><br><span class=\"line\">    client.emit(<span class=\"string\">'data'</span>, <span class=\"string\">'This message from \"http://b.com\"'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><ul>\n<li>目前个人在工作中遇到的解决方法就是这些，当然还有许多其他的方法，你看，其实跨域并不难吧 ^_^</li>\n<li>js通过xhr发的跨域请求，虽然得不到响应，但是可以发送出去，其实如果是单向通信的话，也可以，比如文章阅读统计，网站流量统计</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">跨域资源共享 CORS 详解—阮一峰</a><br><a href=\"https://segmentfault.com/a/1190000015597029?utm_source=tag-newest\" target=\"_blank\" rel=\"noopener\">不要再问我跨域的问题了</a><br><a href=\"https://github.com/Yangfan2016/cross-domain\" target=\"_blank\" rel=\"noopener\">FatDong1/cross-domain</a> </p>\n"},{"title":"shell常用命令","date":"2017-07-16T11:59:04.000Z","_content":"\n# shell常用命令\n\n#### 1 ls命令：列出文件\n\n `ls -la` 列出当前目录下的所有文件和文件夹\n\n `ls a*` 列出当前目录下所有以a字母开头的文件\n\n `ls -l *.txt` 列出当前目录下所有后缀名为txt的文件\n\n#### 2 cp命令：复制 \n\n`cp a.txt b.txt` 把文件a的内容复制到b文件\n\n`cp a.txt ./test`  把文件a复制到text目录下\n\n`cp -a test test2` 递归的把目录test下所有文件（包括隐藏的文件）复制到新的目录 test2\n\n#### 3  cat命令：查看 组合文件\n\n`cat a.txt` 查看文件的内容\n\n`cat a.txt >> b.txt` 把a文件的内容组合到b文件内容的末尾\n\n`cat -n a.txt` 查看文件并给文件标上行号\n\n#### 4  touch命令：建立文件\n\n`touch a.txt` 建立一个名为a的txt类型文件\n\n#### 5  rm命令：删除文件\n\n`rm -rf a.txt` 强制删除文件a.txt\n\n`rm -i a.txt` 删除文件前会有提示是否确定删除该文件\n\n#### 6  mkdir命令：创建目录\n\n`mkdir test` 创建一个名为test的目录\n\n#### 7  rmdir命令：删除目录\n\n`rmdir test` 删除一个目录\n\n#### 8  echo、cat命令：添加内容\n\n`echo “hello world!” >> a.txt` 添加内容到文件a里面\n\n`cat <<EOF>> a.txt ` 可以添加多行语句到文件本身内容的末尾\n\n`cat <<EOF> a.txt` 添加内容到文件并覆盖到原始的内容\n\n#### 9  mv命令：移动 重命名文件\n\n`mv a.txt b.txt` 文件a重新命名为b\n\n`mv a.txt ./test` 把文件移动到一个目录下\n\n#### 10  cd命令：更换目录\n\n`cd ~ `  切换到用户目录\n\n`cd .. ` 返回到上一层目录\n\n`cd ../.. ` 返回到上二层目录\n\n#### 11  grep命令：搜索文件\n\n`ls -la | grep a.txt ` 搜索a.txt文件\n\n#### 12  find命令：查找文件和目录\n\n`find filename` 查找当前目录下是否有该文件/目录\n\n#### 13  rz sz命令：上传和下载文件\n\n#### 14  head命令：显示文件的前10行内容\n\n#### 15  tail命令：显示文件最后10行内容\n\n\n","source":"_posts/shell常用命令.md","raw":"---\ntitle: shell常用命令\ndate: 2017-07-16 19:59:04\ntags:\n---\n\n# shell常用命令\n\n#### 1 ls命令：列出文件\n\n `ls -la` 列出当前目录下的所有文件和文件夹\n\n `ls a*` 列出当前目录下所有以a字母开头的文件\n\n `ls -l *.txt` 列出当前目录下所有后缀名为txt的文件\n\n#### 2 cp命令：复制 \n\n`cp a.txt b.txt` 把文件a的内容复制到b文件\n\n`cp a.txt ./test`  把文件a复制到text目录下\n\n`cp -a test test2` 递归的把目录test下所有文件（包括隐藏的文件）复制到新的目录 test2\n\n#### 3  cat命令：查看 组合文件\n\n`cat a.txt` 查看文件的内容\n\n`cat a.txt >> b.txt` 把a文件的内容组合到b文件内容的末尾\n\n`cat -n a.txt` 查看文件并给文件标上行号\n\n#### 4  touch命令：建立文件\n\n`touch a.txt` 建立一个名为a的txt类型文件\n\n#### 5  rm命令：删除文件\n\n`rm -rf a.txt` 强制删除文件a.txt\n\n`rm -i a.txt` 删除文件前会有提示是否确定删除该文件\n\n#### 6  mkdir命令：创建目录\n\n`mkdir test` 创建一个名为test的目录\n\n#### 7  rmdir命令：删除目录\n\n`rmdir test` 删除一个目录\n\n#### 8  echo、cat命令：添加内容\n\n`echo “hello world!” >> a.txt` 添加内容到文件a里面\n\n`cat <<EOF>> a.txt ` 可以添加多行语句到文件本身内容的末尾\n\n`cat <<EOF> a.txt` 添加内容到文件并覆盖到原始的内容\n\n#### 9  mv命令：移动 重命名文件\n\n`mv a.txt b.txt` 文件a重新命名为b\n\n`mv a.txt ./test` 把文件移动到一个目录下\n\n#### 10  cd命令：更换目录\n\n`cd ~ `  切换到用户目录\n\n`cd .. ` 返回到上一层目录\n\n`cd ../.. ` 返回到上二层目录\n\n#### 11  grep命令：搜索文件\n\n`ls -la | grep a.txt ` 搜索a.txt文件\n\n#### 12  find命令：查找文件和目录\n\n`find filename` 查找当前目录下是否有该文件/目录\n\n#### 13  rz sz命令：上传和下载文件\n\n#### 14  head命令：显示文件的前10行内容\n\n#### 15  tail命令：显示文件最后10行内容\n\n\n","slug":"shell常用命令","published":1,"updated":"2019-04-25T08:59:38.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauj70005aeyytl5enfom","content":"<h1 id=\"shell常用命令\"><a href=\"#shell常用命令\" class=\"headerlink\" title=\"shell常用命令\"></a>shell常用命令</h1><h4 id=\"1-ls命令：列出文件\"><a href=\"#1-ls命令：列出文件\" class=\"headerlink\" title=\"1 ls命令：列出文件\"></a>1 ls命令：列出文件</h4><p> <code>ls -la</code> 列出当前目录下的所有文件和文件夹</p>\n<p> <code>ls a*</code> 列出当前目录下所有以a字母开头的文件</p>\n<p> <code>ls -l *.txt</code> 列出当前目录下所有后缀名为txt的文件</p>\n<h4 id=\"2-cp命令：复制\"><a href=\"#2-cp命令：复制\" class=\"headerlink\" title=\"2 cp命令：复制\"></a>2 cp命令：复制</h4><p><code>cp a.txt b.txt</code> 把文件a的内容复制到b文件</p>\n<p><code>cp a.txt ./test</code>  把文件a复制到text目录下</p>\n<p><code>cp -a test test2</code> 递归的把目录test下所有文件（包括隐藏的文件）复制到新的目录 test2</p>\n<h4 id=\"3-cat命令：查看-组合文件\"><a href=\"#3-cat命令：查看-组合文件\" class=\"headerlink\" title=\"3  cat命令：查看 组合文件\"></a>3  cat命令：查看 组合文件</h4><p><code>cat a.txt</code> 查看文件的内容</p>\n<p><code>cat a.txt &gt;&gt; b.txt</code> 把a文件的内容组合到b文件内容的末尾</p>\n<p><code>cat -n a.txt</code> 查看文件并给文件标上行号</p>\n<h4 id=\"4-touch命令：建立文件\"><a href=\"#4-touch命令：建立文件\" class=\"headerlink\" title=\"4  touch命令：建立文件\"></a>4  touch命令：建立文件</h4><p><code>touch a.txt</code> 建立一个名为a的txt类型文件</p>\n<h4 id=\"5-rm命令：删除文件\"><a href=\"#5-rm命令：删除文件\" class=\"headerlink\" title=\"5  rm命令：删除文件\"></a>5  rm命令：删除文件</h4><p><code>rm -rf a.txt</code> 强制删除文件a.txt</p>\n<p><code>rm -i a.txt</code> 删除文件前会有提示是否确定删除该文件</p>\n<h4 id=\"6-mkdir命令：创建目录\"><a href=\"#6-mkdir命令：创建目录\" class=\"headerlink\" title=\"6  mkdir命令：创建目录\"></a>6  mkdir命令：创建目录</h4><p><code>mkdir test</code> 创建一个名为test的目录</p>\n<h4 id=\"7-rmdir命令：删除目录\"><a href=\"#7-rmdir命令：删除目录\" class=\"headerlink\" title=\"7  rmdir命令：删除目录\"></a>7  rmdir命令：删除目录</h4><p><code>rmdir test</code> 删除一个目录</p>\n<h4 id=\"8-echo、cat命令：添加内容\"><a href=\"#8-echo、cat命令：添加内容\" class=\"headerlink\" title=\"8  echo、cat命令：添加内容\"></a>8  echo、cat命令：添加内容</h4><p><code>echo “hello world!” &gt;&gt; a.txt</code> 添加内容到文件a里面</p>\n<p><code>cat &lt;&lt;EOF&gt;&gt; a.txt</code> 可以添加多行语句到文件本身内容的末尾</p>\n<p><code>cat &lt;&lt;EOF&gt; a.txt</code> 添加内容到文件并覆盖到原始的内容</p>\n<h4 id=\"9-mv命令：移动-重命名文件\"><a href=\"#9-mv命令：移动-重命名文件\" class=\"headerlink\" title=\"9  mv命令：移动 重命名文件\"></a>9  mv命令：移动 重命名文件</h4><p><code>mv a.txt b.txt</code> 文件a重新命名为b</p>\n<p><code>mv a.txt ./test</code> 把文件移动到一个目录下</p>\n<h4 id=\"10-cd命令：更换目录\"><a href=\"#10-cd命令：更换目录\" class=\"headerlink\" title=\"10  cd命令：更换目录\"></a>10  cd命令：更换目录</h4><p><code>cd ~</code>  切换到用户目录</p>\n<p><code>cd ..</code> 返回到上一层目录</p>\n<p><code>cd ../..</code> 返回到上二层目录</p>\n<h4 id=\"11-grep命令：搜索文件\"><a href=\"#11-grep命令：搜索文件\" class=\"headerlink\" title=\"11  grep命令：搜索文件\"></a>11  grep命令：搜索文件</h4><p><code>ls -la | grep a.txt</code> 搜索a.txt文件</p>\n<h4 id=\"12-find命令：查找文件和目录\"><a href=\"#12-find命令：查找文件和目录\" class=\"headerlink\" title=\"12  find命令：查找文件和目录\"></a>12  find命令：查找文件和目录</h4><p><code>find filename</code> 查找当前目录下是否有该文件/目录</p>\n<h4 id=\"13-rz-sz命令：上传和下载文件\"><a href=\"#13-rz-sz命令：上传和下载文件\" class=\"headerlink\" title=\"13  rz sz命令：上传和下载文件\"></a>13  rz sz命令：上传和下载文件</h4><h4 id=\"14-head命令：显示文件的前10行内容\"><a href=\"#14-head命令：显示文件的前10行内容\" class=\"headerlink\" title=\"14  head命令：显示文件的前10行内容\"></a>14  head命令：显示文件的前10行内容</h4><h4 id=\"15-tail命令：显示文件最后10行内容\"><a href=\"#15-tail命令：显示文件最后10行内容\" class=\"headerlink\" title=\"15  tail命令：显示文件最后10行内容\"></a>15  tail命令：显示文件最后10行内容</h4>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"shell常用命令\"><a href=\"#shell常用命令\" class=\"headerlink\" title=\"shell常用命令\"></a>shell常用命令</h1><h4 id=\"1-ls命令：列出文件\"><a href=\"#1-ls命令：列出文件\" class=\"headerlink\" title=\"1 ls命令：列出文件\"></a>1 ls命令：列出文件</h4><p> <code>ls -la</code> 列出当前目录下的所有文件和文件夹</p>\n<p> <code>ls a*</code> 列出当前目录下所有以a字母开头的文件</p>\n<p> <code>ls -l *.txt</code> 列出当前目录下所有后缀名为txt的文件</p>\n<h4 id=\"2-cp命令：复制\"><a href=\"#2-cp命令：复制\" class=\"headerlink\" title=\"2 cp命令：复制\"></a>2 cp命令：复制</h4><p><code>cp a.txt b.txt</code> 把文件a的内容复制到b文件</p>\n<p><code>cp a.txt ./test</code>  把文件a复制到text目录下</p>\n<p><code>cp -a test test2</code> 递归的把目录test下所有文件（包括隐藏的文件）复制到新的目录 test2</p>\n<h4 id=\"3-cat命令：查看-组合文件\"><a href=\"#3-cat命令：查看-组合文件\" class=\"headerlink\" title=\"3  cat命令：查看 组合文件\"></a>3  cat命令：查看 组合文件</h4><p><code>cat a.txt</code> 查看文件的内容</p>\n<p><code>cat a.txt &gt;&gt; b.txt</code> 把a文件的内容组合到b文件内容的末尾</p>\n<p><code>cat -n a.txt</code> 查看文件并给文件标上行号</p>\n<h4 id=\"4-touch命令：建立文件\"><a href=\"#4-touch命令：建立文件\" class=\"headerlink\" title=\"4  touch命令：建立文件\"></a>4  touch命令：建立文件</h4><p><code>touch a.txt</code> 建立一个名为a的txt类型文件</p>\n<h4 id=\"5-rm命令：删除文件\"><a href=\"#5-rm命令：删除文件\" class=\"headerlink\" title=\"5  rm命令：删除文件\"></a>5  rm命令：删除文件</h4><p><code>rm -rf a.txt</code> 强制删除文件a.txt</p>\n<p><code>rm -i a.txt</code> 删除文件前会有提示是否确定删除该文件</p>\n<h4 id=\"6-mkdir命令：创建目录\"><a href=\"#6-mkdir命令：创建目录\" class=\"headerlink\" title=\"6  mkdir命令：创建目录\"></a>6  mkdir命令：创建目录</h4><p><code>mkdir test</code> 创建一个名为test的目录</p>\n<h4 id=\"7-rmdir命令：删除目录\"><a href=\"#7-rmdir命令：删除目录\" class=\"headerlink\" title=\"7  rmdir命令：删除目录\"></a>7  rmdir命令：删除目录</h4><p><code>rmdir test</code> 删除一个目录</p>\n<h4 id=\"8-echo、cat命令：添加内容\"><a href=\"#8-echo、cat命令：添加内容\" class=\"headerlink\" title=\"8  echo、cat命令：添加内容\"></a>8  echo、cat命令：添加内容</h4><p><code>echo “hello world!” &gt;&gt; a.txt</code> 添加内容到文件a里面</p>\n<p><code>cat &lt;&lt;EOF&gt;&gt; a.txt</code> 可以添加多行语句到文件本身内容的末尾</p>\n<p><code>cat &lt;&lt;EOF&gt; a.txt</code> 添加内容到文件并覆盖到原始的内容</p>\n<h4 id=\"9-mv命令：移动-重命名文件\"><a href=\"#9-mv命令：移动-重命名文件\" class=\"headerlink\" title=\"9  mv命令：移动 重命名文件\"></a>9  mv命令：移动 重命名文件</h4><p><code>mv a.txt b.txt</code> 文件a重新命名为b</p>\n<p><code>mv a.txt ./test</code> 把文件移动到一个目录下</p>\n<h4 id=\"10-cd命令：更换目录\"><a href=\"#10-cd命令：更换目录\" class=\"headerlink\" title=\"10  cd命令：更换目录\"></a>10  cd命令：更换目录</h4><p><code>cd ~</code>  切换到用户目录</p>\n<p><code>cd ..</code> 返回到上一层目录</p>\n<p><code>cd ../..</code> 返回到上二层目录</p>\n<h4 id=\"11-grep命令：搜索文件\"><a href=\"#11-grep命令：搜索文件\" class=\"headerlink\" title=\"11  grep命令：搜索文件\"></a>11  grep命令：搜索文件</h4><p><code>ls -la | grep a.txt</code> 搜索a.txt文件</p>\n<h4 id=\"12-find命令：查找文件和目录\"><a href=\"#12-find命令：查找文件和目录\" class=\"headerlink\" title=\"12  find命令：查找文件和目录\"></a>12  find命令：查找文件和目录</h4><p><code>find filename</code> 查找当前目录下是否有该文件/目录</p>\n<h4 id=\"13-rz-sz命令：上传和下载文件\"><a href=\"#13-rz-sz命令：上传和下载文件\" class=\"headerlink\" title=\"13  rz sz命令：上传和下载文件\"></a>13  rz sz命令：上传和下载文件</h4><h4 id=\"14-head命令：显示文件的前10行内容\"><a href=\"#14-head命令：显示文件的前10行内容\" class=\"headerlink\" title=\"14  head命令：显示文件的前10行内容\"></a>14  head命令：显示文件的前10行内容</h4><h4 id=\"15-tail命令：显示文件最后10行内容\"><a href=\"#15-tail命令：显示文件最后10行内容\" class=\"headerlink\" title=\"15  tail命令：显示文件最后10行内容\"></a>15  tail命令：显示文件最后10行内容</h4>"},{"title":"一次 bug 的寻找之旅","date":"2019-04-17T06:17:36.000Z","_content":"\n## 一次 bug 的寻找之旅\n\n### 前言\n\n在最近的一个项目中，用到了 ant-design 的 轮播图组件 `Carousel`，发现无法按照预期给每个 slide 加样式（内联样式），后来发现是 ant-design 的轮播图组件引用的三方库 `react-slick`，通过源码查找，终于发现是代码把内联样式重写了\n\n### 情景再现\n\n按照 ant-design 的官方示例，把demo拷贝过来\n\n```jsx\nimport { Carousel } from 'antd';\n\nfunction onChange(a, b, c) {\n  console.log(a, b, c);\n}\n\nReactDOM.render(\n  <Carousel afterChange={onChange}>\n    <div><h3>1</h3></div>\n    <div><h3>2</h3></div>\n    <div><h3>3</h3></div>\n    <div><h3>4</h3></div>\n  </Carousel>,\n  mountNode\n);\n```\n\n一切正常。然后按业务改动代码，加入背景图\n\n\n```jsx\nimport urlBg001  from \"./images/urlBg001.png\";\nimport urlBg002 from \"./images/urlBg002.png\";\nimport urlBg003 from \"./images/urlBg003.png\";\n\nReactDOM.render(\n  <Carousel afterChange={onChange}>\n    <div style={{ backgroundImage: `url(${urlBg001})` }}><h3>1</h3></div>\n    <div style={{ backgroundImage: `url(${urlBg002})` }}><h3>2</h3></div>\n    <div style={{ backgroundImage: `url(${urlBg003})` }}><h3>3</h3></div>\n  </Carousel>,\n  mountNode\n);\n```\n\n然而，没有任何效果（不显示背景图）\n\n### 思考问题所在\n\n为何会这样呢\n\n首先，我以为是图片路径的问题，做了个验证，发现图片正常显示\n\n```jsx\n\nReactDOM.render(\n  <Carousel afterChange={onChange}>\n    <div><img src={urlBg001} /></div>\n  </Carousel>,\n  mountNode\n);\n\n```\n\n然后，我就怀疑是不是 `Carousel` 这个组件对插槽做了限制，进行了进一步的验证\n\n```jsx\n\nReactDOM.render(\n  <Carousel afterChange={onChange}>\n    <div id=\"test-slide\" style={\n        { \n            backgroundImage: `url(${urlBg001})`,\n            color:\"#f02\",\n            width:\"50px\",\n        }}>1</div>\n  </Carousel>,\n  mountNode\n);\n\n```\n\n结果，没有任何效果，打开控制台，找到 id 是 `test-slide` 的那个元素，发现渲染的结果是下面这样：\n\n```html\n<div id=\"test-slide\" tabindex=\"-1\" style=\"width: 100%; display: inline-block;\">1</div>\n```\n\n`style` 属性被重写了，我自己加的 `style` 不见了，更加确信了是 `Carousel` 组件内部搞的鬼\n\n打开 `github` 扒 ant-design 源码，没有发现对 `style` 属性做任何更改，然后在头部找到该组件其实是引入一个 `react-slick`，然后包装了下\n\n```tsx\n// https://github.com/ant-design/ant-design/blob/master/components/carousel/index.tsx#L23\n\nconst SlickCarousel = require(\"react-slick\").default;\n\nexport default class Carousel extends React.Component<CarouselProps, {}> {\n  // 部分代码省略 ...\n  renderCarousel = ({ getPrefixCls }: ConfigConsumerProps) => {\n    // 部分代码省略 ...\n    return (\n      <div className={className}>\n        <SlickCarousel ref={this.saveSlick} {...props} />\n      </div>\n    );\n  };\n\n  render() {\n    return <ConfigConsumer>{this.renderCarousel}</ConfigConsumer>;\n  }\n}\n```\n\n真相慢慢的付出了水面，再次扒 `react-slick` 的源码，终于功夫不负有心人，在这个文件里发现了问题的源头\n\n```jsx\n// https://github.com/akiran/react-slick/blob/master/src/slider.js#L184\n\nReact.cloneElement(children[k], {\n  key: 100 * i + 10 * j + k,\n  tabIndex: -1,\n  style: {\n    width: `${100 / settings.slidesPerRow}%`,\n    display: \"inline-block\"\n  }\n})\n\n```\n直接将子元素`children` 的 `style` 属性覆盖了\n\n最后在 `react-slick` 找到了相关 [issue](https://github.com/akiran/react-slick/issues/1244)，然额这个 issue 仍然是 open 状态\n\n在 PR 中找到 [pull#1372](https://github.com/akiran/react-slick/pull/1372)，有人尝试修复过，但是 PR 又关了，不知道什么原因\n\n### 解决方案\n\n由于不知道源码作者为何要这么设置，我只能先找其他方法解决\n\n- 方法一\n多嵌套一层，只要不是在第一层元素上操作就行\n\n```jsx\nReactDOM.render(\n  <Carousel>\n    <div>\n      <div style={{ backgroundImage: `url(${logo})` }}>1</div>\n    </div>\n  </Carousel>,\n  mountNode\n);\n```\n\n- 方法二\n\n用其他方式达成目的\n\n```jsx\nReactDOM.render(\n  <Carousel>\n    <img src={logo} alt=\"001\"/>\n  </Carousel>,\n  mountNode\n);\n```\n\n### 总结\n\n- 找这个 bug 还是挺费时间的，不过，通过这次 bug 之旅，学到一定要用科学的方法，精准定位问题来源，多做空白试验参照，进行对比，这样才能更快的解决问题\n- 一定要多看源码，可以学到很多技巧\n\n### 备注\n\n可以点击下面的链接查看 “情景重现” 和组件源码\n\n- “情景重现”  \ndemo https://codesandbox.io/s/92n1x0w1my  \n- 源码  \nant-design https://github.com/ant-design/ant-design/blob/master/components/carousel/index.tsx#L23    \nreact-slick https://github.com/akiran/react-slick/blob/master/src/slider.js#L185  \n\n\n","source":"_posts/一次-bug-的寻找之旅.md","raw":"---\ntitle: 一次 bug 的寻找之旅\ndate: 2019-04-17 14:17:36\ntags:\n---\n\n## 一次 bug 的寻找之旅\n\n### 前言\n\n在最近的一个项目中，用到了 ant-design 的 轮播图组件 `Carousel`，发现无法按照预期给每个 slide 加样式（内联样式），后来发现是 ant-design 的轮播图组件引用的三方库 `react-slick`，通过源码查找，终于发现是代码把内联样式重写了\n\n### 情景再现\n\n按照 ant-design 的官方示例，把demo拷贝过来\n\n```jsx\nimport { Carousel } from 'antd';\n\nfunction onChange(a, b, c) {\n  console.log(a, b, c);\n}\n\nReactDOM.render(\n  <Carousel afterChange={onChange}>\n    <div><h3>1</h3></div>\n    <div><h3>2</h3></div>\n    <div><h3>3</h3></div>\n    <div><h3>4</h3></div>\n  </Carousel>,\n  mountNode\n);\n```\n\n一切正常。然后按业务改动代码，加入背景图\n\n\n```jsx\nimport urlBg001  from \"./images/urlBg001.png\";\nimport urlBg002 from \"./images/urlBg002.png\";\nimport urlBg003 from \"./images/urlBg003.png\";\n\nReactDOM.render(\n  <Carousel afterChange={onChange}>\n    <div style={{ backgroundImage: `url(${urlBg001})` }}><h3>1</h3></div>\n    <div style={{ backgroundImage: `url(${urlBg002})` }}><h3>2</h3></div>\n    <div style={{ backgroundImage: `url(${urlBg003})` }}><h3>3</h3></div>\n  </Carousel>,\n  mountNode\n);\n```\n\n然而，没有任何效果（不显示背景图）\n\n### 思考问题所在\n\n为何会这样呢\n\n首先，我以为是图片路径的问题，做了个验证，发现图片正常显示\n\n```jsx\n\nReactDOM.render(\n  <Carousel afterChange={onChange}>\n    <div><img src={urlBg001} /></div>\n  </Carousel>,\n  mountNode\n);\n\n```\n\n然后，我就怀疑是不是 `Carousel` 这个组件对插槽做了限制，进行了进一步的验证\n\n```jsx\n\nReactDOM.render(\n  <Carousel afterChange={onChange}>\n    <div id=\"test-slide\" style={\n        { \n            backgroundImage: `url(${urlBg001})`,\n            color:\"#f02\",\n            width:\"50px\",\n        }}>1</div>\n  </Carousel>,\n  mountNode\n);\n\n```\n\n结果，没有任何效果，打开控制台，找到 id 是 `test-slide` 的那个元素，发现渲染的结果是下面这样：\n\n```html\n<div id=\"test-slide\" tabindex=\"-1\" style=\"width: 100%; display: inline-block;\">1</div>\n```\n\n`style` 属性被重写了，我自己加的 `style` 不见了，更加确信了是 `Carousel` 组件内部搞的鬼\n\n打开 `github` 扒 ant-design 源码，没有发现对 `style` 属性做任何更改，然后在头部找到该组件其实是引入一个 `react-slick`，然后包装了下\n\n```tsx\n// https://github.com/ant-design/ant-design/blob/master/components/carousel/index.tsx#L23\n\nconst SlickCarousel = require(\"react-slick\").default;\n\nexport default class Carousel extends React.Component<CarouselProps, {}> {\n  // 部分代码省略 ...\n  renderCarousel = ({ getPrefixCls }: ConfigConsumerProps) => {\n    // 部分代码省略 ...\n    return (\n      <div className={className}>\n        <SlickCarousel ref={this.saveSlick} {...props} />\n      </div>\n    );\n  };\n\n  render() {\n    return <ConfigConsumer>{this.renderCarousel}</ConfigConsumer>;\n  }\n}\n```\n\n真相慢慢的付出了水面，再次扒 `react-slick` 的源码，终于功夫不负有心人，在这个文件里发现了问题的源头\n\n```jsx\n// https://github.com/akiran/react-slick/blob/master/src/slider.js#L184\n\nReact.cloneElement(children[k], {\n  key: 100 * i + 10 * j + k,\n  tabIndex: -1,\n  style: {\n    width: `${100 / settings.slidesPerRow}%`,\n    display: \"inline-block\"\n  }\n})\n\n```\n直接将子元素`children` 的 `style` 属性覆盖了\n\n最后在 `react-slick` 找到了相关 [issue](https://github.com/akiran/react-slick/issues/1244)，然额这个 issue 仍然是 open 状态\n\n在 PR 中找到 [pull#1372](https://github.com/akiran/react-slick/pull/1372)，有人尝试修复过，但是 PR 又关了，不知道什么原因\n\n### 解决方案\n\n由于不知道源码作者为何要这么设置，我只能先找其他方法解决\n\n- 方法一\n多嵌套一层，只要不是在第一层元素上操作就行\n\n```jsx\nReactDOM.render(\n  <Carousel>\n    <div>\n      <div style={{ backgroundImage: `url(${logo})` }}>1</div>\n    </div>\n  </Carousel>,\n  mountNode\n);\n```\n\n- 方法二\n\n用其他方式达成目的\n\n```jsx\nReactDOM.render(\n  <Carousel>\n    <img src={logo} alt=\"001\"/>\n  </Carousel>,\n  mountNode\n);\n```\n\n### 总结\n\n- 找这个 bug 还是挺费时间的，不过，通过这次 bug 之旅，学到一定要用科学的方法，精准定位问题来源，多做空白试验参照，进行对比，这样才能更快的解决问题\n- 一定要多看源码，可以学到很多技巧\n\n### 备注\n\n可以点击下面的链接查看 “情景重现” 和组件源码\n\n- “情景重现”  \ndemo https://codesandbox.io/s/92n1x0w1my  \n- 源码  \nant-design https://github.com/ant-design/ant-design/blob/master/components/carousel/index.tsx#L23    \nreact-slick https://github.com/akiran/react-slick/blob/master/src/slider.js#L185  \n\n\n","slug":"一次-bug-的寻找之旅","published":1,"updated":"2019-04-25T08:24:11.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauj90007aeyy17crawxd","content":"<h2 id=\"一次-bug-的寻找之旅\"><a href=\"#一次-bug-的寻找之旅\" class=\"headerlink\" title=\"一次 bug 的寻找之旅\"></a>一次 bug 的寻找之旅</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在最近的一个项目中，用到了 ant-design 的 轮播图组件 <code>Carousel</code>，发现无法按照预期给每个 slide 加样式（内联样式），后来发现是 ant-design 的轮播图组件引用的三方库 <code>react-slick</code>，通过源码查找，终于发现是代码把内联样式重写了</p>\n<h3 id=\"情景再现\"><a href=\"#情景再现\" class=\"headerlink\" title=\"情景再现\"></a>情景再现</h3><p>按照 ant-design 的官方示例，把demo拷贝过来</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Carousel &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onChange</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a, b, c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Carousel afterChange=&#123;onChange&#125;&gt;</span><br><span class=\"line\">    &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Carousel&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  mountNode</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>一切正常。然后按业务改动代码，加入背景图</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urlBg001  <span class=\"keyword\">from</span> <span class=\"string\">\"./images/urlBg001.png\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> urlBg002 <span class=\"keyword\">from</span> <span class=\"string\">\"./images/urlBg002.png\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> urlBg003 <span class=\"keyword\">from</span> <span class=\"string\">\"./images/urlBg003.png\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Carousel afterChange=&#123;onChange&#125;&gt;</span><br><span class=\"line\">    &lt;div style=&#123;&#123; <span class=\"attr\">backgroundImage</span>: <span class=\"string\">`url(<span class=\"subst\">$&#123;urlBg001&#125;</span>)`</span> &#125;&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div style=&#123;&#123; <span class=\"attr\">backgroundImage</span>: <span class=\"string\">`url(<span class=\"subst\">$&#123;urlBg002&#125;</span>)`</span> &#125;&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div style=&#123;&#123; <span class=\"attr\">backgroundImage</span>: <span class=\"string\">`url(<span class=\"subst\">$&#123;urlBg003&#125;</span>)`</span> &#125;&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Carousel&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  mountNode</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>然而，没有任何效果（不显示背景图）</p>\n<h3 id=\"思考问题所在\"><a href=\"#思考问题所在\" class=\"headerlink\" title=\"思考问题所在\"></a>思考问题所在</h3><p>为何会这样呢</p>\n<p>首先，我以为是图片路径的问题，做了个验证，发现图片正常显示</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Carousel afterChange=&#123;onChange&#125;&gt;</span><br><span class=\"line\">    &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;urlBg001&#125;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Carousel&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  mountNode</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>然后，我就怀疑是不是 <code>Carousel</code> 这个组件对插槽做了限制，进行了进一步的验证</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Carousel afterChange=&#123;onChange&#125;&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"test-slide\"</span> style=&#123;</span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            backgroundImage: <span class=\"string\">`url(<span class=\"subst\">$&#123;urlBg001&#125;</span>)`</span>,</span><br><span class=\"line\">            color:<span class=\"string\">\"#f02\"</span>,</span><br><span class=\"line\">            width:<span class=\"string\">\"50px\"</span>,</span><br><span class=\"line\">        &#125;&#125;&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Carousel&gt;,</span><br><span class=\"line\">  mountNode</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>结果，没有任何效果，打开控制台，找到 id 是 <code>test-slide</code> 的那个元素，发现渲染的结果是下面这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test-slide\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"-1\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%; display: inline-block;\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>style</code> 属性被重写了，我自己加的 <code>style</code> 不见了，更加确信了是 <code>Carousel</code> 组件内部搞的鬼</p>\n<p>打开 <code>github</code> 扒 ant-design 源码，没有发现对 <code>style</code> 属性做任何更改，然后在头部找到该组件其实是引入一个 <code>react-slick</code>，然后包装了下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// https://github.com/ant-design/ant-design/blob/master/components/carousel/index.tsx#L23</span><br><span class=\"line\"></span><br><span class=\"line\">const SlickCarousel = require(&quot;react-slick&quot;).default;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Carousel extends React.Component&lt;CarouselProps, &#123;&#125;&gt; &#123;</span><br><span class=\"line\">  // 部分代码省略 ...</span><br><span class=\"line\">  renderCarousel = (&#123; getPrefixCls &#125;: ConfigConsumerProps) =&gt; &#123;</span><br><span class=\"line\">    // 部分代码省略 ...</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&#123;className&#125;&gt;</span><br><span class=\"line\">        &lt;SlickCarousel ref=&#123;this.saveSlick&#125; &#123;...props&#125; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;ConfigConsumer&gt;&#123;this.renderCarousel&#125;&lt;/ConfigConsumer&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>真相慢慢的付出了水面，再次扒 <code>react-slick</code> 的源码，终于功夫不负有心人，在这个文件里发现了问题的源头</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/akiran/react-slick/blob/master/src/slider.js#L184</span></span><br><span class=\"line\"></span><br><span class=\"line\">React.cloneElement(children[k], &#123;</span><br><span class=\"line\">  key: <span class=\"number\">100</span> * i + <span class=\"number\">10</span> * j + k,</span><br><span class=\"line\">  tabIndex: <span class=\"number\">-1</span>,</span><br><span class=\"line\">  style: &#123;</span><br><span class=\"line\">    width: <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"number\">100</span> <span class=\"regexp\">/ settings.slidesPerRow&#125;%`,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">    display: \"inline-block\"</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">  &#125;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">&#125;)</span></span></span></span><br></pre></td></tr></table></figure>\n<p>直接将子元素<code>children</code> 的 <code>style</code> 属性覆盖了</p>\n<p>最后在 <code>react-slick</code> 找到了相关 <a href=\"https://github.com/akiran/react-slick/issues/1244\" target=\"_blank\" rel=\"noopener\">issue</a>，然额这个 issue 仍然是 open 状态</p>\n<p>在 PR 中找到 <a href=\"https://github.com/akiran/react-slick/pull/1372\" target=\"_blank\" rel=\"noopener\">pull#1372</a>，有人尝试修复过，但是 PR 又关了，不知道什么原因</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>由于不知道源码作者为何要这么设置，我只能先找其他方法解决</p>\n<ul>\n<li>方法一<br>多嵌套一层，只要不是在第一层元素上操作就行</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Carousel&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;div style=&#123;&#123; <span class=\"attr\">backgroundImage</span>: <span class=\"string\">`url(<span class=\"subst\">$&#123;logo&#125;</span>)`</span> &#125;&#125;&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Carousel&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  mountNode</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法二</li>\n</ul>\n<p>用其他方式达成目的</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Carousel&gt;</span><br><span class=\"line\">    &lt;img src=&#123;logo&#125; alt=<span class=\"string\">\"001\"</span>/&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Carousel&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  mountNode</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>找这个 bug 还是挺费时间的，不过，通过这次 bug 之旅，学到一定要用科学的方法，精准定位问题来源，多做空白试验参照，进行对比，这样才能更快的解决问题</li>\n<li>一定要多看源码，可以学到很多技巧</li>\n</ul>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>可以点击下面的链接查看 “情景重现” 和组件源码</p>\n<ul>\n<li>“情景重现”<br>demo <a href=\"https://codesandbox.io/s/92n1x0w1my\" target=\"_blank\" rel=\"noopener\">https://codesandbox.io/s/92n1x0w1my</a>  </li>\n<li>源码<br>ant-design <a href=\"https://github.com/ant-design/ant-design/blob/master/components/carousel/index.tsx#L23\" target=\"_blank\" rel=\"noopener\">https://github.com/ant-design/ant-design/blob/master/components/carousel/index.tsx#L23</a><br>react-slick <a href=\"https://github.com/akiran/react-slick/blob/master/src/slider.js#L185\" target=\"_blank\" rel=\"noopener\">https://github.com/akiran/react-slick/blob/master/src/slider.js#L185</a>  </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一次-bug-的寻找之旅\"><a href=\"#一次-bug-的寻找之旅\" class=\"headerlink\" title=\"一次 bug 的寻找之旅\"></a>一次 bug 的寻找之旅</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在最近的一个项目中，用到了 ant-design 的 轮播图组件 <code>Carousel</code>，发现无法按照预期给每个 slide 加样式（内联样式），后来发现是 ant-design 的轮播图组件引用的三方库 <code>react-slick</code>，通过源码查找，终于发现是代码把内联样式重写了</p>\n<h3 id=\"情景再现\"><a href=\"#情景再现\" class=\"headerlink\" title=\"情景再现\"></a>情景再现</h3><p>按照 ant-design 的官方示例，把demo拷贝过来</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Carousel &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onChange</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a, b, c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Carousel afterChange=&#123;onChange&#125;&gt;</span><br><span class=\"line\">    &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Carousel&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  mountNode</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>一切正常。然后按业务改动代码，加入背景图</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urlBg001  <span class=\"keyword\">from</span> <span class=\"string\">\"./images/urlBg001.png\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> urlBg002 <span class=\"keyword\">from</span> <span class=\"string\">\"./images/urlBg002.png\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> urlBg003 <span class=\"keyword\">from</span> <span class=\"string\">\"./images/urlBg003.png\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Carousel afterChange=&#123;onChange&#125;&gt;</span><br><span class=\"line\">    &lt;div style=&#123;&#123; <span class=\"attr\">backgroundImage</span>: <span class=\"string\">`url(<span class=\"subst\">$&#123;urlBg001&#125;</span>)`</span> &#125;&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div style=&#123;&#123; <span class=\"attr\">backgroundImage</span>: <span class=\"string\">`url(<span class=\"subst\">$&#123;urlBg002&#125;</span>)`</span> &#125;&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div style=&#123;&#123; <span class=\"attr\">backgroundImage</span>: <span class=\"string\">`url(<span class=\"subst\">$&#123;urlBg003&#125;</span>)`</span> &#125;&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Carousel&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  mountNode</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>然而，没有任何效果（不显示背景图）</p>\n<h3 id=\"思考问题所在\"><a href=\"#思考问题所在\" class=\"headerlink\" title=\"思考问题所在\"></a>思考问题所在</h3><p>为何会这样呢</p>\n<p>首先，我以为是图片路径的问题，做了个验证，发现图片正常显示</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Carousel afterChange=&#123;onChange&#125;&gt;</span><br><span class=\"line\">    &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;urlBg001&#125;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Carousel&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  mountNode</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>然后，我就怀疑是不是 <code>Carousel</code> 这个组件对插槽做了限制，进行了进一步的验证</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Carousel afterChange=&#123;onChange&#125;&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"test-slide\"</span> style=&#123;</span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            backgroundImage: <span class=\"string\">`url(<span class=\"subst\">$&#123;urlBg001&#125;</span>)`</span>,</span><br><span class=\"line\">            color:<span class=\"string\">\"#f02\"</span>,</span><br><span class=\"line\">            width:<span class=\"string\">\"50px\"</span>,</span><br><span class=\"line\">        &#125;&#125;&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Carousel&gt;,</span><br><span class=\"line\">  mountNode</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>结果，没有任何效果，打开控制台，找到 id 是 <code>test-slide</code> 的那个元素，发现渲染的结果是下面这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test-slide\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"-1\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%; display: inline-block;\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>style</code> 属性被重写了，我自己加的 <code>style</code> 不见了，更加确信了是 <code>Carousel</code> 组件内部搞的鬼</p>\n<p>打开 <code>github</code> 扒 ant-design 源码，没有发现对 <code>style</code> 属性做任何更改，然后在头部找到该组件其实是引入一个 <code>react-slick</code>，然后包装了下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// https://github.com/ant-design/ant-design/blob/master/components/carousel/index.tsx#L23</span><br><span class=\"line\"></span><br><span class=\"line\">const SlickCarousel = require(&quot;react-slick&quot;).default;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Carousel extends React.Component&lt;CarouselProps, &#123;&#125;&gt; &#123;</span><br><span class=\"line\">  // 部分代码省略 ...</span><br><span class=\"line\">  renderCarousel = (&#123; getPrefixCls &#125;: ConfigConsumerProps) =&gt; &#123;</span><br><span class=\"line\">    // 部分代码省略 ...</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&#123;className&#125;&gt;</span><br><span class=\"line\">        &lt;SlickCarousel ref=&#123;this.saveSlick&#125; &#123;...props&#125; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;ConfigConsumer&gt;&#123;this.renderCarousel&#125;&lt;/ConfigConsumer&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>真相慢慢的付出了水面，再次扒 <code>react-slick</code> 的源码，终于功夫不负有心人，在这个文件里发现了问题的源头</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/akiran/react-slick/blob/master/src/slider.js#L184</span></span><br><span class=\"line\"></span><br><span class=\"line\">React.cloneElement(children[k], &#123;</span><br><span class=\"line\">  key: <span class=\"number\">100</span> * i + <span class=\"number\">10</span> * j + k,</span><br><span class=\"line\">  tabIndex: <span class=\"number\">-1</span>,</span><br><span class=\"line\">  style: &#123;</span><br><span class=\"line\">    width: <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"number\">100</span> <span class=\"regexp\">/ settings.slidesPerRow&#125;%`,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">    display: \"inline-block\"</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">  &#125;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">&#125;)</span></span></span></span><br></pre></td></tr></table></figure>\n<p>直接将子元素<code>children</code> 的 <code>style</code> 属性覆盖了</p>\n<p>最后在 <code>react-slick</code> 找到了相关 <a href=\"https://github.com/akiran/react-slick/issues/1244\" target=\"_blank\" rel=\"noopener\">issue</a>，然额这个 issue 仍然是 open 状态</p>\n<p>在 PR 中找到 <a href=\"https://github.com/akiran/react-slick/pull/1372\" target=\"_blank\" rel=\"noopener\">pull#1372</a>，有人尝试修复过，但是 PR 又关了，不知道什么原因</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>由于不知道源码作者为何要这么设置，我只能先找其他方法解决</p>\n<ul>\n<li>方法一<br>多嵌套一层，只要不是在第一层元素上操作就行</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Carousel&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;div style=&#123;&#123; <span class=\"attr\">backgroundImage</span>: <span class=\"string\">`url(<span class=\"subst\">$&#123;logo&#125;</span>)`</span> &#125;&#125;&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Carousel&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  mountNode</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法二</li>\n</ul>\n<p>用其他方式达成目的</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Carousel&gt;</span><br><span class=\"line\">    &lt;img src=&#123;logo&#125; alt=<span class=\"string\">\"001\"</span>/&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Carousel&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  mountNode</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>找这个 bug 还是挺费时间的，不过，通过这次 bug 之旅，学到一定要用科学的方法，精准定位问题来源，多做空白试验参照，进行对比，这样才能更快的解决问题</li>\n<li>一定要多看源码，可以学到很多技巧</li>\n</ul>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>可以点击下面的链接查看 “情景重现” 和组件源码</p>\n<ul>\n<li>“情景重现”<br>demo <a href=\"https://codesandbox.io/s/92n1x0w1my\" target=\"_blank\" rel=\"noopener\">https://codesandbox.io/s/92n1x0w1my</a>  </li>\n<li>源码<br>ant-design <a href=\"https://github.com/ant-design/ant-design/blob/master/components/carousel/index.tsx#L23\" target=\"_blank\" rel=\"noopener\">https://github.com/ant-design/ant-design/blob/master/components/carousel/index.tsx#L23</a><br>react-slick <a href=\"https://github.com/akiran/react-slick/blob/master/src/slider.js#L185\" target=\"_blank\" rel=\"noopener\">https://github.com/akiran/react-slick/blob/master/src/slider.js#L185</a>  </li>\n</ul>\n"},{"title":"下载 Github 仓库的指定文件夹","date":"2019-01-23T06:44:47.000Z","_content":"\n### 下载整个仓库\n\n```bash\n$ git clone https://github.com/Yangfan2016/PersonalWorks.git\n\n```\n\n### 下载仓库内的指定文件\n\n```bash\n\n$ git init\n$ git config core.sparseCheckout true # 配置\n$ git remote add -f origin https://github.com/Yangfan2016/PersonalWorks.git\n$ echo \"static-page/\" >> .git/info/sparse-checkout # 写入要下载的文件目录\n$ echo \"web-app/\" >> .git/info/sparse-checkout\n$ git pull origin master\n```","source":"_posts/下载-Github-仓库的指定文件夹.md","raw":"---\ntitle: 下载 Github 仓库的指定文件夹\ndate: 2019-01-23 14:44:47\ntags:\n---\n\n### 下载整个仓库\n\n```bash\n$ git clone https://github.com/Yangfan2016/PersonalWorks.git\n\n```\n\n### 下载仓库内的指定文件\n\n```bash\n\n$ git init\n$ git config core.sparseCheckout true # 配置\n$ git remote add -f origin https://github.com/Yangfan2016/PersonalWorks.git\n$ echo \"static-page/\" >> .git/info/sparse-checkout # 写入要下载的文件目录\n$ echo \"web-app/\" >> .git/info/sparse-checkout\n$ git pull origin master\n```","slug":"下载-Github-仓库的指定文件夹","published":1,"updated":"2019-04-25T08:24:11.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauja0008aeyysrk9zp7s","content":"<h3 id=\"下载整个仓库\"><a href=\"#下载整个仓库\" class=\"headerlink\" title=\"下载整个仓库\"></a>下载整个仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yangfan2016/PersonalWorks.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载仓库内的指定文件\"><a href=\"#下载仓库内的指定文件\" class=\"headerlink\" title=\"下载仓库内的指定文件\"></a>下载仓库内的指定文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git init</span><br><span class=\"line\">$ git config core.sparseCheckout <span class=\"literal\">true</span> <span class=\"comment\"># 配置</span></span><br><span class=\"line\">$ git remote add -f origin https://github.com/Yangfan2016/PersonalWorks.git</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"static-page/\"</span> &gt;&gt; .git/info/sparse-checkout <span class=\"comment\"># 写入要下载的文件目录</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"web-app/\"</span> &gt;&gt; .git/info/sparse-checkout</span><br><span class=\"line\">$ git pull origin master</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"下载整个仓库\"><a href=\"#下载整个仓库\" class=\"headerlink\" title=\"下载整个仓库\"></a>下载整个仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Yangfan2016/PersonalWorks.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载仓库内的指定文件\"><a href=\"#下载仓库内的指定文件\" class=\"headerlink\" title=\"下载仓库内的指定文件\"></a>下载仓库内的指定文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git init</span><br><span class=\"line\">$ git config core.sparseCheckout <span class=\"literal\">true</span> <span class=\"comment\"># 配置</span></span><br><span class=\"line\">$ git remote add -f origin https://github.com/Yangfan2016/PersonalWorks.git</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"static-page/\"</span> &gt;&gt; .git/info/sparse-checkout <span class=\"comment\"># 写入要下载的文件目录</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"web-app/\"</span> &gt;&gt; .git/info/sparse-checkout</span><br><span class=\"line\">$ git pull origin master</span><br></pre></td></tr></table></figure>"},{"title":"入门级的git使用指北","date":"2018-05-08T04:08:03.000Z","_content":"\n> Git 一种免费的开源分布式版本控制系统\n\n\n## Config\n\n```bash\n# 全局配置 加 --global 标识\n$ git config --global user.name \"your name\" \n$ git config --global user.email \"xxx@xxx.xxx\"\n# 本地配置\n$ git config user.name \"your name\"\n# 查看配置 --list,-l\n$ git config --list\n# 查看指定项\n$ git config user.name\n# 修改指定项\n$ git config core.eol lf # git config <key> <value>\n# 删除指定项\n$ git config --unset core.eol # git config --unset <key>\n```\n\n## Basic\n\n```bash\n\n# init\n$ git init # 创建一个空的Git仓库或重新初始化一个现有仓库\n\n# add remote origin\n$ git remote add origin https://github.com/username/xxxx.git # 添加一个远程仓库 git remote add <shortname> <远程版本库>\n$ git remote # 查看已经存在的远程分支\n$ git remote -v # 查看已经存在的远程分支的详细信息 git remote -v | --verbose\n\n# pull\n$ git pull https://github.com/username/xxxx.git master # 拉取数据\n$ git pull origin master # origin 为你之前添加一个远程仓库的名字\n\n# add\n$ git add readme.txt # 添加单个文件到本地暂存区\n$ git add . # 添加所有修改、新增的文件到本地暂存区\n$ git add -u # 添加所有修改、删除的文件到本地暂存区\n$ git add -A # 添加所有修改、删除、新增文件到本地暂存区\n\n# commit\ngit commit -m \"注释\" # 此次提交的备注\n\n# push\ngit push -u origin master # 将本地的master分支同步到origin所在主机的master分支\n\n\n```\n\n## Diff\n\n```bash\n$ git diff # 查看冲突\n```\n\n## Branch\n\n```bash\n$ git branch # 查看所有分支（当前分支有星号标记 e.g. *master）\n$ git branch -a # 查看所有分支（包括远程分支）\n$ git branch dev # 创建分支\n$ git checkout dev  # 切换到 dev 分支\n$ git checkout -b feature # 新建并切换到 feature 分支 \n$ git branch -m feature test # 重命名   git branch -m <旧名字> <新名字>\n$ git branch -D test # 删除分支\n```\n\n## Merge\n\n```bash\n$ git checkout master # 切换到 mastet 分支\n$ git merge dev # 将 dev 合并到 当前分支（这里是 master）\n```\n\n\n## Clone\n\n```bash\n$ git clone http://xxx.xxx/xxx.git # git clone <版本库的网址> <本地目录名>\n$ git clone http://xxx.xxx/xxx.git mydir # git clone <版本库的网址> <本地目录名>\n$ git clone -b dev http://xxx.xxx/xxx.git #git clone -b <分支名称> <版本库的网址>\n```\n\n## View\n\n```bash\n$ git status # 查看当前工作区提交状态\n$ git log # 查看提交历史记录\n```\n\n## Undo\n\ngit add 之前\n```bash\n$ git checkout -- a.js # 撤销某个/某些文件的更改\n```\n\ngit add 之后，git commit 之前\n```bash\n$ git reset HEAD a.js # 撤销某个/某些文件的添加\n```\n\ngit commit 之后\n```bash\n$ git reset HEAD^ --hard # 撤销本次提交（commit）\n$ git reset <commit_id> --hard # 撤回到指定的 commit\n```\n\n## Editor && Git Config\n```bash\n$ git config core.autocrlf false # 禁止自动转换换行符\n$ git config core.safecrlf true # 禁止换行符混用\n$ git config core.eol lf # 设置换行符为 LF \n```\n\n## Reset\n\n```bash\n$ git reset HEAD^\n$ git reset HEAD~2\n```\n\n\n## Relationship\n\n![git-relationship](https://user-gold-cdn.xitu.io/2018/10/28/166b9e70067850da?w=570&h=184&f=png&s=60462)\n\n## Refs\n1. [git-scm](https://git-scm.com/docs)\n1. [Git教程](https://www.yiibai.com/git/)\n","source":"_posts/入门级的git使用指北.md","raw":"---\ntitle: 入门级的git使用指北\ndate: 2018-05-08 12:08:03\ntags: [博客,Git]\n---\n\n> Git 一种免费的开源分布式版本控制系统\n\n\n## Config\n\n```bash\n# 全局配置 加 --global 标识\n$ git config --global user.name \"your name\" \n$ git config --global user.email \"xxx@xxx.xxx\"\n# 本地配置\n$ git config user.name \"your name\"\n# 查看配置 --list,-l\n$ git config --list\n# 查看指定项\n$ git config user.name\n# 修改指定项\n$ git config core.eol lf # git config <key> <value>\n# 删除指定项\n$ git config --unset core.eol # git config --unset <key>\n```\n\n## Basic\n\n```bash\n\n# init\n$ git init # 创建一个空的Git仓库或重新初始化一个现有仓库\n\n# add remote origin\n$ git remote add origin https://github.com/username/xxxx.git # 添加一个远程仓库 git remote add <shortname> <远程版本库>\n$ git remote # 查看已经存在的远程分支\n$ git remote -v # 查看已经存在的远程分支的详细信息 git remote -v | --verbose\n\n# pull\n$ git pull https://github.com/username/xxxx.git master # 拉取数据\n$ git pull origin master # origin 为你之前添加一个远程仓库的名字\n\n# add\n$ git add readme.txt # 添加单个文件到本地暂存区\n$ git add . # 添加所有修改、新增的文件到本地暂存区\n$ git add -u # 添加所有修改、删除的文件到本地暂存区\n$ git add -A # 添加所有修改、删除、新增文件到本地暂存区\n\n# commit\ngit commit -m \"注释\" # 此次提交的备注\n\n# push\ngit push -u origin master # 将本地的master分支同步到origin所在主机的master分支\n\n\n```\n\n## Diff\n\n```bash\n$ git diff # 查看冲突\n```\n\n## Branch\n\n```bash\n$ git branch # 查看所有分支（当前分支有星号标记 e.g. *master）\n$ git branch -a # 查看所有分支（包括远程分支）\n$ git branch dev # 创建分支\n$ git checkout dev  # 切换到 dev 分支\n$ git checkout -b feature # 新建并切换到 feature 分支 \n$ git branch -m feature test # 重命名   git branch -m <旧名字> <新名字>\n$ git branch -D test # 删除分支\n```\n\n## Merge\n\n```bash\n$ git checkout master # 切换到 mastet 分支\n$ git merge dev # 将 dev 合并到 当前分支（这里是 master）\n```\n\n\n## Clone\n\n```bash\n$ git clone http://xxx.xxx/xxx.git # git clone <版本库的网址> <本地目录名>\n$ git clone http://xxx.xxx/xxx.git mydir # git clone <版本库的网址> <本地目录名>\n$ git clone -b dev http://xxx.xxx/xxx.git #git clone -b <分支名称> <版本库的网址>\n```\n\n## View\n\n```bash\n$ git status # 查看当前工作区提交状态\n$ git log # 查看提交历史记录\n```\n\n## Undo\n\ngit add 之前\n```bash\n$ git checkout -- a.js # 撤销某个/某些文件的更改\n```\n\ngit add 之后，git commit 之前\n```bash\n$ git reset HEAD a.js # 撤销某个/某些文件的添加\n```\n\ngit commit 之后\n```bash\n$ git reset HEAD^ --hard # 撤销本次提交（commit）\n$ git reset <commit_id> --hard # 撤回到指定的 commit\n```\n\n## Editor && Git Config\n```bash\n$ git config core.autocrlf false # 禁止自动转换换行符\n$ git config core.safecrlf true # 禁止换行符混用\n$ git config core.eol lf # 设置换行符为 LF \n```\n\n## Reset\n\n```bash\n$ git reset HEAD^\n$ git reset HEAD~2\n```\n\n\n## Relationship\n\n![git-relationship](https://user-gold-cdn.xitu.io/2018/10/28/166b9e70067850da?w=570&h=184&f=png&s=60462)\n\n## Refs\n1. [git-scm](https://git-scm.com/docs)\n1. [Git教程](https://www.yiibai.com/git/)\n","slug":"入门级的git使用指北","published":1,"updated":"2019-04-25T09:06:08.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaujc0009aeyy4ipyetll","content":"<blockquote>\n<p>Git 一种免费的开源分布式版本控制系统</p>\n</blockquote>\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局配置 加 --global 标识</span></span><br><span class=\"line\">$ git config --global user.name <span class=\"string\">\"your name\"</span> </span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"xxx@xxx.xxx\"</span></span><br><span class=\"line\"><span class=\"comment\"># 本地配置</span></span><br><span class=\"line\">$ git config user.name <span class=\"string\">\"your name\"</span></span><br><span class=\"line\"><span class=\"comment\"># 查看配置 --list,-l</span></span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"><span class=\"comment\"># 查看指定项</span></span><br><span class=\"line\">$ git config user.name</span><br><span class=\"line\"><span class=\"comment\"># 修改指定项</span></span><br><span class=\"line\">$ git config core.eol lf <span class=\"comment\"># git config &lt;key&gt; &lt;value&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 删除指定项</span></span><br><span class=\"line\">$ git config --<span class=\"built_in\">unset</span> core.eol <span class=\"comment\"># git config --unset &lt;key&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># init</span></span><br><span class=\"line\">$ git init <span class=\"comment\"># 创建一个空的Git仓库或重新初始化一个现有仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add remote origin</span></span><br><span class=\"line\">$ git remote add origin https://github.com/username/xxxx.git <span class=\"comment\"># 添加一个远程仓库 git remote add &lt;shortname&gt; &lt;远程版本库&gt;</span></span><br><span class=\"line\">$ git remote <span class=\"comment\"># 查看已经存在的远程分支</span></span><br><span class=\"line\">$ git remote -v <span class=\"comment\"># 查看已经存在的远程分支的详细信息 git remote -v | --verbose</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pull</span></span><br><span class=\"line\">$ git pull https://github.com/username/xxxx.git master <span class=\"comment\"># 拉取数据</span></span><br><span class=\"line\">$ git pull origin master <span class=\"comment\"># origin 为你之前添加一个远程仓库的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add</span></span><br><span class=\"line\">$ git add readme.txt <span class=\"comment\"># 添加单个文件到本地暂存区</span></span><br><span class=\"line\">$ git add . <span class=\"comment\"># 添加所有修改、新增的文件到本地暂存区</span></span><br><span class=\"line\">$ git add -u <span class=\"comment\"># 添加所有修改、删除的文件到本地暂存区</span></span><br><span class=\"line\">$ git add -A <span class=\"comment\"># 添加所有修改、删除、新增文件到本地暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># commit</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"注释\"</span> <span class=\"comment\"># 此次提交的备注</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># push</span></span><br><span class=\"line\">git push -u origin master <span class=\"comment\"># 将本地的master分支同步到origin所在主机的master分支</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Diff\"><a href=\"#Diff\" class=\"headerlink\" title=\"Diff\"></a>Diff</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff <span class=\"comment\"># 查看冲突</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Branch\"><a href=\"#Branch\" class=\"headerlink\" title=\"Branch\"></a>Branch</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch <span class=\"comment\"># 查看所有分支（当前分支有星号标记 e.g. *master）</span></span><br><span class=\"line\">$ git branch -a <span class=\"comment\"># 查看所有分支（包括远程分支）</span></span><br><span class=\"line\">$ git branch dev <span class=\"comment\"># 创建分支</span></span><br><span class=\"line\">$ git checkout dev  <span class=\"comment\"># 切换到 dev 分支</span></span><br><span class=\"line\">$ git checkout -b feature <span class=\"comment\"># 新建并切换到 feature 分支 </span></span><br><span class=\"line\">$ git branch -m feature <span class=\"built_in\">test</span> <span class=\"comment\"># 重命名   git branch -m &lt;旧名字&gt; &lt;新名字&gt;</span></span><br><span class=\"line\">$ git branch -D <span class=\"built_in\">test</span> <span class=\"comment\"># 删除分支</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Merge\"><a href=\"#Merge\" class=\"headerlink\" title=\"Merge\"></a>Merge</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master <span class=\"comment\"># 切换到 mastet 分支</span></span><br><span class=\"line\">$ git merge dev <span class=\"comment\"># 将 dev 合并到 当前分支（这里是 master）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Clone\"><a href=\"#Clone\" class=\"headerlink\" title=\"Clone\"></a>Clone</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> http://xxx.xxx/xxx.git <span class=\"comment\"># git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> http://xxx.xxx/xxx.git mydir <span class=\"comment\"># git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b dev http://xxx.xxx/xxx.git <span class=\"comment\">#git clone -b &lt;分支名称&gt; &lt;版本库的网址&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status <span class=\"comment\"># 查看当前工作区提交状态</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> <span class=\"comment\"># 查看提交历史记录</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Undo\"><a href=\"#Undo\" class=\"headerlink\" title=\"Undo\"></a>Undo</h2><p>git add 之前<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- a.js <span class=\"comment\"># 撤销某个/某些文件的更改</span></span><br></pre></td></tr></table></figure></p>\n<p>git add 之后，git commit 之前<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD a.js <span class=\"comment\"># 撤销某个/某些文件的添加</span></span><br></pre></td></tr></table></figure></p>\n<p>git commit 之后<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD^ --hard <span class=\"comment\"># 撤销本次提交（commit）</span></span><br><span class=\"line\">$ git reset &lt;commit_id&gt; --hard <span class=\"comment\"># 撤回到指定的 commit</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Editor-amp-amp-Git-Config\"><a href=\"#Editor-amp-amp-Git-Config\" class=\"headerlink\" title=\"Editor &amp;&amp; Git Config\"></a>Editor &amp;&amp; Git Config</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config core.autocrlf <span class=\"literal\">false</span> <span class=\"comment\"># 禁止自动转换换行符</span></span><br><span class=\"line\">$ git config core.safecrlf <span class=\"literal\">true</span> <span class=\"comment\"># 禁止换行符混用</span></span><br><span class=\"line\">$ git config core.eol lf <span class=\"comment\"># 设置换行符为 LF</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Reset\"><a href=\"#Reset\" class=\"headerlink\" title=\"Reset\"></a>Reset</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD^</span><br><span class=\"line\">$ git reset HEAD~2</span><br></pre></td></tr></table></figure>\n<h2 id=\"Relationship\"><a href=\"#Relationship\" class=\"headerlink\" title=\"Relationship\"></a>Relationship</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2018/10/28/166b9e70067850da?w=570&h=184&f=png&s=60462\" alt=\"git-relationship\" title=\"\">\n                </div>\n                <div class=\"image-caption\">git-relationship</div>\n            </figure>\n<h2 id=\"Refs\"><a href=\"#Refs\" class=\"headerlink\" title=\"Refs\"></a>Refs</h2><ol>\n<li><a href=\"https://git-scm.com/docs\" target=\"_blank\" rel=\"noopener\">git-scm</a></li>\n<li><a href=\"https://www.yiibai.com/git/\" target=\"_blank\" rel=\"noopener\">Git教程</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Git 一种免费的开源分布式版本控制系统</p>\n</blockquote>\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局配置 加 --global 标识</span></span><br><span class=\"line\">$ git config --global user.name <span class=\"string\">\"your name\"</span> </span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"xxx@xxx.xxx\"</span></span><br><span class=\"line\"><span class=\"comment\"># 本地配置</span></span><br><span class=\"line\">$ git config user.name <span class=\"string\">\"your name\"</span></span><br><span class=\"line\"><span class=\"comment\"># 查看配置 --list,-l</span></span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"><span class=\"comment\"># 查看指定项</span></span><br><span class=\"line\">$ git config user.name</span><br><span class=\"line\"><span class=\"comment\"># 修改指定项</span></span><br><span class=\"line\">$ git config core.eol lf <span class=\"comment\"># git config &lt;key&gt; &lt;value&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 删除指定项</span></span><br><span class=\"line\">$ git config --<span class=\"built_in\">unset</span> core.eol <span class=\"comment\"># git config --unset &lt;key&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># init</span></span><br><span class=\"line\">$ git init <span class=\"comment\"># 创建一个空的Git仓库或重新初始化一个现有仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add remote origin</span></span><br><span class=\"line\">$ git remote add origin https://github.com/username/xxxx.git <span class=\"comment\"># 添加一个远程仓库 git remote add &lt;shortname&gt; &lt;远程版本库&gt;</span></span><br><span class=\"line\">$ git remote <span class=\"comment\"># 查看已经存在的远程分支</span></span><br><span class=\"line\">$ git remote -v <span class=\"comment\"># 查看已经存在的远程分支的详细信息 git remote -v | --verbose</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pull</span></span><br><span class=\"line\">$ git pull https://github.com/username/xxxx.git master <span class=\"comment\"># 拉取数据</span></span><br><span class=\"line\">$ git pull origin master <span class=\"comment\"># origin 为你之前添加一个远程仓库的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add</span></span><br><span class=\"line\">$ git add readme.txt <span class=\"comment\"># 添加单个文件到本地暂存区</span></span><br><span class=\"line\">$ git add . <span class=\"comment\"># 添加所有修改、新增的文件到本地暂存区</span></span><br><span class=\"line\">$ git add -u <span class=\"comment\"># 添加所有修改、删除的文件到本地暂存区</span></span><br><span class=\"line\">$ git add -A <span class=\"comment\"># 添加所有修改、删除、新增文件到本地暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># commit</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"注释\"</span> <span class=\"comment\"># 此次提交的备注</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># push</span></span><br><span class=\"line\">git push -u origin master <span class=\"comment\"># 将本地的master分支同步到origin所在主机的master分支</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Diff\"><a href=\"#Diff\" class=\"headerlink\" title=\"Diff\"></a>Diff</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff <span class=\"comment\"># 查看冲突</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Branch\"><a href=\"#Branch\" class=\"headerlink\" title=\"Branch\"></a>Branch</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch <span class=\"comment\"># 查看所有分支（当前分支有星号标记 e.g. *master）</span></span><br><span class=\"line\">$ git branch -a <span class=\"comment\"># 查看所有分支（包括远程分支）</span></span><br><span class=\"line\">$ git branch dev <span class=\"comment\"># 创建分支</span></span><br><span class=\"line\">$ git checkout dev  <span class=\"comment\"># 切换到 dev 分支</span></span><br><span class=\"line\">$ git checkout -b feature <span class=\"comment\"># 新建并切换到 feature 分支 </span></span><br><span class=\"line\">$ git branch -m feature <span class=\"built_in\">test</span> <span class=\"comment\"># 重命名   git branch -m &lt;旧名字&gt; &lt;新名字&gt;</span></span><br><span class=\"line\">$ git branch -D <span class=\"built_in\">test</span> <span class=\"comment\"># 删除分支</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Merge\"><a href=\"#Merge\" class=\"headerlink\" title=\"Merge\"></a>Merge</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master <span class=\"comment\"># 切换到 mastet 分支</span></span><br><span class=\"line\">$ git merge dev <span class=\"comment\"># 将 dev 合并到 当前分支（这里是 master）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Clone\"><a href=\"#Clone\" class=\"headerlink\" title=\"Clone\"></a>Clone</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> http://xxx.xxx/xxx.git <span class=\"comment\"># git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> http://xxx.xxx/xxx.git mydir <span class=\"comment\"># git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b dev http://xxx.xxx/xxx.git <span class=\"comment\">#git clone -b &lt;分支名称&gt; &lt;版本库的网址&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status <span class=\"comment\"># 查看当前工作区提交状态</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> <span class=\"comment\"># 查看提交历史记录</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Undo\"><a href=\"#Undo\" class=\"headerlink\" title=\"Undo\"></a>Undo</h2><p>git add 之前<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- a.js <span class=\"comment\"># 撤销某个/某些文件的更改</span></span><br></pre></td></tr></table></figure></p>\n<p>git add 之后，git commit 之前<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD a.js <span class=\"comment\"># 撤销某个/某些文件的添加</span></span><br></pre></td></tr></table></figure></p>\n<p>git commit 之后<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD^ --hard <span class=\"comment\"># 撤销本次提交（commit）</span></span><br><span class=\"line\">$ git reset &lt;commit_id&gt; --hard <span class=\"comment\"># 撤回到指定的 commit</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Editor-amp-amp-Git-Config\"><a href=\"#Editor-amp-amp-Git-Config\" class=\"headerlink\" title=\"Editor &amp;&amp; Git Config\"></a>Editor &amp;&amp; Git Config</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config core.autocrlf <span class=\"literal\">false</span> <span class=\"comment\"># 禁止自动转换换行符</span></span><br><span class=\"line\">$ git config core.safecrlf <span class=\"literal\">true</span> <span class=\"comment\"># 禁止换行符混用</span></span><br><span class=\"line\">$ git config core.eol lf <span class=\"comment\"># 设置换行符为 LF</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Reset\"><a href=\"#Reset\" class=\"headerlink\" title=\"Reset\"></a>Reset</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD^</span><br><span class=\"line\">$ git reset HEAD~2</span><br></pre></td></tr></table></figure>\n<h2 id=\"Relationship\"><a href=\"#Relationship\" class=\"headerlink\" title=\"Relationship\"></a>Relationship</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2018/10/28/166b9e70067850da?w=570&h=184&f=png&s=60462\" alt=\"git-relationship\" title=\"\">\n                </div>\n                <div class=\"image-caption\">git-relationship</div>\n            </figure>\n<h2 id=\"Refs\"><a href=\"#Refs\" class=\"headerlink\" title=\"Refs\"></a>Refs</h2><ol>\n<li><a href=\"https://git-scm.com/docs\" target=\"_blank\" rel=\"noopener\">git-scm</a></li>\n<li><a href=\"https://www.yiibai.com/git/\" target=\"_blank\" rel=\"noopener\">Git教程</a></li>\n</ol>\n"},{"title":"一个简单前端工具集-yanjs","date":"2018-10-14T06:59:18.000Z","_content":"\n## 一个简单前端工具集-yanjs\n> This is just a common toolkit for the Front End\n\n\n### 安装使用\n\n- Install\n```bash\n$ npm install yanjs\n```\n- Example\n```js\nvar yanjs = require('yanjs');\n```\n- Documentation  \n[使用文档](https://github.com/Yangfan2016/yanjs#yanjs--)\n\n### 造轮子的初衷\n\n现在的前端发展正是百花齐放的时代，各种框架、各种库、各种插件层出不穷，为何还要重复造轮子内（毕竟大家都知道DRY，Don't repeat yourself）：\n1. 为了公司内部使用，减少三方插件的依赖\n1. 为了轻量级，加快页面的加载速度，现有业务用目前流行的工具库（如 lodash.js）使用率不是很高，并不是所有功能都用上\n1. 现在业务的技术栈主要是Vue，要进一步去除jQuery的依赖，做一个替代jQuery里部分工具函数的过渡\n1. 为了熟悉实践下前端开发的流程，学习一下如何造轮子（向轮子哥vczh致敬），提升一下自己的水平\n1. 为大前端的发展添砖加瓦，^_^\n\n### 开发流程\n\n- 开发需求  \n主要是根据平时业务中常用的总结如下需求  \n1. ajax模块  \n1. 时间格式转换模块\n1. 字符串格式转换模块\n1. cookie模块\n1. url解析模块\n1. 浏览器模块\n- 开发依赖  \n鉴于开发中常用的ajax库是axios，所以就不再重复造轮子了，简单的封装了下，cookie直接使用的是MDN封装好的docCookies\n1. [axios](https://www.npmjs.com/package/axios)\n1. [docCookies](https://developer.mozilla.org/en-US/docs/DOM/document.cookie)\n- 开发环境  \n语言：Typescript 3.x    \n转换：babel 7.x   \n打包：webpack 4.x    \n测试：mocha+chai+phantomjs\n- 发布环境   \n集成：[Travis-ci](https://travis-ci.org/Yangfan2016/yanjs)   \n发布：[npm](https://travis-ci.org/Yangfan2016/yanjs)  \n托管：[github](https://github.com/Yangfan2016/yanjs)\n\n### 开发心得\n\n- 经历了  \n第一次用typescript编写业务代码  \n第一次发布npm包  \n第一次用mocha测试工具完成代码测试  \n第一次用Travis-ci集成工具  \n\n- 结果  \n完整的体验了一次前端工程化开发，基本熟悉了整个开发流程   \n公司内部已有两个项目在使用此库，已经基本稳定\n\n### 碎碎念\n\n鄙人还在成长中，可能还有许多地方考虑不周，欢迎交流学习，欢迎提 [issue](https://github.com/Yangfan2016/yanjs/issues)\n\n\n联系我：  \nGithub：[https://github.com/Yangfan2016](https://github.com/Yangfan2016)  \nBlog： [https://yangfan2016.github.io/](https://yangfan2016.github.io/)  \nSegmentfault：[https://segmentfault.com/u/yangfan2016](https://segmentfault.com/u/yangfan2016)  \n\n大佬，点了[star](https://github.com/Yangfan2016/yanjs)再走呗，^_^\n","source":"_posts/一个简单前端工具集.md","raw":"---\ntitle: 一个简单前端工具集-yanjs\ndate: 2018-10-14 14:59:18\ntags:\n---\n\n## 一个简单前端工具集-yanjs\n> This is just a common toolkit for the Front End\n\n\n### 安装使用\n\n- Install\n```bash\n$ npm install yanjs\n```\n- Example\n```js\nvar yanjs = require('yanjs');\n```\n- Documentation  \n[使用文档](https://github.com/Yangfan2016/yanjs#yanjs--)\n\n### 造轮子的初衷\n\n现在的前端发展正是百花齐放的时代，各种框架、各种库、各种插件层出不穷，为何还要重复造轮子内（毕竟大家都知道DRY，Don't repeat yourself）：\n1. 为了公司内部使用，减少三方插件的依赖\n1. 为了轻量级，加快页面的加载速度，现有业务用目前流行的工具库（如 lodash.js）使用率不是很高，并不是所有功能都用上\n1. 现在业务的技术栈主要是Vue，要进一步去除jQuery的依赖，做一个替代jQuery里部分工具函数的过渡\n1. 为了熟悉实践下前端开发的流程，学习一下如何造轮子（向轮子哥vczh致敬），提升一下自己的水平\n1. 为大前端的发展添砖加瓦，^_^\n\n### 开发流程\n\n- 开发需求  \n主要是根据平时业务中常用的总结如下需求  \n1. ajax模块  \n1. 时间格式转换模块\n1. 字符串格式转换模块\n1. cookie模块\n1. url解析模块\n1. 浏览器模块\n- 开发依赖  \n鉴于开发中常用的ajax库是axios，所以就不再重复造轮子了，简单的封装了下，cookie直接使用的是MDN封装好的docCookies\n1. [axios](https://www.npmjs.com/package/axios)\n1. [docCookies](https://developer.mozilla.org/en-US/docs/DOM/document.cookie)\n- 开发环境  \n语言：Typescript 3.x    \n转换：babel 7.x   \n打包：webpack 4.x    \n测试：mocha+chai+phantomjs\n- 发布环境   \n集成：[Travis-ci](https://travis-ci.org/Yangfan2016/yanjs)   \n发布：[npm](https://travis-ci.org/Yangfan2016/yanjs)  \n托管：[github](https://github.com/Yangfan2016/yanjs)\n\n### 开发心得\n\n- 经历了  \n第一次用typescript编写业务代码  \n第一次发布npm包  \n第一次用mocha测试工具完成代码测试  \n第一次用Travis-ci集成工具  \n\n- 结果  \n完整的体验了一次前端工程化开发，基本熟悉了整个开发流程   \n公司内部已有两个项目在使用此库，已经基本稳定\n\n### 碎碎念\n\n鄙人还在成长中，可能还有许多地方考虑不周，欢迎交流学习，欢迎提 [issue](https://github.com/Yangfan2016/yanjs/issues)\n\n\n联系我：  \nGithub：[https://github.com/Yangfan2016](https://github.com/Yangfan2016)  \nBlog： [https://yangfan2016.github.io/](https://yangfan2016.github.io/)  \nSegmentfault：[https://segmentfault.com/u/yangfan2016](https://segmentfault.com/u/yangfan2016)  \n\n大佬，点了[star](https://github.com/Yangfan2016/yanjs)再走呗，^_^\n","slug":"一个简单前端工具集","published":1,"updated":"2019-04-25T09:01:25.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaujq000baeyy6jd9pl80","content":"<h2 id=\"一个简单前端工具集-yanjs\"><a href=\"#一个简单前端工具集-yanjs\" class=\"headerlink\" title=\"一个简单前端工具集-yanjs\"></a>一个简单前端工具集-yanjs</h2><blockquote>\n<p>This is just a common toolkit for the Front End</p>\n</blockquote>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><ul>\n<li><p>Install</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install yanjs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Example</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yanjs = <span class=\"built_in\">require</span>(<span class=\"string\">'yanjs'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Documentation<br><a href=\"https://github.com/Yangfan2016/yanjs#yanjs--\" target=\"_blank\" rel=\"noopener\">使用文档</a></p>\n</li>\n</ul>\n<h3 id=\"造轮子的初衷\"><a href=\"#造轮子的初衷\" class=\"headerlink\" title=\"造轮子的初衷\"></a>造轮子的初衷</h3><p>现在的前端发展正是百花齐放的时代，各种框架、各种库、各种插件层出不穷，为何还要重复造轮子内（毕竟大家都知道DRY，Don’t repeat yourself）：</p>\n<ol>\n<li>为了公司内部使用，减少三方插件的依赖</li>\n<li>为了轻量级，加快页面的加载速度，现有业务用目前流行的工具库（如 lodash.js）使用率不是很高，并不是所有功能都用上</li>\n<li>现在业务的技术栈主要是Vue，要进一步去除jQuery的依赖，做一个替代jQuery里部分工具函数的过渡</li>\n<li>为了熟悉实践下前端开发的流程，学习一下如何造轮子（向轮子哥vczh致敬），提升一下自己的水平</li>\n<li>为大前端的发展添砖加瓦，^_^</li>\n</ol>\n<h3 id=\"开发流程\"><a href=\"#开发流程\" class=\"headerlink\" title=\"开发流程\"></a>开发流程</h3><ul>\n<li>开发需求<br>主要是根据平时业务中常用的总结如下需求  </li>\n</ul>\n<ol>\n<li>ajax模块  </li>\n<li>时间格式转换模块</li>\n<li>字符串格式转换模块</li>\n<li>cookie模块</li>\n<li>url解析模块</li>\n<li>浏览器模块</li>\n</ol>\n<ul>\n<li>开发依赖<br>鉴于开发中常用的ajax库是axios，所以就不再重复造轮子了，简单的封装了下，cookie直接使用的是MDN封装好的docCookies</li>\n</ul>\n<ol>\n<li><a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"noopener\">axios</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/DOM/document.cookie\" target=\"_blank\" rel=\"noopener\">docCookies</a></li>\n</ol>\n<ul>\n<li>开发环境<br>语言：Typescript 3.x<br>转换：babel 7.x<br>打包：webpack 4.x<br>测试：mocha+chai+phantomjs</li>\n<li>发布环境<br>集成：<a href=\"https://travis-ci.org/Yangfan2016/yanjs\" target=\"_blank\" rel=\"noopener\">Travis-ci</a><br>发布：<a href=\"https://travis-ci.org/Yangfan2016/yanjs\" target=\"_blank\" rel=\"noopener\">npm</a><br>托管：<a href=\"https://github.com/Yangfan2016/yanjs\" target=\"_blank\" rel=\"noopener\">github</a></li>\n</ul>\n<h3 id=\"开发心得\"><a href=\"#开发心得\" class=\"headerlink\" title=\"开发心得\"></a>开发心得</h3><ul>\n<li><p>经历了<br>第一次用typescript编写业务代码<br>第一次发布npm包<br>第一次用mocha测试工具完成代码测试<br>第一次用Travis-ci集成工具  </p>\n</li>\n<li><p>结果<br>完整的体验了一次前端工程化开发，基本熟悉了整个开发流程<br>公司内部已有两个项目在使用此库，已经基本稳定</p>\n</li>\n</ul>\n<h3 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h3><p>鄙人还在成长中，可能还有许多地方考虑不周，欢迎交流学习，欢迎提 <a href=\"https://github.com/Yangfan2016/yanjs/issues\" target=\"_blank\" rel=\"noopener\">issue</a></p>\n<p>联系我：<br>Github：<a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016</a><br>Blog： <a href=\"https://yangfan2016.github.io/\" target=\"_blank\" rel=\"noopener\">https://yangfan2016.github.io/</a><br>Segmentfault：<a href=\"https://segmentfault.com/u/yangfan2016\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/u/yangfan2016</a>  </p>\n<p>大佬，点了<a href=\"https://github.com/Yangfan2016/yanjs\" target=\"_blank\" rel=\"noopener\">star</a>再走呗，^_^</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一个简单前端工具集-yanjs\"><a href=\"#一个简单前端工具集-yanjs\" class=\"headerlink\" title=\"一个简单前端工具集-yanjs\"></a>一个简单前端工具集-yanjs</h2><blockquote>\n<p>This is just a common toolkit for the Front End</p>\n</blockquote>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><ul>\n<li><p>Install</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install yanjs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Example</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yanjs = <span class=\"built_in\">require</span>(<span class=\"string\">'yanjs'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Documentation<br><a href=\"https://github.com/Yangfan2016/yanjs#yanjs--\" target=\"_blank\" rel=\"noopener\">使用文档</a></p>\n</li>\n</ul>\n<h3 id=\"造轮子的初衷\"><a href=\"#造轮子的初衷\" class=\"headerlink\" title=\"造轮子的初衷\"></a>造轮子的初衷</h3><p>现在的前端发展正是百花齐放的时代，各种框架、各种库、各种插件层出不穷，为何还要重复造轮子内（毕竟大家都知道DRY，Don’t repeat yourself）：</p>\n<ol>\n<li>为了公司内部使用，减少三方插件的依赖</li>\n<li>为了轻量级，加快页面的加载速度，现有业务用目前流行的工具库（如 lodash.js）使用率不是很高，并不是所有功能都用上</li>\n<li>现在业务的技术栈主要是Vue，要进一步去除jQuery的依赖，做一个替代jQuery里部分工具函数的过渡</li>\n<li>为了熟悉实践下前端开发的流程，学习一下如何造轮子（向轮子哥vczh致敬），提升一下自己的水平</li>\n<li>为大前端的发展添砖加瓦，^_^</li>\n</ol>\n<h3 id=\"开发流程\"><a href=\"#开发流程\" class=\"headerlink\" title=\"开发流程\"></a>开发流程</h3><ul>\n<li>开发需求<br>主要是根据平时业务中常用的总结如下需求  </li>\n</ul>\n<ol>\n<li>ajax模块  </li>\n<li>时间格式转换模块</li>\n<li>字符串格式转换模块</li>\n<li>cookie模块</li>\n<li>url解析模块</li>\n<li>浏览器模块</li>\n</ol>\n<ul>\n<li>开发依赖<br>鉴于开发中常用的ajax库是axios，所以就不再重复造轮子了，简单的封装了下，cookie直接使用的是MDN封装好的docCookies</li>\n</ul>\n<ol>\n<li><a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"noopener\">axios</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/DOM/document.cookie\" target=\"_blank\" rel=\"noopener\">docCookies</a></li>\n</ol>\n<ul>\n<li>开发环境<br>语言：Typescript 3.x<br>转换：babel 7.x<br>打包：webpack 4.x<br>测试：mocha+chai+phantomjs</li>\n<li>发布环境<br>集成：<a href=\"https://travis-ci.org/Yangfan2016/yanjs\" target=\"_blank\" rel=\"noopener\">Travis-ci</a><br>发布：<a href=\"https://travis-ci.org/Yangfan2016/yanjs\" target=\"_blank\" rel=\"noopener\">npm</a><br>托管：<a href=\"https://github.com/Yangfan2016/yanjs\" target=\"_blank\" rel=\"noopener\">github</a></li>\n</ul>\n<h3 id=\"开发心得\"><a href=\"#开发心得\" class=\"headerlink\" title=\"开发心得\"></a>开发心得</h3><ul>\n<li><p>经历了<br>第一次用typescript编写业务代码<br>第一次发布npm包<br>第一次用mocha测试工具完成代码测试<br>第一次用Travis-ci集成工具  </p>\n</li>\n<li><p>结果<br>完整的体验了一次前端工程化开发，基本熟悉了整个开发流程<br>公司内部已有两个项目在使用此库，已经基本稳定</p>\n</li>\n</ul>\n<h3 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h3><p>鄙人还在成长中，可能还有许多地方考虑不周，欢迎交流学习，欢迎提 <a href=\"https://github.com/Yangfan2016/yanjs/issues\" target=\"_blank\" rel=\"noopener\">issue</a></p>\n<p>联系我：<br>Github：<a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016</a><br>Blog： <a href=\"https://yangfan2016.github.io/\" target=\"_blank\" rel=\"noopener\">https://yangfan2016.github.io/</a><br>Segmentfault：<a href=\"https://segmentfault.com/u/yangfan2016\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/u/yangfan2016</a>  </p>\n<p>大佬，点了<a href=\"https://github.com/Yangfan2016/yanjs\" target=\"_blank\" rel=\"noopener\">star</a>再走呗，^_^</p>\n"},{"title":"微信扫码登录原理解析","date":"2018-07-03T10:16:26.000Z","_content":"\n# 微信扫码登录原理解析\n\n> 扫码登录是现在流行的登录方式，使用这种方式及其方便，而且安全 \n\n## 扫码登录流程\n\n![look.jpg](https://upload-images.jianshu.io/upload_images/538-623026f12e28b0fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/659)\n\n## 原理\n1. 获取唯一的uuid, 以及包含uid信息的二维码\n\n    ![wx-qrcode-getuuid.JPG](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-getuuid.JPG)\n```js\n    // 获取uuid\n    getUUID: function() {\n        var e = t.defer();\n        return window.QRLogin = {},\n        $.ajax({\n            url: i.API_jsLogin,\n            dataType: \"script\"\n        }).done(function() {\n            200 == window.QRLogin.code ? e.resolve(window.QRLogin.uuid) : e.reject(window.QRLogin.code)\n        }).fail(function() {\n            e.reject()\n        }),\n        e.promise\n    }\n```  \n\n2. 浏览器轮询服务器，获取扫码状态  \n\n```js\n// 查看扫码状态\ncheckLogin: function(e, a) {\n    var n = t.defer()\n        , a = a || 0;\n    return window.code = 0,\n    window.checkLoginPromise = $.ajax({\n        url: i.API_login + \"?loginicon=true&uuid=\" + e + \"&tip=\" + a + \"&r=\" + ~new Date,\n        dataType: \"script\",\n        timeout: 35e3\n    }).done(function() {\n        new RegExp(\"/\" + location.host + \"/\");\n        if (window.redirect_uri && window.redirect_uri.indexOf(\"/\" + location.host + \"/\") < 0)\n            return void (location.href = window.redirect_uri);\n        var e = {\n            code: window.code,\n            redirect_uri: window.redirect_uri,\n            userAvatar: window.userAvatar\n        };\n        n.resolve(e)\n    }).fail(function() {\n        n.reject()\n    }),\n    n.promise\n}\n```\n\n3. 根据服务器返回的扫码状态，进行相应的操作\n\n   - 408 扫码超时  如果手机没有扫码或没有授权登录，服务器会阻塞约25s，然后返回状态码 408 -> 前端继续轮询\n    ![wx-qrcode-408-25s.JPG](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-408-25s.JPG)\n    ![wx-qrcode-408.JPG](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-408.JPG)\n    - 400 二维码失效 大约5分钟的时间内不扫码，二维码失效\n    ![wx-qrcode-400.JPG](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-400.JPG)\n    - 201 已扫码  如果手机已经扫码，服务器立即返回状态码和用户的基本信息 （window.code=201,window.code.userAvator=\"...\"），-> 前端继续轮询  \n    ![wx-qrcode-201.JPG](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-201.JPG)\n    - 200 已授权 如果手机点击了确认登录，服务器返回200及token -> 前端停止轮询, 获取到token，重定向到目标页\n    ![wx-qrcode-200.JPG](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-200.JPG)\n\n\n```js\n// 根据服务器返回的扫码状态，进行相应的操作\nfunction o(c) {\n    switch (c.code) {\n    case 200:\n        t.newLoginPage(c.redirect_uri).then(function(t) {\n            var o = t.match(/<ret>(.*)<\\/ret>/)\n                , r = t.match(/<script>(.*)<\\/script>/)\n                , c = t.match(/<skey>(.*)<\\/skey>/)\n                , s = t.match(/<wxsid>(.*)<\\/wxsid>/)\n                , l = t.match(/<wxuin>(.*)<\\/wxuin>/)\n                , d = t.match(/<pass_ticket>(.*)<\\/pass_ticket>/)\n                , f = t.match(/<message>(.*)<\\/message>/)\n                , u = t.match(/<redirecturl>(.*)<\\/redirecturl>/);\n            return u ? void (window.location.href = u[1]) : o && \"0\" != o[1] ? (alert(f && f[1] || \"登陆失败\"),\n            i.report(i.AUTH_FAIL_COUNT, 1),\n            void location.reload()) : (e.$emit(\"newLoginPage\", {\n                Ret: o && o[1],\n                SKey: c && c[1],\n                Sid: s && s[1],\n                Uin: l && l[1],\n                Passticket: d && d[1],\n                Code: r\n            }),\n            void (a.getCookie(\"webwx_data_ticket\") || n.report(n.ReportType.cookieError, {\n                text: \"webwx_data_ticket 票据丢失\",\n                cookie: document.cookie\n            })))\n        });\n        break;\n    case 201:\n        e.isScan = !0,\n        n.report(n.ReportType.timing, {\n            timing: {\n                scan: Date.now()\n            }\n        }),\n        t.checkLogin(e.uuid).then(o, function(t) {\n            !t && window.checkLoginPromise && (e.isBrokenNetwork = !0)\n        });\n        break;\n    case 408:\n        t.checkLogin(e.uuid).then(o, function(t) {\n            !t && window.checkLoginPromise && (e.isBrokenNetwork = !0)\n        });\n        break;\n    case 400:\n    case 500:\n    case 0:\n        var s = a.getCookie(\"refreshTimes\") || 0;\n        s < 5 ? (s++,\n        a.setCookie(\"refreshTimes\", s, .5),\n        document.location.reload()) : e.isNeedRefresh = !0;\n        break;\n    case 202:\n        e.isScan = !1,\n        e.isAssociationLogin = !1,\n        a.setCookie(\"login_frequency\", 0, 2),\n        window.checkLoginPromise && (window.checkLoginPromise.abort(),\n        window.checkLoginPromise = null ),\n        r()\n    }\n    e.code = c.code,\n    e.userAvatar = c.userAvatar,\n    a.log(\"get code\", c.code)\n}\n```\n\n## 总结\n  - 轮询采用的是JSONP的形式，排除了跨域问题\n  - 轮询采用的后台根据扫码情况阻塞前台请求，优化轮询及减少前端的无效轮询\n  ","source":"_posts/微信扫码登录原理解析.md","raw":"---\ntitle: 微信扫码登录原理解析\ndate: 2018-07-03 18:16:26\ntags:\n---\n\n# 微信扫码登录原理解析\n\n> 扫码登录是现在流行的登录方式，使用这种方式及其方便，而且安全 \n\n## 扫码登录流程\n\n![look.jpg](https://upload-images.jianshu.io/upload_images/538-623026f12e28b0fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/659)\n\n## 原理\n1. 获取唯一的uuid, 以及包含uid信息的二维码\n\n    ![wx-qrcode-getuuid.JPG](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-getuuid.JPG)\n```js\n    // 获取uuid\n    getUUID: function() {\n        var e = t.defer();\n        return window.QRLogin = {},\n        $.ajax({\n            url: i.API_jsLogin,\n            dataType: \"script\"\n        }).done(function() {\n            200 == window.QRLogin.code ? e.resolve(window.QRLogin.uuid) : e.reject(window.QRLogin.code)\n        }).fail(function() {\n            e.reject()\n        }),\n        e.promise\n    }\n```  \n\n2. 浏览器轮询服务器，获取扫码状态  \n\n```js\n// 查看扫码状态\ncheckLogin: function(e, a) {\n    var n = t.defer()\n        , a = a || 0;\n    return window.code = 0,\n    window.checkLoginPromise = $.ajax({\n        url: i.API_login + \"?loginicon=true&uuid=\" + e + \"&tip=\" + a + \"&r=\" + ~new Date,\n        dataType: \"script\",\n        timeout: 35e3\n    }).done(function() {\n        new RegExp(\"/\" + location.host + \"/\");\n        if (window.redirect_uri && window.redirect_uri.indexOf(\"/\" + location.host + \"/\") < 0)\n            return void (location.href = window.redirect_uri);\n        var e = {\n            code: window.code,\n            redirect_uri: window.redirect_uri,\n            userAvatar: window.userAvatar\n        };\n        n.resolve(e)\n    }).fail(function() {\n        n.reject()\n    }),\n    n.promise\n}\n```\n\n3. 根据服务器返回的扫码状态，进行相应的操作\n\n   - 408 扫码超时  如果手机没有扫码或没有授权登录，服务器会阻塞约25s，然后返回状态码 408 -> 前端继续轮询\n    ![wx-qrcode-408-25s.JPG](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-408-25s.JPG)\n    ![wx-qrcode-408.JPG](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-408.JPG)\n    - 400 二维码失效 大约5分钟的时间内不扫码，二维码失效\n    ![wx-qrcode-400.JPG](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-400.JPG)\n    - 201 已扫码  如果手机已经扫码，服务器立即返回状态码和用户的基本信息 （window.code=201,window.code.userAvator=\"...\"），-> 前端继续轮询  \n    ![wx-qrcode-201.JPG](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-201.JPG)\n    - 200 已授权 如果手机点击了确认登录，服务器返回200及token -> 前端停止轮询, 获取到token，重定向到目标页\n    ![wx-qrcode-200.JPG](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-200.JPG)\n\n\n```js\n// 根据服务器返回的扫码状态，进行相应的操作\nfunction o(c) {\n    switch (c.code) {\n    case 200:\n        t.newLoginPage(c.redirect_uri).then(function(t) {\n            var o = t.match(/<ret>(.*)<\\/ret>/)\n                , r = t.match(/<script>(.*)<\\/script>/)\n                , c = t.match(/<skey>(.*)<\\/skey>/)\n                , s = t.match(/<wxsid>(.*)<\\/wxsid>/)\n                , l = t.match(/<wxuin>(.*)<\\/wxuin>/)\n                , d = t.match(/<pass_ticket>(.*)<\\/pass_ticket>/)\n                , f = t.match(/<message>(.*)<\\/message>/)\n                , u = t.match(/<redirecturl>(.*)<\\/redirecturl>/);\n            return u ? void (window.location.href = u[1]) : o && \"0\" != o[1] ? (alert(f && f[1] || \"登陆失败\"),\n            i.report(i.AUTH_FAIL_COUNT, 1),\n            void location.reload()) : (e.$emit(\"newLoginPage\", {\n                Ret: o && o[1],\n                SKey: c && c[1],\n                Sid: s && s[1],\n                Uin: l && l[1],\n                Passticket: d && d[1],\n                Code: r\n            }),\n            void (a.getCookie(\"webwx_data_ticket\") || n.report(n.ReportType.cookieError, {\n                text: \"webwx_data_ticket 票据丢失\",\n                cookie: document.cookie\n            })))\n        });\n        break;\n    case 201:\n        e.isScan = !0,\n        n.report(n.ReportType.timing, {\n            timing: {\n                scan: Date.now()\n            }\n        }),\n        t.checkLogin(e.uuid).then(o, function(t) {\n            !t && window.checkLoginPromise && (e.isBrokenNetwork = !0)\n        });\n        break;\n    case 408:\n        t.checkLogin(e.uuid).then(o, function(t) {\n            !t && window.checkLoginPromise && (e.isBrokenNetwork = !0)\n        });\n        break;\n    case 400:\n    case 500:\n    case 0:\n        var s = a.getCookie(\"refreshTimes\") || 0;\n        s < 5 ? (s++,\n        a.setCookie(\"refreshTimes\", s, .5),\n        document.location.reload()) : e.isNeedRefresh = !0;\n        break;\n    case 202:\n        e.isScan = !1,\n        e.isAssociationLogin = !1,\n        a.setCookie(\"login_frequency\", 0, 2),\n        window.checkLoginPromise && (window.checkLoginPromise.abort(),\n        window.checkLoginPromise = null ),\n        r()\n    }\n    e.code = c.code,\n    e.userAvatar = c.userAvatar,\n    a.log(\"get code\", c.code)\n}\n```\n\n## 总结\n  - 轮询采用的是JSONP的形式，排除了跨域问题\n  - 轮询采用的后台根据扫码情况阻塞前台请求，优化轮询及减少前端的无效轮询\n  ","slug":"微信扫码登录原理解析","published":1,"updated":"2019-04-25T09:01:12.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaujs000eaeyyv8713opx","content":"<h1 id=\"微信扫码登录原理解析\"><a href=\"#微信扫码登录原理解析\" class=\"headerlink\" title=\"微信扫码登录原理解析\"></a>微信扫码登录原理解析</h1><blockquote>\n<p>扫码登录是现在流行的登录方式，使用这种方式及其方便，而且安全 </p>\n</blockquote>\n<h2 id=\"扫码登录流程\"><a href=\"#扫码登录流程\" class=\"headerlink\" title=\"扫码登录流程\"></a>扫码登录流程</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://upload-images.jianshu.io/upload_images/538-623026f12e28b0fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/659\" alt=\"look.jpg\" title=\"\">\n                </div>\n                <div class=\"image-caption\">look.jpg</div>\n            </figure>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ol>\n<li><p>获取唯一的uuid, 以及包含uid信息的二维码</p>\n<p> <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-getuuid.JPG\" alt=\"wx-qrcode-getuuid.JPG\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 获取uuid</span></span><br><span class=\"line\">    getUUID: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = t.defer();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.QRLogin = &#123;&#125;,</span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">            url: i.API_jsLogin,</span><br><span class=\"line\">            dataType: <span class=\"string\">\"script\"</span></span><br><span class=\"line\">        &#125;).done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"number\">200</span> == <span class=\"built_in\">window</span>.QRLogin.code ? e.resolve(<span class=\"built_in\">window</span>.QRLogin.uuid) : e.reject(<span class=\"built_in\">window</span>.QRLogin.code)</span><br><span class=\"line\">        &#125;).fail(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            e.reject()</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        e.promise</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2. 浏览器轮询服务器，获取扫码状态  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"comment\">// 查看扫码状态</span></span><br><span class=\"line\">checkLogin: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = t.defer()</span><br><span class=\"line\">        , a = a || <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.code = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.checkLoginPromise = $.ajax(&#123;</span><br><span class=\"line\">        url: i.API_login + <span class=\"string\">\"?loginicon=true&amp;uuid=\"</span> + e + <span class=\"string\">\"&amp;tip=\"</span> + a + <span class=\"string\">\"&amp;r=\"</span> + ~<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>,</span><br><span class=\"line\">        dataType: <span class=\"string\">\"script\"</span>,</span><br><span class=\"line\">        timeout: <span class=\"number\">35e3</span></span><br><span class=\"line\">    &#125;).done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"/\"</span> + location.host + <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.redirect_uri &amp;&amp; <span class=\"built_in\">window</span>.redirect_uri.indexOf(<span class=\"string\">\"/\"</span> + location.host + <span class=\"string\">\"/\"</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">void</span> (location.href = <span class=\"built_in\">window</span>.redirect_uri);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = &#123;</span><br><span class=\"line\">            code: <span class=\"built_in\">window</span>.code,</span><br><span class=\"line\">            redirect_uri: <span class=\"built_in\">window</span>.redirect_uri,</span><br><span class=\"line\">            userAvatar: <span class=\"built_in\">window</span>.userAvatar</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        n.resolve(e)</span><br><span class=\"line\">    &#125;).fail(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        n.reject()</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    n.promise</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据服务器返回的扫码状态，进行相应的操作</p>\n<ul>\n<li>408 扫码超时  如果手机没有扫码或没有授权登录，服务器会阻塞约25s，然后返回状态码 408 -&gt; 前端继续轮询<br><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-408-25s.JPG\" alt=\"wx-qrcode-408-25s.JPG\"><br><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-408.JPG\" alt=\"wx-qrcode-408.JPG\"><ul>\n<li>400 二维码失效 大约5分钟的时间内不扫码，二维码失效<br><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-400.JPG\" alt=\"wx-qrcode-400.JPG\"></li>\n<li>201 已扫码  如果手机已经扫码，服务器立即返回状态码和用户的基本信息 （window.code=201,window.code.userAvator=”…”），-&gt; 前端继续轮询<br><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-201.JPG\" alt=\"wx-qrcode-201.JPG\"></li>\n<li>200 已授权 如果手机点击了确认登录，服务器返回200及token -&gt; 前端停止轮询, 获取到token，重定向到目标页<br><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-200.JPG\" alt=\"wx-qrcode-200.JPG\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据服务器返回的扫码状态，进行相应的操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">o</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (c.code) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">200</span>:</span><br><span class=\"line\">        t.newLoginPage(c.redirect_uri).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> o = t.match(<span class=\"regexp\">/&lt;ret&gt;(.*)&lt;\\/ret&gt;/</span>)</span><br><span class=\"line\">                , r = t.match(<span class=\"regexp\">/&lt;script&gt;(.*)&lt;\\/script&gt;/</span>)</span><br><span class=\"line\">                , c = t.match(<span class=\"regexp\">/&lt;skey&gt;(.*)&lt;\\/skey&gt;/</span>)</span><br><span class=\"line\">                , s = t.match(<span class=\"regexp\">/&lt;wxsid&gt;(.*)&lt;\\/wxsid&gt;/</span>)</span><br><span class=\"line\">                , l = t.match(<span class=\"regexp\">/&lt;wxuin&gt;(.*)&lt;\\/wxuin&gt;/</span>)</span><br><span class=\"line\">                , d = t.match(<span class=\"regexp\">/&lt;pass_ticket&gt;(.*)&lt;\\/pass_ticket&gt;/</span>)</span><br><span class=\"line\">                , f = t.match(<span class=\"regexp\">/&lt;message&gt;(.*)&lt;\\/message&gt;/</span>)</span><br><span class=\"line\">                , u = t.match(<span class=\"regexp\">/&lt;redirecturl&gt;(.*)&lt;\\/redirecturl&gt;/</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> u ? <span class=\"keyword\">void</span> (<span class=\"built_in\">window</span>.location.href = u[<span class=\"number\">1</span>]) : o &amp;&amp; <span class=\"string\">\"0\"</span> != o[<span class=\"number\">1</span>] ? (alert(f &amp;&amp; f[<span class=\"number\">1</span>] || <span class=\"string\">\"登陆失败\"</span>),</span><br><span class=\"line\">            i.report(i.AUTH_FAIL_COUNT, <span class=\"number\">1</span>),</span><br><span class=\"line\">            <span class=\"keyword\">void</span> location.reload()) : (e.$emit(<span class=\"string\">\"newLoginPage\"</span>, &#123;</span><br><span class=\"line\">                Ret: o &amp;&amp; o[<span class=\"number\">1</span>],</span><br><span class=\"line\">                SKey: c &amp;&amp; c[<span class=\"number\">1</span>],</span><br><span class=\"line\">                Sid: s &amp;&amp; s[<span class=\"number\">1</span>],</span><br><span class=\"line\">                Uin: l &amp;&amp; l[<span class=\"number\">1</span>],</span><br><span class=\"line\">                Passticket: d &amp;&amp; d[<span class=\"number\">1</span>],</span><br><span class=\"line\">                Code: r</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            <span class=\"keyword\">void</span> (a.getCookie(<span class=\"string\">\"webwx_data_ticket\"</span>) || n.report(n.ReportType.cookieError, &#123;</span><br><span class=\"line\">                text: <span class=\"string\">\"webwx_data_ticket 票据丢失\"</span>,</span><br><span class=\"line\">                cookie: <span class=\"built_in\">document</span>.cookie</span><br><span class=\"line\">            &#125;)))</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">201</span>:</span><br><span class=\"line\">        e.isScan = !<span class=\"number\">0</span>,</span><br><span class=\"line\">        n.report(n.ReportType.timing, &#123;</span><br><span class=\"line\">            timing: &#123;</span><br><span class=\"line\">                scan: <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        t.checkLogin(e.uuid).then(o, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\">            !t &amp;&amp; <span class=\"built_in\">window</span>.checkLoginPromise &amp;&amp; (e.isBrokenNetwork = !<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">408</span>:</span><br><span class=\"line\">        t.checkLogin(e.uuid).then(o, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\">            !t &amp;&amp; <span class=\"built_in\">window</span>.checkLoginPromise &amp;&amp; (e.isBrokenNetwork = !<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">400</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = a.getCookie(<span class=\"string\">\"refreshTimes\"</span>) || <span class=\"number\">0</span>;</span><br><span class=\"line\">        s &lt; <span class=\"number\">5</span> ? (s++,</span><br><span class=\"line\">        a.setCookie(<span class=\"string\">\"refreshTimes\"</span>, s, <span class=\"number\">.5</span>),</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.location.reload()) : e.isNeedRefresh = !<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">202</span>:</span><br><span class=\"line\">        e.isScan = !<span class=\"number\">1</span>,</span><br><span class=\"line\">        e.isAssociationLogin = !<span class=\"number\">1</span>,</span><br><span class=\"line\">        a.setCookie(<span class=\"string\">\"login_frequency\"</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.checkLoginPromise &amp;&amp; (<span class=\"built_in\">window</span>.checkLoginPromise.abort(),</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.checkLoginPromise = <span class=\"literal\">null</span> ),</span><br><span class=\"line\">        r()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    e.code = c.code,</span><br><span class=\"line\">    e.userAvatar = c.userAvatar,</span><br><span class=\"line\">    a.log(<span class=\"string\">\"get code\"</span>, c.code)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>轮询采用的是JSONP的形式，排除了跨域问题</li>\n<li>轮询采用的后台根据扫码情况阻塞前台请求，优化轮询及减少前端的无效轮询</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"微信扫码登录原理解析\"><a href=\"#微信扫码登录原理解析\" class=\"headerlink\" title=\"微信扫码登录原理解析\"></a>微信扫码登录原理解析</h1><blockquote>\n<p>扫码登录是现在流行的登录方式，使用这种方式及其方便，而且安全 </p>\n</blockquote>\n<h2 id=\"扫码登录流程\"><a href=\"#扫码登录流程\" class=\"headerlink\" title=\"扫码登录流程\"></a>扫码登录流程</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://upload-images.jianshu.io/upload_images/538-623026f12e28b0fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/659\" alt=\"look.jpg\" title=\"\">\n                </div>\n                <div class=\"image-caption\">look.jpg</div>\n            </figure>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ol>\n<li><p>获取唯一的uuid, 以及包含uid信息的二维码</p>\n<p> <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-getuuid.JPG\" alt=\"wx-qrcode-getuuid.JPG\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 获取uuid</span></span><br><span class=\"line\">    getUUID: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = t.defer();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.QRLogin = &#123;&#125;,</span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">            url: i.API_jsLogin,</span><br><span class=\"line\">            dataType: <span class=\"string\">\"script\"</span></span><br><span class=\"line\">        &#125;).done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"number\">200</span> == <span class=\"built_in\">window</span>.QRLogin.code ? e.resolve(<span class=\"built_in\">window</span>.QRLogin.uuid) : e.reject(<span class=\"built_in\">window</span>.QRLogin.code)</span><br><span class=\"line\">        &#125;).fail(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            e.reject()</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        e.promise</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2. 浏览器轮询服务器，获取扫码状态  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"comment\">// 查看扫码状态</span></span><br><span class=\"line\">checkLogin: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = t.defer()</span><br><span class=\"line\">        , a = a || <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.code = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.checkLoginPromise = $.ajax(&#123;</span><br><span class=\"line\">        url: i.API_login + <span class=\"string\">\"?loginicon=true&amp;uuid=\"</span> + e + <span class=\"string\">\"&amp;tip=\"</span> + a + <span class=\"string\">\"&amp;r=\"</span> + ~<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>,</span><br><span class=\"line\">        dataType: <span class=\"string\">\"script\"</span>,</span><br><span class=\"line\">        timeout: <span class=\"number\">35e3</span></span><br><span class=\"line\">    &#125;).done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"/\"</span> + location.host + <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.redirect_uri &amp;&amp; <span class=\"built_in\">window</span>.redirect_uri.indexOf(<span class=\"string\">\"/\"</span> + location.host + <span class=\"string\">\"/\"</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">void</span> (location.href = <span class=\"built_in\">window</span>.redirect_uri);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = &#123;</span><br><span class=\"line\">            code: <span class=\"built_in\">window</span>.code,</span><br><span class=\"line\">            redirect_uri: <span class=\"built_in\">window</span>.redirect_uri,</span><br><span class=\"line\">            userAvatar: <span class=\"built_in\">window</span>.userAvatar</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        n.resolve(e)</span><br><span class=\"line\">    &#125;).fail(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        n.reject()</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    n.promise</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据服务器返回的扫码状态，进行相应的操作</p>\n<ul>\n<li>408 扫码超时  如果手机没有扫码或没有授权登录，服务器会阻塞约25s，然后返回状态码 408 -&gt; 前端继续轮询<br><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-408-25s.JPG\" alt=\"wx-qrcode-408-25s.JPG\"><br><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-408.JPG\" alt=\"wx-qrcode-408.JPG\"><ul>\n<li>400 二维码失效 大约5分钟的时间内不扫码，二维码失效<br><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-400.JPG\" alt=\"wx-qrcode-400.JPG\"></li>\n<li>201 已扫码  如果手机已经扫码，服务器立即返回状态码和用户的基本信息 （window.code=201,window.code.userAvator=”…”），-&gt; 前端继续轮询<br><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-201.JPG\" alt=\"wx-qrcode-201.JPG\"></li>\n<li>200 已授权 如果手机点击了确认登录，服务器返回200及token -&gt; 前端停止轮询, 获取到token，重定向到目标页<br><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/wx-qrcode-200.JPG\" alt=\"wx-qrcode-200.JPG\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据服务器返回的扫码状态，进行相应的操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">o</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (c.code) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">200</span>:</span><br><span class=\"line\">        t.newLoginPage(c.redirect_uri).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> o = t.match(<span class=\"regexp\">/&lt;ret&gt;(.*)&lt;\\/ret&gt;/</span>)</span><br><span class=\"line\">                , r = t.match(<span class=\"regexp\">/&lt;script&gt;(.*)&lt;\\/script&gt;/</span>)</span><br><span class=\"line\">                , c = t.match(<span class=\"regexp\">/&lt;skey&gt;(.*)&lt;\\/skey&gt;/</span>)</span><br><span class=\"line\">                , s = t.match(<span class=\"regexp\">/&lt;wxsid&gt;(.*)&lt;\\/wxsid&gt;/</span>)</span><br><span class=\"line\">                , l = t.match(<span class=\"regexp\">/&lt;wxuin&gt;(.*)&lt;\\/wxuin&gt;/</span>)</span><br><span class=\"line\">                , d = t.match(<span class=\"regexp\">/&lt;pass_ticket&gt;(.*)&lt;\\/pass_ticket&gt;/</span>)</span><br><span class=\"line\">                , f = t.match(<span class=\"regexp\">/&lt;message&gt;(.*)&lt;\\/message&gt;/</span>)</span><br><span class=\"line\">                , u = t.match(<span class=\"regexp\">/&lt;redirecturl&gt;(.*)&lt;\\/redirecturl&gt;/</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> u ? <span class=\"keyword\">void</span> (<span class=\"built_in\">window</span>.location.href = u[<span class=\"number\">1</span>]) : o &amp;&amp; <span class=\"string\">\"0\"</span> != o[<span class=\"number\">1</span>] ? (alert(f &amp;&amp; f[<span class=\"number\">1</span>] || <span class=\"string\">\"登陆失败\"</span>),</span><br><span class=\"line\">            i.report(i.AUTH_FAIL_COUNT, <span class=\"number\">1</span>),</span><br><span class=\"line\">            <span class=\"keyword\">void</span> location.reload()) : (e.$emit(<span class=\"string\">\"newLoginPage\"</span>, &#123;</span><br><span class=\"line\">                Ret: o &amp;&amp; o[<span class=\"number\">1</span>],</span><br><span class=\"line\">                SKey: c &amp;&amp; c[<span class=\"number\">1</span>],</span><br><span class=\"line\">                Sid: s &amp;&amp; s[<span class=\"number\">1</span>],</span><br><span class=\"line\">                Uin: l &amp;&amp; l[<span class=\"number\">1</span>],</span><br><span class=\"line\">                Passticket: d &amp;&amp; d[<span class=\"number\">1</span>],</span><br><span class=\"line\">                Code: r</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            <span class=\"keyword\">void</span> (a.getCookie(<span class=\"string\">\"webwx_data_ticket\"</span>) || n.report(n.ReportType.cookieError, &#123;</span><br><span class=\"line\">                text: <span class=\"string\">\"webwx_data_ticket 票据丢失\"</span>,</span><br><span class=\"line\">                cookie: <span class=\"built_in\">document</span>.cookie</span><br><span class=\"line\">            &#125;)))</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">201</span>:</span><br><span class=\"line\">        e.isScan = !<span class=\"number\">0</span>,</span><br><span class=\"line\">        n.report(n.ReportType.timing, &#123;</span><br><span class=\"line\">            timing: &#123;</span><br><span class=\"line\">                scan: <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        t.checkLogin(e.uuid).then(o, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\">            !t &amp;&amp; <span class=\"built_in\">window</span>.checkLoginPromise &amp;&amp; (e.isBrokenNetwork = !<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">408</span>:</span><br><span class=\"line\">        t.checkLogin(e.uuid).then(o, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\">            !t &amp;&amp; <span class=\"built_in\">window</span>.checkLoginPromise &amp;&amp; (e.isBrokenNetwork = !<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">400</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = a.getCookie(<span class=\"string\">\"refreshTimes\"</span>) || <span class=\"number\">0</span>;</span><br><span class=\"line\">        s &lt; <span class=\"number\">5</span> ? (s++,</span><br><span class=\"line\">        a.setCookie(<span class=\"string\">\"refreshTimes\"</span>, s, <span class=\"number\">.5</span>),</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.location.reload()) : e.isNeedRefresh = !<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">202</span>:</span><br><span class=\"line\">        e.isScan = !<span class=\"number\">1</span>,</span><br><span class=\"line\">        e.isAssociationLogin = !<span class=\"number\">1</span>,</span><br><span class=\"line\">        a.setCookie(<span class=\"string\">\"login_frequency\"</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.checkLoginPromise &amp;&amp; (<span class=\"built_in\">window</span>.checkLoginPromise.abort(),</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.checkLoginPromise = <span class=\"literal\">null</span> ),</span><br><span class=\"line\">        r()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    e.code = c.code,</span><br><span class=\"line\">    e.userAvatar = c.userAvatar,</span><br><span class=\"line\">    a.log(<span class=\"string\">\"get code\"</span>, c.code)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>轮询采用的是JSONP的形式，排除了跨域问题</li>\n<li>轮询采用的后台根据扫码情况阻塞前台请求，优化轮询及减少前端的无效轮询</li>\n</ul>\n"},{"title":"快速构建一个 react 插件","date":"2019-01-04T07:21:36.000Z","_content":"\n### 前言\n一般情况下，我们写 React 项目，用 create-react-app 脚手架开发比较方便，但是如果要写一个插件的话，用三方脚手架就显得有点臃肿了，我们可以自己配置一个符合我们开发的简单工具，本文教你如何一步一步开发一个\nReact 插件 ，let's start  😊\n\n### 准备工作\n\n工欲善其事，必先利其器，我们来选型\n\n- Typescript  \n\n为了方便开发，我们选用 Typescript 作为开发语言，可以即时类型检查，顺便还能装逼（巨硬大法好），\n> 注：\nTypescript 可选的，你也可以选择 js 刀耕火种，不过最好还是用 Typescript 写吧，毕竟9102年了，骚年 😄\n\n- webpack + babel\n\n这里先用我们熟悉的 webpack 作为打包工具（之后会尝试改成 rollup 作为打包工具）\n\n- jest + travis + coveralls\n\njest 作为我们代码测试的工具,这里选用 travis ，一个在线持续集成的工具（帮助你打包、构建、运行scripts命令、代码测试等）\n选用 coveralls 可以根据 travis 代码测试后生成的代码覆盖率生成 badge（Github 好多项目都有的）  \n![Build Status](https://user-gold-cdn.xitu.io/2019/1/8/1682db589e80f715?w=90&h=20&f=svg&s=724)\n\n### 目录结构\n\n下面我们来大体组织下目录结构\n```\nreact-yan-progress\n├── build                                 // 打包目录\n│   └── YanProgress.min.js\n├── src                                   // 源码\n│   ├── index.css\n│   └── index.tsx\n├── test                                  // 测试文件\n│   └── YanProgress.test.js\n├── index.d.ts                            // 声明文件（ts）\n├── jest.config.js                        // jest 测试配置文件\n├── webpack.config.js                     // webpack 配置文件\n├── tsconfig.json                         // ts 配置文件\n├── package.json\n├── .travis.yml                           // travis 配置文件\n├── LICENSE \n└── README.md\n```\n\n### 开发者选项\n\n所有的依赖的包如下\n\n```js\n{\n    \"devDependencies\": {\n        \"@babel/core\": \"^7.1.6\",\n        \"@babel/preset-env\": \"^7.1.6\", \n        \"@babel/preset-react\": \"^7.0.0\", // for react\n        \"@types/react\": \"^16.7.18\", // 声明文件\n        \"@types/react-dom\": \"^16.0.11\", // 声明文件\n        \"babel-loader\": \"^8.0.4\",\n        \"chai\": \"^4.2.0\", // 测试断言库\n        \"coveralls\": \"^3.0.2\", // 代码覆盖率\n        \"css-loader\": \"^1.0.1\", \n        \"jest\": \"^23.6.0\", // 测试工具\n        \"react\": \"^16.7.0\",\n        \"react-dom\": \"^16.7.0\",\n        \"style-loader\": \"^0.23.1\",\n        \"ts-loader\": \"^5.3.2\", // 解析 ts \n        \"typescript\": \"^3.2.2\", // 解析 ts\n        \"webpack\": \"^4.25.1\",\n        \"webpack-cli\": \"^3.1.2\"\n    }      \n}\n```\n\n命令配置如下，详情 `package.json`\n```json\n{\n    \"scripts\": {\n        \"build\": \"webpack --config webpack.config.js --progress --colors\",\n        \"test\": \"jest ./test/YanProgress.test.js\",\n        \"coveralls\": \"cat ./coverage/lcov.info | coveralls\"\n    },\n}\n\n```\n\n### webpack 配置\n\n我们采用 webpack4 ,具体配置请看官网，[传送门](https://webpack.js.org/concepts/)\n```js\nconst path = require('path');\n\nmodule.exports = {\n\tmode: \"production\", // 生产模式\n\tentry: { // 入口\n\t\t\"YanProgress\": path.resolve(__dirname, './src/index.tsx')\n\t},\n\toutput: { // 出口\n\t\tpath: path.resolve(__dirname, './build'),\n\t\tfilename: '[name].min.js',\n\t\tpublicPath: \"./build/\",\n\t\tlibraryTarget: 'commonjs2', // 注意这里按 commonjs2 模块规范打包\n\t},\n\tmodule: {\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.tsx?$/,\n\t\t\t\tuse: [\n\t\t\t\t\t{\n\t\t\t\t\t\tloader: 'babel-loader',\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tpresets: ['@babel/preset-env', \"@babel/preset-react\"]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tloader: 'ts-loader', // 解析 ts\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinclude: path.resolve(__dirname, \"./src/\"), // 只解析 src 目录下的文件\n\t\t\t},\n\t\t\t{\n\n\t\t\t\ttest: /\\.css$/,\n\t\t\t\tloader: \"style-loader!css-loader?modules&localIdentName=[hash:8]\", // css_modules 配置详情  http://www.ruanyifeng.com/blog/2016/06/css_modules.html\n\t\t\t\tinclude: path.resolve(__dirname, \"./src/\"),\n\t\t\t}\n\t\t]\n\t},\n\tresolve: { // 省略文件后缀时，默认按下面的配置取\n\t\textensions: ['.ts', '.tsx', '.js'],\n\t},\n\texternals: { // 不把 react 打包进去\n\t\treact: 'react'\n\t}\n};\n```\n\n### 【选读】Typescript 配置\n\n由于我们要在 ts 文件中 引入 css 模块，但是 ts 不认识，所以我们需要进行如下配置\n\n在项目的根目录下新建一个 `index.d.ts` ts 声明文件\n\n```ts\ndeclare module '*.css';\n```\n\n### 开始编写插件\n\n这里就是与平常的开发组件一样，举个例子\n\n```js\n// jsx\nimport React from 'react';\n\nclass YanProgress extends React.Component{\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t骚年，写代码快乐吗，看我干嘛 😄，赶快滚去写代码啊，别忘了点个 star 😂\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default YanProgress; // 记得导出啊，骚年\n```\n\n你可以直接看我写好的代码（然后 ctrl+c,ctrl+v），源码在这里，[点我](https://github.com/Yangfan2016/react-yan-progress/tree/master)\n\n\n### 安装依赖及代码压缩打包\n\nwebpack4 默认会压缩代码，so 我们直接执行刚才 package.json 配置好的 scripts 的命令\n\n\n```bash\n$ yarn\n$ yarn run build\n```\n\n### 代码测试\n- 单元测试  \n\t可以在 `test` 目录下新建一个 `xxx.test.js` 的测试文件，写好测试用例（这里使用的是 chai 断言库的 expect 风格），执行如下命令\n\n\t```bash\n\t$ yarn run test\n\t```\n\n- 包测试  \n\t如果你也想以 npm 包的形式引入（`import YanProgress from 'react-yan-progress'`），测试的话，可以执行如下命令  \n\n\t在你的项目根目录下，打开终端运行如下命令，建立链接\n\t```bash\n\t$ yarn link\n\t```\n\t在你要测试的 demo 项目根目录下，执行如下，然后你就可以这样使用了 `import YanProgress from 'react-yan-progress'`\n\t```bash\n\t$ yarn link react-yan-progress\n\t```\n\n### 持续集成\n\n这里用到比较方便简单的 travis 在线测试工具，和测试代码覆盖率工具 coveralls，网址如下：  \n持续集成 https://travis-ci.org  \n代码覆盖率  https://coveralls.io  \n\n注册使用过程就略过了，毕竟已经有很多教程了（面向谷歌编程 😂）\n\n在项目根目录下新建一个 `.travis.yml` 文件，配置如下\n\n```yml\nlanguage: node_js # 运行环境\nnode_js:\n  - \"10.6.0\" # 版本\nbranches:\n  only:\n  - master # 只有主支可以\nbefore_install:\n    - export TZ='Asia/Shanghai' # 如果你的项目里涉及到时间处理，这里需要设置时区\ninstall: yarn install # 安装 npm 包\nscript: # 执行命令\n  - yarn run build # 打包\n  - yarn run test # 测试\nafter_success: # 成功之后执行如下命令\n  - yarn run coveralls # 测试代码覆盖率\n```\n\n### 发布 npm 包\n\n注册 npm 账号，注册过程略  \n> 注意之前，先去 npm 官网找一下，你的包名有木有被抢先占用了\n\n执行如下命令进行发布\n```bash\n$ npm publish\n```\n\n升级包  \n执行如下命令（x.x.x  -> major.minor.patch）\n```bash\n$ npm version patch\n```\n\n### 开源贡献\n\n拥抱开源，这样才能让社区，乃至行业发展更有动力\n> 注：例如，你的 star 是对我最大的鼓励，是支持我继续开源的动力\n\n- React-componets 社区 [awesome-react-components](https://github.com/brillout/awesome-react-components)\n- 其他社区，可以到 `Github` 探索\n\n### 完结撒花🎉\n\n👏 欢迎大家一起和我搞 ji（[Github](https://github.com/Yangfan2016)）😊 \n\n- 项目地址 https://github.com/Yangfan2016/react-yan-progress#react-yan-progress  \n- 博客原文 https://yangfan2016.github.io","source":"_posts/快速构建一个-react-插件.md","raw":"---\ntitle: 快速构建一个 react 插件\ndate: 2019-01-04 15:21:36\ntags:\n---\n\n### 前言\n一般情况下，我们写 React 项目，用 create-react-app 脚手架开发比较方便，但是如果要写一个插件的话，用三方脚手架就显得有点臃肿了，我们可以自己配置一个符合我们开发的简单工具，本文教你如何一步一步开发一个\nReact 插件 ，let's start  😊\n\n### 准备工作\n\n工欲善其事，必先利其器，我们来选型\n\n- Typescript  \n\n为了方便开发，我们选用 Typescript 作为开发语言，可以即时类型检查，顺便还能装逼（巨硬大法好），\n> 注：\nTypescript 可选的，你也可以选择 js 刀耕火种，不过最好还是用 Typescript 写吧，毕竟9102年了，骚年 😄\n\n- webpack + babel\n\n这里先用我们熟悉的 webpack 作为打包工具（之后会尝试改成 rollup 作为打包工具）\n\n- jest + travis + coveralls\n\njest 作为我们代码测试的工具,这里选用 travis ，一个在线持续集成的工具（帮助你打包、构建、运行scripts命令、代码测试等）\n选用 coveralls 可以根据 travis 代码测试后生成的代码覆盖率生成 badge（Github 好多项目都有的）  \n![Build Status](https://user-gold-cdn.xitu.io/2019/1/8/1682db589e80f715?w=90&h=20&f=svg&s=724)\n\n### 目录结构\n\n下面我们来大体组织下目录结构\n```\nreact-yan-progress\n├── build                                 // 打包目录\n│   └── YanProgress.min.js\n├── src                                   // 源码\n│   ├── index.css\n│   └── index.tsx\n├── test                                  // 测试文件\n│   └── YanProgress.test.js\n├── index.d.ts                            // 声明文件（ts）\n├── jest.config.js                        // jest 测试配置文件\n├── webpack.config.js                     // webpack 配置文件\n├── tsconfig.json                         // ts 配置文件\n├── package.json\n├── .travis.yml                           // travis 配置文件\n├── LICENSE \n└── README.md\n```\n\n### 开发者选项\n\n所有的依赖的包如下\n\n```js\n{\n    \"devDependencies\": {\n        \"@babel/core\": \"^7.1.6\",\n        \"@babel/preset-env\": \"^7.1.6\", \n        \"@babel/preset-react\": \"^7.0.0\", // for react\n        \"@types/react\": \"^16.7.18\", // 声明文件\n        \"@types/react-dom\": \"^16.0.11\", // 声明文件\n        \"babel-loader\": \"^8.0.4\",\n        \"chai\": \"^4.2.0\", // 测试断言库\n        \"coveralls\": \"^3.0.2\", // 代码覆盖率\n        \"css-loader\": \"^1.0.1\", \n        \"jest\": \"^23.6.0\", // 测试工具\n        \"react\": \"^16.7.0\",\n        \"react-dom\": \"^16.7.0\",\n        \"style-loader\": \"^0.23.1\",\n        \"ts-loader\": \"^5.3.2\", // 解析 ts \n        \"typescript\": \"^3.2.2\", // 解析 ts\n        \"webpack\": \"^4.25.1\",\n        \"webpack-cli\": \"^3.1.2\"\n    }      \n}\n```\n\n命令配置如下，详情 `package.json`\n```json\n{\n    \"scripts\": {\n        \"build\": \"webpack --config webpack.config.js --progress --colors\",\n        \"test\": \"jest ./test/YanProgress.test.js\",\n        \"coveralls\": \"cat ./coverage/lcov.info | coveralls\"\n    },\n}\n\n```\n\n### webpack 配置\n\n我们采用 webpack4 ,具体配置请看官网，[传送门](https://webpack.js.org/concepts/)\n```js\nconst path = require('path');\n\nmodule.exports = {\n\tmode: \"production\", // 生产模式\n\tentry: { // 入口\n\t\t\"YanProgress\": path.resolve(__dirname, './src/index.tsx')\n\t},\n\toutput: { // 出口\n\t\tpath: path.resolve(__dirname, './build'),\n\t\tfilename: '[name].min.js',\n\t\tpublicPath: \"./build/\",\n\t\tlibraryTarget: 'commonjs2', // 注意这里按 commonjs2 模块规范打包\n\t},\n\tmodule: {\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.tsx?$/,\n\t\t\t\tuse: [\n\t\t\t\t\t{\n\t\t\t\t\t\tloader: 'babel-loader',\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tpresets: ['@babel/preset-env', \"@babel/preset-react\"]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tloader: 'ts-loader', // 解析 ts\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinclude: path.resolve(__dirname, \"./src/\"), // 只解析 src 目录下的文件\n\t\t\t},\n\t\t\t{\n\n\t\t\t\ttest: /\\.css$/,\n\t\t\t\tloader: \"style-loader!css-loader?modules&localIdentName=[hash:8]\", // css_modules 配置详情  http://www.ruanyifeng.com/blog/2016/06/css_modules.html\n\t\t\t\tinclude: path.resolve(__dirname, \"./src/\"),\n\t\t\t}\n\t\t]\n\t},\n\tresolve: { // 省略文件后缀时，默认按下面的配置取\n\t\textensions: ['.ts', '.tsx', '.js'],\n\t},\n\texternals: { // 不把 react 打包进去\n\t\treact: 'react'\n\t}\n};\n```\n\n### 【选读】Typescript 配置\n\n由于我们要在 ts 文件中 引入 css 模块，但是 ts 不认识，所以我们需要进行如下配置\n\n在项目的根目录下新建一个 `index.d.ts` ts 声明文件\n\n```ts\ndeclare module '*.css';\n```\n\n### 开始编写插件\n\n这里就是与平常的开发组件一样，举个例子\n\n```js\n// jsx\nimport React from 'react';\n\nclass YanProgress extends React.Component{\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t骚年，写代码快乐吗，看我干嘛 😄，赶快滚去写代码啊，别忘了点个 star 😂\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default YanProgress; // 记得导出啊，骚年\n```\n\n你可以直接看我写好的代码（然后 ctrl+c,ctrl+v），源码在这里，[点我](https://github.com/Yangfan2016/react-yan-progress/tree/master)\n\n\n### 安装依赖及代码压缩打包\n\nwebpack4 默认会压缩代码，so 我们直接执行刚才 package.json 配置好的 scripts 的命令\n\n\n```bash\n$ yarn\n$ yarn run build\n```\n\n### 代码测试\n- 单元测试  \n\t可以在 `test` 目录下新建一个 `xxx.test.js` 的测试文件，写好测试用例（这里使用的是 chai 断言库的 expect 风格），执行如下命令\n\n\t```bash\n\t$ yarn run test\n\t```\n\n- 包测试  \n\t如果你也想以 npm 包的形式引入（`import YanProgress from 'react-yan-progress'`），测试的话，可以执行如下命令  \n\n\t在你的项目根目录下，打开终端运行如下命令，建立链接\n\t```bash\n\t$ yarn link\n\t```\n\t在你要测试的 demo 项目根目录下，执行如下，然后你就可以这样使用了 `import YanProgress from 'react-yan-progress'`\n\t```bash\n\t$ yarn link react-yan-progress\n\t```\n\n### 持续集成\n\n这里用到比较方便简单的 travis 在线测试工具，和测试代码覆盖率工具 coveralls，网址如下：  \n持续集成 https://travis-ci.org  \n代码覆盖率  https://coveralls.io  \n\n注册使用过程就略过了，毕竟已经有很多教程了（面向谷歌编程 😂）\n\n在项目根目录下新建一个 `.travis.yml` 文件，配置如下\n\n```yml\nlanguage: node_js # 运行环境\nnode_js:\n  - \"10.6.0\" # 版本\nbranches:\n  only:\n  - master # 只有主支可以\nbefore_install:\n    - export TZ='Asia/Shanghai' # 如果你的项目里涉及到时间处理，这里需要设置时区\ninstall: yarn install # 安装 npm 包\nscript: # 执行命令\n  - yarn run build # 打包\n  - yarn run test # 测试\nafter_success: # 成功之后执行如下命令\n  - yarn run coveralls # 测试代码覆盖率\n```\n\n### 发布 npm 包\n\n注册 npm 账号，注册过程略  \n> 注意之前，先去 npm 官网找一下，你的包名有木有被抢先占用了\n\n执行如下命令进行发布\n```bash\n$ npm publish\n```\n\n升级包  \n执行如下命令（x.x.x  -> major.minor.patch）\n```bash\n$ npm version patch\n```\n\n### 开源贡献\n\n拥抱开源，这样才能让社区，乃至行业发展更有动力\n> 注：例如，你的 star 是对我最大的鼓励，是支持我继续开源的动力\n\n- React-componets 社区 [awesome-react-components](https://github.com/brillout/awesome-react-components)\n- 其他社区，可以到 `Github` 探索\n\n### 完结撒花🎉\n\n👏 欢迎大家一起和我搞 ji（[Github](https://github.com/Yangfan2016)）😊 \n\n- 项目地址 https://github.com/Yangfan2016/react-yan-progress#react-yan-progress  \n- 博客原文 https://yangfan2016.github.io","slug":"快速构建一个-react-插件","published":1,"updated":"2019-04-25T08:24:11.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaujv000faeyywih48l55","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>一般情况下，我们写 React 项目，用 create-react-app 脚手架开发比较方便，但是如果要写一个插件的话，用三方脚手架就显得有点臃肿了，我们可以自己配置一个符合我们开发的简单工具，本文教你如何一步一步开发一个<br>React 插件 ，let’s start  😊</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>工欲善其事，必先利其器，我们来选型</p>\n<ul>\n<li>Typescript  </li>\n</ul>\n<p>为了方便开发，我们选用 Typescript 作为开发语言，可以即时类型检查，顺便还能装逼（巨硬大法好），</p>\n<blockquote>\n<p>注：<br>Typescript 可选的，你也可以选择 js 刀耕火种，不过最好还是用 Typescript 写吧，毕竟9102年了，骚年 😄</p>\n</blockquote>\n<ul>\n<li>webpack + babel</li>\n</ul>\n<p>这里先用我们熟悉的 webpack 作为打包工具（之后会尝试改成 rollup 作为打包工具）</p>\n<ul>\n<li>jest + travis + coveralls</li>\n</ul>\n<p>jest 作为我们代码测试的工具,这里选用 travis ，一个在线持续集成的工具（帮助你打包、构建、运行scripts命令、代码测试等）<br>选用 coveralls 可以根据 travis 代码测试后生成的代码覆盖率生成 badge（Github 好多项目都有的）<br><img src=\"https://user-gold-cdn.xitu.io/2019/1/8/1682db589e80f715?w=90&amp;h=20&amp;f=svg&amp;s=724\" alt=\"Build Status\"></p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><p>下面我们来大体组织下目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-yan-progress</span><br><span class=\"line\">├── build                                 // 打包目录</span><br><span class=\"line\">│   └── YanProgress.min.js</span><br><span class=\"line\">├── src                                   // 源码</span><br><span class=\"line\">│   ├── index.css</span><br><span class=\"line\">│   └── index.tsx</span><br><span class=\"line\">├── test                                  // 测试文件</span><br><span class=\"line\">│   └── YanProgress.test.js</span><br><span class=\"line\">├── index.d.ts                            // 声明文件（ts）</span><br><span class=\"line\">├── jest.config.js                        // jest 测试配置文件</span><br><span class=\"line\">├── webpack.config.js                     // webpack 配置文件</span><br><span class=\"line\">├── tsconfig.json                         // ts 配置文件</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── .travis.yml                           // travis 配置文件</span><br><span class=\"line\">├── LICENSE </span><br><span class=\"line\">└── README.md</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开发者选项\"><a href=\"#开发者选项\" class=\"headerlink\" title=\"开发者选项\"></a>开发者选项</h3><p>所有的依赖的包如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"@babel/core\"</span>: <span class=\"string\">\"^7.1.6\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"@babel/preset-env\"</span>: <span class=\"string\">\"^7.1.6\"</span>, </span><br><span class=\"line\">        <span class=\"string\">\"@babel/preset-react\"</span>: <span class=\"string\">\"^7.0.0\"</span>, <span class=\"comment\">// for react</span></span><br><span class=\"line\">        <span class=\"string\">\"@types/react\"</span>: <span class=\"string\">\"^16.7.18\"</span>, <span class=\"comment\">// 声明文件</span></span><br><span class=\"line\">        <span class=\"string\">\"@types/react-dom\"</span>: <span class=\"string\">\"^16.0.11\"</span>, <span class=\"comment\">// 声明文件</span></span><br><span class=\"line\">        <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^8.0.4\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"chai\"</span>: <span class=\"string\">\"^4.2.0\"</span>, <span class=\"comment\">// 测试断言库</span></span><br><span class=\"line\">        <span class=\"string\">\"coveralls\"</span>: <span class=\"string\">\"^3.0.2\"</span>, <span class=\"comment\">// 代码覆盖率</span></span><br><span class=\"line\">        <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^1.0.1\"</span>, </span><br><span class=\"line\">        <span class=\"string\">\"jest\"</span>: <span class=\"string\">\"^23.6.0\"</span>, <span class=\"comment\">// 测试工具</span></span><br><span class=\"line\">        <span class=\"string\">\"react\"</span>: <span class=\"string\">\"^16.7.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"react-dom\"</span>: <span class=\"string\">\"^16.7.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.23.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ts-loader\"</span>: <span class=\"string\">\"^5.3.2\"</span>, <span class=\"comment\">// 解析 ts </span></span><br><span class=\"line\">        <span class=\"string\">\"typescript\"</span>: <span class=\"string\">\"^3.2.2\"</span>, <span class=\"comment\">// 解析 ts</span></span><br><span class=\"line\">        <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^4.25.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"webpack-cli\"</span>: <span class=\"string\">\"^3.1.2\"</span></span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>命令配置如下，详情 <code>package.json</code><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack --config webpack.config.js --progress --colors\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"jest ./test/YanProgress.test.js\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"coveralls\"</span>: <span class=\"string\">\"cat ./coverage/lcov.info | coveralls\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"webpack-配置\"><a href=\"#webpack-配置\" class=\"headerlink\" title=\"webpack 配置\"></a>webpack 配置</h3><p>我们采用 webpack4 ,具体配置请看官网，<a href=\"https://webpack.js.org/concepts/\" target=\"_blank\" rel=\"noopener\">传送门</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tmode: <span class=\"string\">\"production\"</span>, <span class=\"comment\">// 生产模式</span></span><br><span class=\"line\">\tentry: &#123; <span class=\"comment\">// 入口</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"YanProgress\"</span>: path.resolve(__dirname, <span class=\"string\">'./src/index.tsx'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\toutput: &#123; <span class=\"comment\">// 出口</span></span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'./build'</span>),</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'[name].min.js'</span>,</span><br><span class=\"line\">\t\tpublicPath: <span class=\"string\">\"./build/\"</span>,</span><br><span class=\"line\">\t\tlibraryTarget: <span class=\"string\">'commonjs2'</span>, <span class=\"comment\">// 注意这里按 commonjs2 模块规范打包</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">\t\trules: [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">\t\t\t\tuse: [</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tloader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">\t\t\t\t\t\toptions: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tpresets: [<span class=\"string\">'@babel/preset-env'</span>, <span class=\"string\">\"@babel/preset-react\"</span>]</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tloader: <span class=\"string\">'ts-loader'</span>, <span class=\"comment\">// 解析 ts</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t],</span><br><span class=\"line\">\t\t\t\tinclude: path.resolve(__dirname, <span class=\"string\">\"./src/\"</span>), <span class=\"comment\">// 只解析 src 目录下的文件</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\ttest: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">\t\t\t\tloader: <span class=\"string\">\"style-loader!css-loader?modules&amp;localIdentName=[hash:8]\"</span>, <span class=\"comment\">// css_modules 配置详情  http://www.ruanyifeng.com/blog/2016/06/css_modules.html</span></span><br><span class=\"line\">\t\t\t\tinclude: path.resolve(__dirname, <span class=\"string\">\"./src/\"</span>),</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tresolve: &#123; <span class=\"comment\">// 省略文件后缀时，默认按下面的配置取</span></span><br><span class=\"line\">\t\textensions: [<span class=\"string\">'.ts'</span>, <span class=\"string\">'.tsx'</span>, <span class=\"string\">'.js'</span>],</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\texternals: &#123; <span class=\"comment\">// 不把 react 打包进去</span></span><br><span class=\"line\">\t\treact: <span class=\"string\">'react'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"【选读】Typescript-配置\"><a href=\"#【选读】Typescript-配置\" class=\"headerlink\" title=\"【选读】Typescript 配置\"></a>【选读】Typescript 配置</h3><p>由于我们要在 ts 文件中 引入 css 模块，但是 ts 不认识，所以我们需要进行如下配置</p>\n<p>在项目的根目录下新建一个 <code>index.d.ts</code> ts 声明文件</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">module</span> '*.css';</span><br></pre></td></tr></table></figure>\n<h3 id=\"开始编写插件\"><a href=\"#开始编写插件\" class=\"headerlink\" title=\"开始编写插件\"></a>开始编写插件</h3><p>这里就是与平常的开发组件一样，举个例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YanProgress</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">\trender() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t骚年，写代码快乐吗，看我干嘛 😄，赶快滚去写代码啊，别忘了点个 star 😂</span><br><span class=\"line\">\t\t\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t);</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default YanProgress; /</span><span class=\"regexp\">/ 记得导出啊，骚年</span></span><br></pre></td></tr></table></figure>\n<p>你可以直接看我写好的代码（然后 ctrl+c,ctrl+v），源码在这里，<a href=\"https://github.com/Yangfan2016/react-yan-progress/tree/master\" target=\"_blank\" rel=\"noopener\">点我</a></p>\n<h3 id=\"安装依赖及代码压缩打包\"><a href=\"#安装依赖及代码压缩打包\" class=\"headerlink\" title=\"安装依赖及代码压缩打包\"></a>安装依赖及代码压缩打包</h3><p>webpack4 默认会压缩代码，so 我们直接执行刚才 package.json 配置好的 scripts 的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn</span><br><span class=\"line\">$ yarn run build</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码测试\"><a href=\"#代码测试\" class=\"headerlink\" title=\"代码测试\"></a>代码测试</h3><ul>\n<li><p>单元测试<br>  可以在 <code>test</code> 目录下新建一个 <code>xxx.test.js</code> 的测试文件，写好测试用例（这里使用的是 chai 断言库的 expect 风格），执行如下命令</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn run <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>包测试<br>  如果你也想以 npm 包的形式引入（<code>import YanProgress from &#39;react-yan-progress&#39;</code>），测试的话，可以执行如下命令  </p>\n<p>  在你的项目根目录下，打开终端运行如下命令，建立链接</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn link</span><br></pre></td></tr></table></figure>\n<p>  在你要测试的 demo 项目根目录下，执行如下，然后你就可以这样使用了 <code>import YanProgress from &#39;react-yan-progress&#39;</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn link react-yan-progress</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"持续集成\"><a href=\"#持续集成\" class=\"headerlink\" title=\"持续集成\"></a>持续集成</h3><p>这里用到比较方便简单的 travis 在线测试工具，和测试代码覆盖率工具 coveralls，网址如下：<br>持续集成 <a href=\"https://travis-ci.org\" target=\"_blank\" rel=\"noopener\">https://travis-ci.org</a><br>代码覆盖率  <a href=\"https://coveralls.io\" target=\"_blank\" rel=\"noopener\">https://coveralls.io</a>  </p>\n<p>注册使用过程就略过了，毕竟已经有很多教程了（面向谷歌编程 😂）</p>\n<p>在项目根目录下新建一个 <code>.travis.yml</code> 文件，配置如下</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span> <span class=\"comment\"># 运行环境</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"10.6.0\"</span> <span class=\"comment\"># 版本</span></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">master</span> <span class=\"comment\"># 只有主支可以</span></span><br><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">export</span> <span class=\"string\">TZ='Asia/Shanghai'</span> <span class=\"comment\"># 如果你的项目里涉及到时间处理，这里需要设置时区</span></span><br><span class=\"line\"><span class=\"attr\">install:</span> <span class=\"string\">yarn</span> <span class=\"string\">install</span> <span class=\"comment\"># 安装 npm 包</span></span><br><span class=\"line\"><span class=\"attr\">script:</span> <span class=\"comment\"># 执行命令</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">yarn</span> <span class=\"string\">run</span> <span class=\"string\">build</span> <span class=\"comment\"># 打包</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">yarn</span> <span class=\"string\">run</span> <span class=\"string\">test</span> <span class=\"comment\"># 测试</span></span><br><span class=\"line\"><span class=\"attr\">after_success:</span> <span class=\"comment\"># 成功之后执行如下命令</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">yarn</span> <span class=\"string\">run</span> <span class=\"string\">coveralls</span> <span class=\"comment\"># 测试代码覆盖率</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"发布-npm-包\"><a href=\"#发布-npm-包\" class=\"headerlink\" title=\"发布 npm 包\"></a>发布 npm 包</h3><p>注册 npm 账号，注册过程略  </p>\n<blockquote>\n<p>注意之前，先去 npm 官网找一下，你的包名有木有被抢先占用了</p>\n</blockquote>\n<p>执行如下命令进行发布<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm publish</span><br></pre></td></tr></table></figure></p>\n<p>升级包<br>执行如下命令（x.x.x  -&gt; major.minor.patch）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm version patch</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开源贡献\"><a href=\"#开源贡献\" class=\"headerlink\" title=\"开源贡献\"></a>开源贡献</h3><p>拥抱开源，这样才能让社区，乃至行业发展更有动力</p>\n<blockquote>\n<p>注：例如，你的 star 是对我最大的鼓励，是支持我继续开源的动力</p>\n</blockquote>\n<ul>\n<li>React-componets 社区 <a href=\"https://github.com/brillout/awesome-react-components\" target=\"_blank\" rel=\"noopener\">awesome-react-components</a></li>\n<li>其他社区，可以到 <code>Github</code> 探索</li>\n</ul>\n<h3 id=\"完结撒花🎉\"><a href=\"#完结撒花🎉\" class=\"headerlink\" title=\"完结撒花🎉\"></a>完结撒花🎉</h3><p>👏 欢迎大家一起和我搞 ji（<a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">Github</a>）😊 </p>\n<ul>\n<li>项目地址 <a href=\"https://github.com/Yangfan2016/react-yan-progress#react-yan-progress\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016/react-yan-progress#react-yan-progress</a>  </li>\n<li>博客原文 <a href=\"https://yangfan2016.github.io\" target=\"_blank\" rel=\"noopener\">https://yangfan2016.github.io</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>一般情况下，我们写 React 项目，用 create-react-app 脚手架开发比较方便，但是如果要写一个插件的话，用三方脚手架就显得有点臃肿了，我们可以自己配置一个符合我们开发的简单工具，本文教你如何一步一步开发一个<br>React 插件 ，let’s start  😊</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>工欲善其事，必先利其器，我们来选型</p>\n<ul>\n<li>Typescript  </li>\n</ul>\n<p>为了方便开发，我们选用 Typescript 作为开发语言，可以即时类型检查，顺便还能装逼（巨硬大法好），</p>\n<blockquote>\n<p>注：<br>Typescript 可选的，你也可以选择 js 刀耕火种，不过最好还是用 Typescript 写吧，毕竟9102年了，骚年 😄</p>\n</blockquote>\n<ul>\n<li>webpack + babel</li>\n</ul>\n<p>这里先用我们熟悉的 webpack 作为打包工具（之后会尝试改成 rollup 作为打包工具）</p>\n<ul>\n<li>jest + travis + coveralls</li>\n</ul>\n<p>jest 作为我们代码测试的工具,这里选用 travis ，一个在线持续集成的工具（帮助你打包、构建、运行scripts命令、代码测试等）<br>选用 coveralls 可以根据 travis 代码测试后生成的代码覆盖率生成 badge（Github 好多项目都有的）<br><img src=\"https://user-gold-cdn.xitu.io/2019/1/8/1682db589e80f715?w=90&amp;h=20&amp;f=svg&amp;s=724\" alt=\"Build Status\"></p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><p>下面我们来大体组织下目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-yan-progress</span><br><span class=\"line\">├── build                                 // 打包目录</span><br><span class=\"line\">│   └── YanProgress.min.js</span><br><span class=\"line\">├── src                                   // 源码</span><br><span class=\"line\">│   ├── index.css</span><br><span class=\"line\">│   └── index.tsx</span><br><span class=\"line\">├── test                                  // 测试文件</span><br><span class=\"line\">│   └── YanProgress.test.js</span><br><span class=\"line\">├── index.d.ts                            // 声明文件（ts）</span><br><span class=\"line\">├── jest.config.js                        // jest 测试配置文件</span><br><span class=\"line\">├── webpack.config.js                     // webpack 配置文件</span><br><span class=\"line\">├── tsconfig.json                         // ts 配置文件</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── .travis.yml                           // travis 配置文件</span><br><span class=\"line\">├── LICENSE </span><br><span class=\"line\">└── README.md</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开发者选项\"><a href=\"#开发者选项\" class=\"headerlink\" title=\"开发者选项\"></a>开发者选项</h3><p>所有的依赖的包如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"@babel/core\"</span>: <span class=\"string\">\"^7.1.6\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"@babel/preset-env\"</span>: <span class=\"string\">\"^7.1.6\"</span>, </span><br><span class=\"line\">        <span class=\"string\">\"@babel/preset-react\"</span>: <span class=\"string\">\"^7.0.0\"</span>, <span class=\"comment\">// for react</span></span><br><span class=\"line\">        <span class=\"string\">\"@types/react\"</span>: <span class=\"string\">\"^16.7.18\"</span>, <span class=\"comment\">// 声明文件</span></span><br><span class=\"line\">        <span class=\"string\">\"@types/react-dom\"</span>: <span class=\"string\">\"^16.0.11\"</span>, <span class=\"comment\">// 声明文件</span></span><br><span class=\"line\">        <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^8.0.4\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"chai\"</span>: <span class=\"string\">\"^4.2.0\"</span>, <span class=\"comment\">// 测试断言库</span></span><br><span class=\"line\">        <span class=\"string\">\"coveralls\"</span>: <span class=\"string\">\"^3.0.2\"</span>, <span class=\"comment\">// 代码覆盖率</span></span><br><span class=\"line\">        <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^1.0.1\"</span>, </span><br><span class=\"line\">        <span class=\"string\">\"jest\"</span>: <span class=\"string\">\"^23.6.0\"</span>, <span class=\"comment\">// 测试工具</span></span><br><span class=\"line\">        <span class=\"string\">\"react\"</span>: <span class=\"string\">\"^16.7.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"react-dom\"</span>: <span class=\"string\">\"^16.7.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.23.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ts-loader\"</span>: <span class=\"string\">\"^5.3.2\"</span>, <span class=\"comment\">// 解析 ts </span></span><br><span class=\"line\">        <span class=\"string\">\"typescript\"</span>: <span class=\"string\">\"^3.2.2\"</span>, <span class=\"comment\">// 解析 ts</span></span><br><span class=\"line\">        <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^4.25.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"webpack-cli\"</span>: <span class=\"string\">\"^3.1.2\"</span></span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>命令配置如下，详情 <code>package.json</code><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack --config webpack.config.js --progress --colors\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"jest ./test/YanProgress.test.js\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"coveralls\"</span>: <span class=\"string\">\"cat ./coverage/lcov.info | coveralls\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"webpack-配置\"><a href=\"#webpack-配置\" class=\"headerlink\" title=\"webpack 配置\"></a>webpack 配置</h3><p>我们采用 webpack4 ,具体配置请看官网，<a href=\"https://webpack.js.org/concepts/\" target=\"_blank\" rel=\"noopener\">传送门</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tmode: <span class=\"string\">\"production\"</span>, <span class=\"comment\">// 生产模式</span></span><br><span class=\"line\">\tentry: &#123; <span class=\"comment\">// 入口</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"YanProgress\"</span>: path.resolve(__dirname, <span class=\"string\">'./src/index.tsx'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\toutput: &#123; <span class=\"comment\">// 出口</span></span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'./build'</span>),</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'[name].min.js'</span>,</span><br><span class=\"line\">\t\tpublicPath: <span class=\"string\">\"./build/\"</span>,</span><br><span class=\"line\">\t\tlibraryTarget: <span class=\"string\">'commonjs2'</span>, <span class=\"comment\">// 注意这里按 commonjs2 模块规范打包</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">\t\trules: [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">\t\t\t\tuse: [</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tloader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">\t\t\t\t\t\toptions: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tpresets: [<span class=\"string\">'@babel/preset-env'</span>, <span class=\"string\">\"@babel/preset-react\"</span>]</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tloader: <span class=\"string\">'ts-loader'</span>, <span class=\"comment\">// 解析 ts</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t],</span><br><span class=\"line\">\t\t\t\tinclude: path.resolve(__dirname, <span class=\"string\">\"./src/\"</span>), <span class=\"comment\">// 只解析 src 目录下的文件</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\ttest: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">\t\t\t\tloader: <span class=\"string\">\"style-loader!css-loader?modules&amp;localIdentName=[hash:8]\"</span>, <span class=\"comment\">// css_modules 配置详情  http://www.ruanyifeng.com/blog/2016/06/css_modules.html</span></span><br><span class=\"line\">\t\t\t\tinclude: path.resolve(__dirname, <span class=\"string\">\"./src/\"</span>),</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tresolve: &#123; <span class=\"comment\">// 省略文件后缀时，默认按下面的配置取</span></span><br><span class=\"line\">\t\textensions: [<span class=\"string\">'.ts'</span>, <span class=\"string\">'.tsx'</span>, <span class=\"string\">'.js'</span>],</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\texternals: &#123; <span class=\"comment\">// 不把 react 打包进去</span></span><br><span class=\"line\">\t\treact: <span class=\"string\">'react'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"【选读】Typescript-配置\"><a href=\"#【选读】Typescript-配置\" class=\"headerlink\" title=\"【选读】Typescript 配置\"></a>【选读】Typescript 配置</h3><p>由于我们要在 ts 文件中 引入 css 模块，但是 ts 不认识，所以我们需要进行如下配置</p>\n<p>在项目的根目录下新建一个 <code>index.d.ts</code> ts 声明文件</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">module</span> '*.css';</span><br></pre></td></tr></table></figure>\n<h3 id=\"开始编写插件\"><a href=\"#开始编写插件\" class=\"headerlink\" title=\"开始编写插件\"></a>开始编写插件</h3><p>这里就是与平常的开发组件一样，举个例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YanProgress</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">\trender() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t骚年，写代码快乐吗，看我干嘛 😄，赶快滚去写代码啊，别忘了点个 star 😂</span><br><span class=\"line\">\t\t\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t);</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default YanProgress; /</span><span class=\"regexp\">/ 记得导出啊，骚年</span></span><br></pre></td></tr></table></figure>\n<p>你可以直接看我写好的代码（然后 ctrl+c,ctrl+v），源码在这里，<a href=\"https://github.com/Yangfan2016/react-yan-progress/tree/master\" target=\"_blank\" rel=\"noopener\">点我</a></p>\n<h3 id=\"安装依赖及代码压缩打包\"><a href=\"#安装依赖及代码压缩打包\" class=\"headerlink\" title=\"安装依赖及代码压缩打包\"></a>安装依赖及代码压缩打包</h3><p>webpack4 默认会压缩代码，so 我们直接执行刚才 package.json 配置好的 scripts 的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn</span><br><span class=\"line\">$ yarn run build</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码测试\"><a href=\"#代码测试\" class=\"headerlink\" title=\"代码测试\"></a>代码测试</h3><ul>\n<li><p>单元测试<br>  可以在 <code>test</code> 目录下新建一个 <code>xxx.test.js</code> 的测试文件，写好测试用例（这里使用的是 chai 断言库的 expect 风格），执行如下命令</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn run <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>包测试<br>  如果你也想以 npm 包的形式引入（<code>import YanProgress from &#39;react-yan-progress&#39;</code>），测试的话，可以执行如下命令  </p>\n<p>  在你的项目根目录下，打开终端运行如下命令，建立链接</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn link</span><br></pre></td></tr></table></figure>\n<p>  在你要测试的 demo 项目根目录下，执行如下，然后你就可以这样使用了 <code>import YanProgress from &#39;react-yan-progress&#39;</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn link react-yan-progress</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"持续集成\"><a href=\"#持续集成\" class=\"headerlink\" title=\"持续集成\"></a>持续集成</h3><p>这里用到比较方便简单的 travis 在线测试工具，和测试代码覆盖率工具 coveralls，网址如下：<br>持续集成 <a href=\"https://travis-ci.org\" target=\"_blank\" rel=\"noopener\">https://travis-ci.org</a><br>代码覆盖率  <a href=\"https://coveralls.io\" target=\"_blank\" rel=\"noopener\">https://coveralls.io</a>  </p>\n<p>注册使用过程就略过了，毕竟已经有很多教程了（面向谷歌编程 😂）</p>\n<p>在项目根目录下新建一个 <code>.travis.yml</code> 文件，配置如下</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span> <span class=\"comment\"># 运行环境</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"10.6.0\"</span> <span class=\"comment\"># 版本</span></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">master</span> <span class=\"comment\"># 只有主支可以</span></span><br><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">export</span> <span class=\"string\">TZ='Asia/Shanghai'</span> <span class=\"comment\"># 如果你的项目里涉及到时间处理，这里需要设置时区</span></span><br><span class=\"line\"><span class=\"attr\">install:</span> <span class=\"string\">yarn</span> <span class=\"string\">install</span> <span class=\"comment\"># 安装 npm 包</span></span><br><span class=\"line\"><span class=\"attr\">script:</span> <span class=\"comment\"># 执行命令</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">yarn</span> <span class=\"string\">run</span> <span class=\"string\">build</span> <span class=\"comment\"># 打包</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">yarn</span> <span class=\"string\">run</span> <span class=\"string\">test</span> <span class=\"comment\"># 测试</span></span><br><span class=\"line\"><span class=\"attr\">after_success:</span> <span class=\"comment\"># 成功之后执行如下命令</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">yarn</span> <span class=\"string\">run</span> <span class=\"string\">coveralls</span> <span class=\"comment\"># 测试代码覆盖率</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"发布-npm-包\"><a href=\"#发布-npm-包\" class=\"headerlink\" title=\"发布 npm 包\"></a>发布 npm 包</h3><p>注册 npm 账号，注册过程略  </p>\n<blockquote>\n<p>注意之前，先去 npm 官网找一下，你的包名有木有被抢先占用了</p>\n</blockquote>\n<p>执行如下命令进行发布<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm publish</span><br></pre></td></tr></table></figure></p>\n<p>升级包<br>执行如下命令（x.x.x  -&gt; major.minor.patch）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm version patch</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开源贡献\"><a href=\"#开源贡献\" class=\"headerlink\" title=\"开源贡献\"></a>开源贡献</h3><p>拥抱开源，这样才能让社区，乃至行业发展更有动力</p>\n<blockquote>\n<p>注：例如，你的 star 是对我最大的鼓励，是支持我继续开源的动力</p>\n</blockquote>\n<ul>\n<li>React-componets 社区 <a href=\"https://github.com/brillout/awesome-react-components\" target=\"_blank\" rel=\"noopener\">awesome-react-components</a></li>\n<li>其他社区，可以到 <code>Github</code> 探索</li>\n</ul>\n<h3 id=\"完结撒花🎉\"><a href=\"#完结撒花🎉\" class=\"headerlink\" title=\"完结撒花🎉\"></a>完结撒花🎉</h3><p>👏 欢迎大家一起和我搞 ji（<a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">Github</a>）😊 </p>\n<ul>\n<li>项目地址 <a href=\"https://github.com/Yangfan2016/react-yan-progress#react-yan-progress\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016/react-yan-progress#react-yan-progress</a>  </li>\n<li>博客原文 <a href=\"https://yangfan2016.github.io\" target=\"_blank\" rel=\"noopener\">https://yangfan2016.github.io</a></li>\n</ul>\n"},{"title":"快速构建一个 vue 插件","date":"2019-01-10T09:05:29.000Z","_content":"\n\n### 碎碎念\n\n上一篇[文章](https://juejin.im/post/5c2f248b51882525030dc50b)，我们介绍了如何构建一个 react 插件，今天我们说说如何构建 vue 插件\n\n### 准备工作\n\n由于与上一篇 react 插件文章使用的是相同的结构，代码测试、持续集成及发布 npm 包也都是一个套路，这里就不再敖述。\n下面主要说下不同的地方，let's start  😊\n\n1. 开发依赖包\n\n```js\n{\n    \"devDependencies\": {\n        \"@babel/core\": \"^7.0.0\",\n        \"@babel/preset-env\": \"^7.0.0\",\n        \"babel-loader\": \"^8.0.2\",\n        \"chai\": \"^4.2.0\",\n        \"coveralls\": \"^3.0.2\",\n        \"css-loader\": \"^1.0.0\",\n        \"jest\": \"^23.6.0\",\n        \"style-loader\": \"^0.23.1\",\n        \"vue\": \"^2.5.21\",\n        \"vue-loader\": \"^15.5.0\", // 解析 SFC 文件\n        \"vue-style-loader\": \"^4.1.2\",\n        \"vue-template-compiler\": \"^2.5.21\", // vue-loader 的同步\b依赖 \n        \"webpack\": \"^4.17.2\",\n        \"webpack-cli\": \"^3.1.0\"\n    },\n}\n```\n\n2. webpack 配置\n\n```js\nconst path = require('path');\nconst { VueLoaderPlugin } = require(\"vue-loader\");\n\nmodule.exports = {\n    mode: \"production\", // 生产模式\n    entry: { // 入口\n        \"YanProgress\": path.resolve(__dirname, './src/index.js')\n    },\n    output: { // 出口\n        path: path.resolve(__dirname, './dist'),\n        filename: '[name].min.js',\n        publicPath: \"./dist/\",\n        libraryTarget: 'umd', // 按 UMD 模式打包\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.vue$/,\n                loader: 'vue-loader',\n                options: {\n                    // 模板编译过程中，编译器可以将某些特性转换为 require 调用\n                    transformAssetUrls: {\n                        video: ['src', 'poster'],\n                        source: 'src',\n                        img: 'src',\n                        image: 'xlink:href' // SVG\n                    }\n                },\n                // 只命中src目录里的js文件，加快 Webpack 搜索速度\n                include: path.resolve(__dirname, \"./src\"),\n            },\n            {\n                test: /\\.js$/,\n                use: [\n                    {\n                        loader: 'babel-loader',\n                        options: {\n                            presets: ['@babel/preset-env']\n                        }\n                    },\n                ],\n                // 只命中src目录里的js文件，加快 Webpack 搜索速度\n                include: path.resolve(__dirname, \"./src/\"),\n            },\n            {\n\n                test: /\\.css$/,\n                loader: \"style-loader!css-loader\"\n            }\n        ]\n    },\n    plugins: [\n        // vue-loader **这个插件是必须的！**它的职责是将你定义过的其它规则复制并应用到 .vue 文件里相应语言的块。\n        new VueLoaderPlugin\n    ],\n    resolve: { // 省略文件后缀时，默认按下面的配置取\n        extensions: ['.js', '.vue'],\n    },\n    externals: { // 不把 vue 打包进去\n        vue: 'vue',\n    }\n};\n```\n\n### 编写插件\n\n写 vue 插件稍微复杂一点 😢，根据[官网](https://cn.vuejs.org/v2/guide/plugins.html#%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6)的案例，我们需要提供一个包含 install 方法的对象或者一个函数（[传送门](https://cn.vuejs.org/v2/api/#Vue-use)），供 Vue.use 调用注册你的插件\n\n- 写法一\n\n```js\nimport Component from './YanProgress.vue'; // 这个就是你平时写的 SFC 组件\n\n// 这里要导出一个包含 install 方法的对象\nlet plugin = { // 这里要导出一个 install 方法\n    install(Vue,options) { \n        // 这里写你的代码，你可以全局注册组件，也可以写全局指令，也可以扩展 Vue 的方法\n        // 1. 全局组件\n        Vue.component('yan-progress',Component); \n        // 2. 全局方法或属性\n        Vue.myGlobalMethod = function () {\n            // 逻辑...\n        }\n        // 3. 全局指令\n        Vue.directive('my-directive', {\n            bind (el, binding, vnode, oldVnode) {\n                // 逻辑...\n            }\n        })\n        // 4. 注入组件\n        Vue.mixin({\n            created: function () {\n                // 逻辑...\n            }\n        })\n        // 5. 添加实例方法\n        Vue.prototype.$myMethod = function (methodOptions) {\n            // 逻辑...\n        }\n    }\n};\n\nif (window && window.Vue) { // 如果是渐进式开发（script 引入简单粗暴的开发方式），需要自动注册你的插件\n    window.Vue.use(plugin);\n}\n\nexport default plugin;\n\n```\n\n- 写法二\n\n```js\nimport Component from './YanProgress.vue'; // 这个就是你平时写的 SFC 组件\n\n// 或者这里也可以写成函数\nfunction plugin(Vue,options) { \n        // 这里写你的代码，你可以全局注册组件，也可以写全局指令，也可以扩展 Vue 的方法\n        Vue.component('yan-progress',Component); \n    }\n};\n\nif (window && window.Vue) { // 如果是渐进式开发（script 引入简单粗暴的开发方式），需要自动注册你的插件\n    window.Vue.use(plugin);\n}\n\nexport default plugin;\n```\n\n这样写的原因是，下面[源码](https://github.com/vuejs/vue/blob/dev/src/core/global-api/use.js)伺候😄\n\n```ts\nexport function initUse (Vue: GlobalAPI) {\n  Vue.use = function (plugin: Function | Object) { // 在这里哦，可以传对象，也可以传函数\n    const installedPlugins = (this._installedPlugins || (this._installedPlugins = []))\n    if (installedPlugins.indexOf(plugin) > -1) { // 避免重复注册插件\n      return this\n    }\n\n    // additional parameters\n    const args = toArray(arguments, 1)\n    args.unshift(this)\n    if (typeof plugin.install === 'function') { // 如果是带有 install 方法的对象\n      plugin.install.apply(plugin, args) // 不改变插件的 this（这里的 this 还是指向插件对象本身）\n    } else if (typeof plugin === 'function') { // 如果是函数\n      plugin.apply(null, args) // 不改变插件的 this（这里应该是指向window，在浏览器非严格模式下）\n    }\n    installedPlugins.push(plugin)\n    return this\n  }\n}\n```\n\n### 开源贡献\n\n拥抱开源，这样才能让社区，乃至行业发展更有动力，哎，似曾相识的赶脚，😂\n> 注：例如，你的 star 是对我最大的鼓励，是支持我继续开源的动力，😄\n\n- awesome-vue 社区 [awesome-vue](https://github.com/vuejs/awesome-vue)\n- 其他社区，可以到 `Github` 探索\n\n### 完结撒花🎉\n\n👏 再次欢迎大家一起和我搞 ji 由（[Github](https://github.com/Yangfan2016)）😊 \n\n- 项目地址 https://github.com/Yangfan2016/vue-yan-progress   \n- 博客原文 https://yangfan2016.github.io  \n- react-yan-progress https://github.com/Yangfan2016/react-yan-progress  \n- vue-yan-progress https://github.com/Yangfan2016/vue-yan-progress  \n\n","source":"_posts/快速构建一个-vue-插件.md","raw":"---\ntitle: 快速构建一个 vue 插件\ndate: 2019-01-10 17:05:29\ntags:\n---\n\n\n### 碎碎念\n\n上一篇[文章](https://juejin.im/post/5c2f248b51882525030dc50b)，我们介绍了如何构建一个 react 插件，今天我们说说如何构建 vue 插件\n\n### 准备工作\n\n由于与上一篇 react 插件文章使用的是相同的结构，代码测试、持续集成及发布 npm 包也都是一个套路，这里就不再敖述。\n下面主要说下不同的地方，let's start  😊\n\n1. 开发依赖包\n\n```js\n{\n    \"devDependencies\": {\n        \"@babel/core\": \"^7.0.0\",\n        \"@babel/preset-env\": \"^7.0.0\",\n        \"babel-loader\": \"^8.0.2\",\n        \"chai\": \"^4.2.0\",\n        \"coveralls\": \"^3.0.2\",\n        \"css-loader\": \"^1.0.0\",\n        \"jest\": \"^23.6.0\",\n        \"style-loader\": \"^0.23.1\",\n        \"vue\": \"^2.5.21\",\n        \"vue-loader\": \"^15.5.0\", // 解析 SFC 文件\n        \"vue-style-loader\": \"^4.1.2\",\n        \"vue-template-compiler\": \"^2.5.21\", // vue-loader 的同步\b依赖 \n        \"webpack\": \"^4.17.2\",\n        \"webpack-cli\": \"^3.1.0\"\n    },\n}\n```\n\n2. webpack 配置\n\n```js\nconst path = require('path');\nconst { VueLoaderPlugin } = require(\"vue-loader\");\n\nmodule.exports = {\n    mode: \"production\", // 生产模式\n    entry: { // 入口\n        \"YanProgress\": path.resolve(__dirname, './src/index.js')\n    },\n    output: { // 出口\n        path: path.resolve(__dirname, './dist'),\n        filename: '[name].min.js',\n        publicPath: \"./dist/\",\n        libraryTarget: 'umd', // 按 UMD 模式打包\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.vue$/,\n                loader: 'vue-loader',\n                options: {\n                    // 模板编译过程中，编译器可以将某些特性转换为 require 调用\n                    transformAssetUrls: {\n                        video: ['src', 'poster'],\n                        source: 'src',\n                        img: 'src',\n                        image: 'xlink:href' // SVG\n                    }\n                },\n                // 只命中src目录里的js文件，加快 Webpack 搜索速度\n                include: path.resolve(__dirname, \"./src\"),\n            },\n            {\n                test: /\\.js$/,\n                use: [\n                    {\n                        loader: 'babel-loader',\n                        options: {\n                            presets: ['@babel/preset-env']\n                        }\n                    },\n                ],\n                // 只命中src目录里的js文件，加快 Webpack 搜索速度\n                include: path.resolve(__dirname, \"./src/\"),\n            },\n            {\n\n                test: /\\.css$/,\n                loader: \"style-loader!css-loader\"\n            }\n        ]\n    },\n    plugins: [\n        // vue-loader **这个插件是必须的！**它的职责是将你定义过的其它规则复制并应用到 .vue 文件里相应语言的块。\n        new VueLoaderPlugin\n    ],\n    resolve: { // 省略文件后缀时，默认按下面的配置取\n        extensions: ['.js', '.vue'],\n    },\n    externals: { // 不把 vue 打包进去\n        vue: 'vue',\n    }\n};\n```\n\n### 编写插件\n\n写 vue 插件稍微复杂一点 😢，根据[官网](https://cn.vuejs.org/v2/guide/plugins.html#%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6)的案例，我们需要提供一个包含 install 方法的对象或者一个函数（[传送门](https://cn.vuejs.org/v2/api/#Vue-use)），供 Vue.use 调用注册你的插件\n\n- 写法一\n\n```js\nimport Component from './YanProgress.vue'; // 这个就是你平时写的 SFC 组件\n\n// 这里要导出一个包含 install 方法的对象\nlet plugin = { // 这里要导出一个 install 方法\n    install(Vue,options) { \n        // 这里写你的代码，你可以全局注册组件，也可以写全局指令，也可以扩展 Vue 的方法\n        // 1. 全局组件\n        Vue.component('yan-progress',Component); \n        // 2. 全局方法或属性\n        Vue.myGlobalMethod = function () {\n            // 逻辑...\n        }\n        // 3. 全局指令\n        Vue.directive('my-directive', {\n            bind (el, binding, vnode, oldVnode) {\n                // 逻辑...\n            }\n        })\n        // 4. 注入组件\n        Vue.mixin({\n            created: function () {\n                // 逻辑...\n            }\n        })\n        // 5. 添加实例方法\n        Vue.prototype.$myMethod = function (methodOptions) {\n            // 逻辑...\n        }\n    }\n};\n\nif (window && window.Vue) { // 如果是渐进式开发（script 引入简单粗暴的开发方式），需要自动注册你的插件\n    window.Vue.use(plugin);\n}\n\nexport default plugin;\n\n```\n\n- 写法二\n\n```js\nimport Component from './YanProgress.vue'; // 这个就是你平时写的 SFC 组件\n\n// 或者这里也可以写成函数\nfunction plugin(Vue,options) { \n        // 这里写你的代码，你可以全局注册组件，也可以写全局指令，也可以扩展 Vue 的方法\n        Vue.component('yan-progress',Component); \n    }\n};\n\nif (window && window.Vue) { // 如果是渐进式开发（script 引入简单粗暴的开发方式），需要自动注册你的插件\n    window.Vue.use(plugin);\n}\n\nexport default plugin;\n```\n\n这样写的原因是，下面[源码](https://github.com/vuejs/vue/blob/dev/src/core/global-api/use.js)伺候😄\n\n```ts\nexport function initUse (Vue: GlobalAPI) {\n  Vue.use = function (plugin: Function | Object) { // 在这里哦，可以传对象，也可以传函数\n    const installedPlugins = (this._installedPlugins || (this._installedPlugins = []))\n    if (installedPlugins.indexOf(plugin) > -1) { // 避免重复注册插件\n      return this\n    }\n\n    // additional parameters\n    const args = toArray(arguments, 1)\n    args.unshift(this)\n    if (typeof plugin.install === 'function') { // 如果是带有 install 方法的对象\n      plugin.install.apply(plugin, args) // 不改变插件的 this（这里的 this 还是指向插件对象本身）\n    } else if (typeof plugin === 'function') { // 如果是函数\n      plugin.apply(null, args) // 不改变插件的 this（这里应该是指向window，在浏览器非严格模式下）\n    }\n    installedPlugins.push(plugin)\n    return this\n  }\n}\n```\n\n### 开源贡献\n\n拥抱开源，这样才能让社区，乃至行业发展更有动力，哎，似曾相识的赶脚，😂\n> 注：例如，你的 star 是对我最大的鼓励，是支持我继续开源的动力，😄\n\n- awesome-vue 社区 [awesome-vue](https://github.com/vuejs/awesome-vue)\n- 其他社区，可以到 `Github` 探索\n\n### 完结撒花🎉\n\n👏 再次欢迎大家一起和我搞 ji 由（[Github](https://github.com/Yangfan2016)）😊 \n\n- 项目地址 https://github.com/Yangfan2016/vue-yan-progress   \n- 博客原文 https://yangfan2016.github.io  \n- react-yan-progress https://github.com/Yangfan2016/react-yan-progress  \n- vue-yan-progress https://github.com/Yangfan2016/vue-yan-progress  \n\n","slug":"快速构建一个-vue-插件","published":1,"updated":"2019-04-25T08:24:11.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaujw000gaeyy7t16gx2y","content":"<h3 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h3><p>上一篇<a href=\"https://juejin.im/post/5c2f248b51882525030dc50b\" target=\"_blank\" rel=\"noopener\">文章</a>，我们介绍了如何构建一个 react 插件，今天我们说说如何构建 vue 插件</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>由于与上一篇 react 插件文章使用的是相同的结构，代码测试、持续集成及发布 npm 包也都是一个套路，这里就不再敖述。<br>下面主要说下不同的地方，let’s start  😊</p>\n<ol>\n<li>开发依赖包</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"@babel/core\"</span>: <span class=\"string\">\"^7.0.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"@babel/preset-env\"</span>: <span class=\"string\">\"^7.0.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^8.0.2\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"chai\"</span>: <span class=\"string\">\"^4.2.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"coveralls\"</span>: <span class=\"string\">\"^3.0.2\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"jest\"</span>: <span class=\"string\">\"^23.6.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.23.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"vue\"</span>: <span class=\"string\">\"^2.5.21\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"vue-loader\"</span>: <span class=\"string\">\"^15.5.0\"</span>, <span class=\"comment\">// 解析 SFC 文件</span></span><br><span class=\"line\">        <span class=\"string\">\"vue-style-loader\"</span>: <span class=\"string\">\"^4.1.2\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"vue-template-compiler\"</span>: <span class=\"string\">\"^2.5.21\"</span>, <span class=\"comment\">// vue-loader 的同步\b依赖 </span></span><br><span class=\"line\">        <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^4.17.2\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"webpack-cli\"</span>: <span class=\"string\">\"^3.1.0\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>webpack 配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; VueLoaderPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"vue-loader\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">\"production\"</span>, <span class=\"comment\">// 生产模式</span></span><br><span class=\"line\">    entry: &#123; <span class=\"comment\">// 入口</span></span><br><span class=\"line\">        <span class=\"string\">\"YanProgress\"</span>: path.resolve(__dirname, <span class=\"string\">'./src/index.js'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123; <span class=\"comment\">// 出口</span></span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].min.js'</span>,</span><br><span class=\"line\">        publicPath: <span class=\"string\">\"./dist/\"</span>,</span><br><span class=\"line\">        libraryTarget: <span class=\"string\">'umd'</span>, <span class=\"comment\">// 按 UMD 模式打包</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 模板编译过程中，编译器可以将某些特性转换为 require 调用</span></span><br><span class=\"line\">                    transformAssetUrls: &#123;</span><br><span class=\"line\">                        video: [<span class=\"string\">'src'</span>, <span class=\"string\">'poster'</span>],</span><br><span class=\"line\">                        source: <span class=\"string\">'src'</span>,</span><br><span class=\"line\">                        img: <span class=\"string\">'src'</span>,</span><br><span class=\"line\">                        image: <span class=\"string\">'xlink:href'</span> <span class=\"comment\">// SVG</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"comment\">// 只命中src目录里的js文件，加快 Webpack 搜索速度</span></span><br><span class=\"line\">                include: path.resolve(__dirname, <span class=\"string\">\"./src\"</span>),</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            presets: [<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"comment\">// 只命中src目录里的js文件，加快 Webpack 搜索速度</span></span><br><span class=\"line\">                include: path.resolve(__dirname, <span class=\"string\">\"./src/\"</span>),</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// vue-loader **这个插件是必须的！**它的职责是将你定义过的其它规则复制并应用到 .vue 文件里相应语言的块。</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> VueLoaderPlugin</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    resolve: &#123; <span class=\"comment\">// 省略文件后缀时，默认按下面的配置取</span></span><br><span class=\"line\">        extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.vue'</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    externals: &#123; <span class=\"comment\">// 不把 vue 打包进去</span></span><br><span class=\"line\">        vue: <span class=\"string\">'vue'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写插件\"><a href=\"#编写插件\" class=\"headerlink\" title=\"编写插件\"></a>编写插件</h3><p>写 vue 插件稍微复杂一点 😢，根据<a href=\"https://cn.vuejs.org/v2/guide/plugins.html#%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">官网</a>的案例，我们需要提供一个包含 install 方法的对象或者一个函数（<a href=\"https://cn.vuejs.org/v2/api/#Vue-use\" target=\"_blank\" rel=\"noopener\">传送门</a>），供 Vue.use 调用注册你的插件</p>\n<ul>\n<li>写法一</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">'./YanProgress.vue'</span>; <span class=\"comment\">// 这个就是你平时写的 SFC 组件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里要导出一个包含 install 方法的对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> plugin = &#123; <span class=\"comment\">// 这里要导出一个 install 方法</span></span><br><span class=\"line\">    install(Vue,options) &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 这里写你的代码，你可以全局注册组件，也可以写全局指令，也可以扩展 Vue 的方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 全局组件</span></span><br><span class=\"line\">        Vue.component(<span class=\"string\">'yan-progress'</span>,Component); </span><br><span class=\"line\">        <span class=\"comment\">// 2. 全局方法或属性</span></span><br><span class=\"line\">        Vue.myGlobalMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3. 全局指令</span></span><br><span class=\"line\">        Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;</span><br><span class=\"line\">            bind (el, binding, vnode, oldVnode) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 4. 注入组件</span></span><br><span class=\"line\">        Vue.mixin(&#123;</span><br><span class=\"line\">            created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 5. 添加实例方法</span></span><br><span class=\"line\">        Vue.prototype.$myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">methodOptions</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span> &amp;&amp; <span class=\"built_in\">window</span>.Vue) &#123; <span class=\"comment\">// 如果是渐进式开发（script 引入简单粗暴的开发方式），需要自动注册你的插件</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.Vue.use(plugin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> plugin;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>写法二</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">'./YanProgress.vue'</span>; <span class=\"comment\">// 这个就是你平时写的 SFC 组件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者这里也可以写成函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">plugin</span>(<span class=\"params\">Vue,options</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">// 这里写你的代码，你可以全局注册组件，也可以写全局指令，也可以扩展 Vue 的方法</span></span><br><span class=\"line\">        Vue.component(<span class=\"string\">'yan-progress'</span>,Component); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span> &amp;&amp; <span class=\"built_in\">window</span>.Vue) &#123; <span class=\"comment\">// 如果是渐进式开发（script 引入简单粗暴的开发方式），需要自动注册你的插件</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.Vue.use(plugin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> plugin;</span><br></pre></td></tr></table></figure>\n<p>这样写的原因是，下面<a href=\"https://github.com/vuejs/vue/blob/dev/src/core/global-api/use.js\" target=\"_blank\" rel=\"noopener\">源码</a>伺候😄</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initUse</span> (<span class=\"params\">Vue: GlobalAPI</span>) </span>&#123;</span><br><span class=\"line\">  Vue.use = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">plugin: <span class=\"built_in\">Function</span> | <span class=\"built_in\">Object</span></span>) </span>&#123; <span class=\"comment\">// 在这里哦，可以传对象，也可以传函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> installedPlugins = (<span class=\"keyword\">this</span>._installedPlugins || (<span class=\"keyword\">this</span>._installedPlugins = []))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (installedPlugins.indexOf(plugin) &gt; <span class=\"number\">-1</span>) &#123; <span class=\"comment\">// 避免重复注册插件</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// additional parameters</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = toArray(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    args.unshift(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin.install === <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">// 如果是带有 install 方法的对象</span></span><br><span class=\"line\">      plugin.install.apply(plugin, args) <span class=\"comment\">// 不改变插件的 this（这里的 this 还是指向插件对象本身）</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin === <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">// 如果是函数</span></span><br><span class=\"line\">      plugin.apply(<span class=\"literal\">null</span>, args) <span class=\"comment\">// 不改变插件的 this（这里应该是指向window，在浏览器非严格模式下）</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    installedPlugins.push(plugin)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"开源贡献\"><a href=\"#开源贡献\" class=\"headerlink\" title=\"开源贡献\"></a>开源贡献</h3><p>拥抱开源，这样才能让社区，乃至行业发展更有动力，哎，似曾相识的赶脚，😂</p>\n<blockquote>\n<p>注：例如，你的 star 是对我最大的鼓励，是支持我继续开源的动力，😄</p>\n</blockquote>\n<ul>\n<li>awesome-vue 社区 <a href=\"https://github.com/vuejs/awesome-vue\" target=\"_blank\" rel=\"noopener\">awesome-vue</a></li>\n<li>其他社区，可以到 <code>Github</code> 探索</li>\n</ul>\n<h3 id=\"完结撒花🎉\"><a href=\"#完结撒花🎉\" class=\"headerlink\" title=\"完结撒花🎉\"></a>完结撒花🎉</h3><p>👏 再次欢迎大家一起和我搞 ji 由（<a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">Github</a>）😊 </p>\n<ul>\n<li>项目地址 <a href=\"https://github.com/Yangfan2016/vue-yan-progress\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016/vue-yan-progress</a>   </li>\n<li>博客原文 <a href=\"https://yangfan2016.github.io\" target=\"_blank\" rel=\"noopener\">https://yangfan2016.github.io</a>  </li>\n<li>react-yan-progress <a href=\"https://github.com/Yangfan2016/react-yan-progress\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016/react-yan-progress</a>  </li>\n<li>vue-yan-progress <a href=\"https://github.com/Yangfan2016/vue-yan-progress\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016/vue-yan-progress</a>  </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h3><p>上一篇<a href=\"https://juejin.im/post/5c2f248b51882525030dc50b\" target=\"_blank\" rel=\"noopener\">文章</a>，我们介绍了如何构建一个 react 插件，今天我们说说如何构建 vue 插件</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>由于与上一篇 react 插件文章使用的是相同的结构，代码测试、持续集成及发布 npm 包也都是一个套路，这里就不再敖述。<br>下面主要说下不同的地方，let’s start  😊</p>\n<ol>\n<li>开发依赖包</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"@babel/core\"</span>: <span class=\"string\">\"^7.0.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"@babel/preset-env\"</span>: <span class=\"string\">\"^7.0.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^8.0.2\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"chai\"</span>: <span class=\"string\">\"^4.2.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"coveralls\"</span>: <span class=\"string\">\"^3.0.2\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"jest\"</span>: <span class=\"string\">\"^23.6.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.23.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"vue\"</span>: <span class=\"string\">\"^2.5.21\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"vue-loader\"</span>: <span class=\"string\">\"^15.5.0\"</span>, <span class=\"comment\">// 解析 SFC 文件</span></span><br><span class=\"line\">        <span class=\"string\">\"vue-style-loader\"</span>: <span class=\"string\">\"^4.1.2\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"vue-template-compiler\"</span>: <span class=\"string\">\"^2.5.21\"</span>, <span class=\"comment\">// vue-loader 的同步\b依赖 </span></span><br><span class=\"line\">        <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^4.17.2\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"webpack-cli\"</span>: <span class=\"string\">\"^3.1.0\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>webpack 配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; VueLoaderPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"vue-loader\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">\"production\"</span>, <span class=\"comment\">// 生产模式</span></span><br><span class=\"line\">    entry: &#123; <span class=\"comment\">// 入口</span></span><br><span class=\"line\">        <span class=\"string\">\"YanProgress\"</span>: path.resolve(__dirname, <span class=\"string\">'./src/index.js'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123; <span class=\"comment\">// 出口</span></span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].min.js'</span>,</span><br><span class=\"line\">        publicPath: <span class=\"string\">\"./dist/\"</span>,</span><br><span class=\"line\">        libraryTarget: <span class=\"string\">'umd'</span>, <span class=\"comment\">// 按 UMD 模式打包</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 模板编译过程中，编译器可以将某些特性转换为 require 调用</span></span><br><span class=\"line\">                    transformAssetUrls: &#123;</span><br><span class=\"line\">                        video: [<span class=\"string\">'src'</span>, <span class=\"string\">'poster'</span>],</span><br><span class=\"line\">                        source: <span class=\"string\">'src'</span>,</span><br><span class=\"line\">                        img: <span class=\"string\">'src'</span>,</span><br><span class=\"line\">                        image: <span class=\"string\">'xlink:href'</span> <span class=\"comment\">// SVG</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"comment\">// 只命中src目录里的js文件，加快 Webpack 搜索速度</span></span><br><span class=\"line\">                include: path.resolve(__dirname, <span class=\"string\">\"./src\"</span>),</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            presets: [<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"comment\">// 只命中src目录里的js文件，加快 Webpack 搜索速度</span></span><br><span class=\"line\">                include: path.resolve(__dirname, <span class=\"string\">\"./src/\"</span>),</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">\"style-loader!css-loader\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// vue-loader **这个插件是必须的！**它的职责是将你定义过的其它规则复制并应用到 .vue 文件里相应语言的块。</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> VueLoaderPlugin</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    resolve: &#123; <span class=\"comment\">// 省略文件后缀时，默认按下面的配置取</span></span><br><span class=\"line\">        extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.vue'</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    externals: &#123; <span class=\"comment\">// 不把 vue 打包进去</span></span><br><span class=\"line\">        vue: <span class=\"string\">'vue'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写插件\"><a href=\"#编写插件\" class=\"headerlink\" title=\"编写插件\"></a>编写插件</h3><p>写 vue 插件稍微复杂一点 😢，根据<a href=\"https://cn.vuejs.org/v2/guide/plugins.html#%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">官网</a>的案例，我们需要提供一个包含 install 方法的对象或者一个函数（<a href=\"https://cn.vuejs.org/v2/api/#Vue-use\" target=\"_blank\" rel=\"noopener\">传送门</a>），供 Vue.use 调用注册你的插件</p>\n<ul>\n<li>写法一</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">'./YanProgress.vue'</span>; <span class=\"comment\">// 这个就是你平时写的 SFC 组件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里要导出一个包含 install 方法的对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> plugin = &#123; <span class=\"comment\">// 这里要导出一个 install 方法</span></span><br><span class=\"line\">    install(Vue,options) &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 这里写你的代码，你可以全局注册组件，也可以写全局指令，也可以扩展 Vue 的方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 全局组件</span></span><br><span class=\"line\">        Vue.component(<span class=\"string\">'yan-progress'</span>,Component); </span><br><span class=\"line\">        <span class=\"comment\">// 2. 全局方法或属性</span></span><br><span class=\"line\">        Vue.myGlobalMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3. 全局指令</span></span><br><span class=\"line\">        Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;</span><br><span class=\"line\">            bind (el, binding, vnode, oldVnode) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 4. 注入组件</span></span><br><span class=\"line\">        Vue.mixin(&#123;</span><br><span class=\"line\">            created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 5. 添加实例方法</span></span><br><span class=\"line\">        Vue.prototype.$myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">methodOptions</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span> &amp;&amp; <span class=\"built_in\">window</span>.Vue) &#123; <span class=\"comment\">// 如果是渐进式开发（script 引入简单粗暴的开发方式），需要自动注册你的插件</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.Vue.use(plugin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> plugin;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>写法二</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">'./YanProgress.vue'</span>; <span class=\"comment\">// 这个就是你平时写的 SFC 组件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者这里也可以写成函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">plugin</span>(<span class=\"params\">Vue,options</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">// 这里写你的代码，你可以全局注册组件，也可以写全局指令，也可以扩展 Vue 的方法</span></span><br><span class=\"line\">        Vue.component(<span class=\"string\">'yan-progress'</span>,Component); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span> &amp;&amp; <span class=\"built_in\">window</span>.Vue) &#123; <span class=\"comment\">// 如果是渐进式开发（script 引入简单粗暴的开发方式），需要自动注册你的插件</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.Vue.use(plugin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> plugin;</span><br></pre></td></tr></table></figure>\n<p>这样写的原因是，下面<a href=\"https://github.com/vuejs/vue/blob/dev/src/core/global-api/use.js\" target=\"_blank\" rel=\"noopener\">源码</a>伺候😄</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initUse</span> (<span class=\"params\">Vue: GlobalAPI</span>) </span>&#123;</span><br><span class=\"line\">  Vue.use = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">plugin: <span class=\"built_in\">Function</span> | <span class=\"built_in\">Object</span></span>) </span>&#123; <span class=\"comment\">// 在这里哦，可以传对象，也可以传函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> installedPlugins = (<span class=\"keyword\">this</span>._installedPlugins || (<span class=\"keyword\">this</span>._installedPlugins = []))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (installedPlugins.indexOf(plugin) &gt; <span class=\"number\">-1</span>) &#123; <span class=\"comment\">// 避免重复注册插件</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// additional parameters</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = toArray(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    args.unshift(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin.install === <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">// 如果是带有 install 方法的对象</span></span><br><span class=\"line\">      plugin.install.apply(plugin, args) <span class=\"comment\">// 不改变插件的 this（这里的 this 还是指向插件对象本身）</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin === <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">// 如果是函数</span></span><br><span class=\"line\">      plugin.apply(<span class=\"literal\">null</span>, args) <span class=\"comment\">// 不改变插件的 this（这里应该是指向window，在浏览器非严格模式下）</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    installedPlugins.push(plugin)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"开源贡献\"><a href=\"#开源贡献\" class=\"headerlink\" title=\"开源贡献\"></a>开源贡献</h3><p>拥抱开源，这样才能让社区，乃至行业发展更有动力，哎，似曾相识的赶脚，😂</p>\n<blockquote>\n<p>注：例如，你的 star 是对我最大的鼓励，是支持我继续开源的动力，😄</p>\n</blockquote>\n<ul>\n<li>awesome-vue 社区 <a href=\"https://github.com/vuejs/awesome-vue\" target=\"_blank\" rel=\"noopener\">awesome-vue</a></li>\n<li>其他社区，可以到 <code>Github</code> 探索</li>\n</ul>\n<h3 id=\"完结撒花🎉\"><a href=\"#完结撒花🎉\" class=\"headerlink\" title=\"完结撒花🎉\"></a>完结撒花🎉</h3><p>👏 再次欢迎大家一起和我搞 ji 由（<a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">Github</a>）😊 </p>\n<ul>\n<li>项目地址 <a href=\"https://github.com/Yangfan2016/vue-yan-progress\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016/vue-yan-progress</a>   </li>\n<li>博客原文 <a href=\"https://yangfan2016.github.io\" target=\"_blank\" rel=\"noopener\">https://yangfan2016.github.io</a>  </li>\n<li>react-yan-progress <a href=\"https://github.com/Yangfan2016/react-yan-progress\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016/react-yan-progress</a>  </li>\n<li>vue-yan-progress <a href=\"https://github.com/Yangfan2016/vue-yan-progress\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016/vue-yan-progress</a>  </li>\n</ul>\n"},{"title":"教你快速搭建个人博客","date":"2017-02-03T12:15:55.000Z","_content":"\n\n### 基于HEXO博客框架和Github搭建个人博客简单教程\n\nAuthor: [Yangfan](https://github.com/Yangfan2016)  \nTime: 2017-02-03  \n\n![poster](http://upload-images.jianshu.io/upload_images/1400844-40d8b2e5a0a5c036?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n> #### 准备工作 \n \n配置环境\n\n安装[Node.js](https://nodejs.org/en/)  \n安装[Git](https://git-scm.com/)   \n注册[GitHub](https://github.com)    \n\n\n> #### Hexo 部分\n\n\n 1. Hexo简介  \n Hexo 是一个轻量的静态博客框架。通过Hexo可以快速生成一个静态博客框架,仅需要几条命令就可以完成,相当方便。  \n而架设Hexo的环境更简单了 不需要 lnmp/lamp/XAMPP 这些繁琐复杂的环境 仅仅需要一个简单的http服务器即可使用 或者使用互联网上免费的页面托管服务\n![hexo](http://upload.chinaz.com/2016/0105/1451965733809.jpg)\n\n 1. Hexo安装方法\n 参考[官网](https://hexo.io)中文文档,只需要一条命令即可自动安装hexo框架。\n `$ npm install -g hexo-cli #使用 npm 安装 Hexo`\n\n \n 1. 初始化\n 创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令：  \n `hexo init`\n 1. 生成静态页面  \n 继续再Blog目录下执行如下命令，生成静态页面\n `hexo generate （或者 hexo g）` \n\n 1. 本地启动  \n 启动本地服务，进行文章预览调试，命令：\n `hexo server` \n 1. 本地测试  \n 浏览器输入 http://localhost:4000\n \n\n>  #### Github 部分\n\n 1. 注册github  \n [Github](https://github.com)\n 2. 新建仓库\n 建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】， **固定写法**  !!!\n 3. 本地_config.yml文配置件，建立关联\n 我们需要_config.yml文件，来建立关联(注意冒号后面要有空格)\n\n```\n\ndeploy:  \n   type: git   \n   repository: https://github.com/leopardpan/  leopardpan.github.io.git  \n   branch: master  \n\n```\n\n> #### 部署\n\n执行如下命令才能使用git部署  \n``npm install hexo-deployer-git --save``  \n(我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。)\n 执行配置命令：  \n``hexo deploy``  \n然后再浏览器中输入http://username.github.io/就行了，把 username ,改成你 github 的账户名就行了\n\n> #### 发文章\n\n\n每次部署的步骤，可按以下三步来进行。\n\n```\n\nhexo clean  \nhexo generate  \nhexo deploy  \n\n```\n\n一些常用命令：\n\n```\n\nhexo new \"postName\" #新建文章  \nhexo new page \"pageName\" #新建页面  \nhexo generate #生成静态页面至public目录  \nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）  \nhexo deploy #将.deploy目录部署到GitHub  \nhexo help  #查看帮助  \nhexo version  #查看Hexo的版本  \n\n```\n\n\n---\n参考：  \n1. http://www.jianshu.com/p/465830080ea9  \n2. http://www.chinaz.com/web/2016/0105/491998.shtml","source":"_posts/教你快速搭建个人博客.md","raw":"---\ntitle: 教你快速搭建个人博客  \ndate: 2017-02-03 20:15:55  \ntags: [博客,建站,Hexo]  \n---\n\n\n### 基于HEXO博客框架和Github搭建个人博客简单教程\n\nAuthor: [Yangfan](https://github.com/Yangfan2016)  \nTime: 2017-02-03  \n\n![poster](http://upload-images.jianshu.io/upload_images/1400844-40d8b2e5a0a5c036?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n> #### 准备工作 \n \n配置环境\n\n安装[Node.js](https://nodejs.org/en/)  \n安装[Git](https://git-scm.com/)   \n注册[GitHub](https://github.com)    \n\n\n> #### Hexo 部分\n\n\n 1. Hexo简介  \n Hexo 是一个轻量的静态博客框架。通过Hexo可以快速生成一个静态博客框架,仅需要几条命令就可以完成,相当方便。  \n而架设Hexo的环境更简单了 不需要 lnmp/lamp/XAMPP 这些繁琐复杂的环境 仅仅需要一个简单的http服务器即可使用 或者使用互联网上免费的页面托管服务\n![hexo](http://upload.chinaz.com/2016/0105/1451965733809.jpg)\n\n 1. Hexo安装方法\n 参考[官网](https://hexo.io)中文文档,只需要一条命令即可自动安装hexo框架。\n `$ npm install -g hexo-cli #使用 npm 安装 Hexo`\n\n \n 1. 初始化\n 创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令：  \n `hexo init`\n 1. 生成静态页面  \n 继续再Blog目录下执行如下命令，生成静态页面\n `hexo generate （或者 hexo g）` \n\n 1. 本地启动  \n 启动本地服务，进行文章预览调试，命令：\n `hexo server` \n 1. 本地测试  \n 浏览器输入 http://localhost:4000\n \n\n>  #### Github 部分\n\n 1. 注册github  \n [Github](https://github.com)\n 2. 新建仓库\n 建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】， **固定写法**  !!!\n 3. 本地_config.yml文配置件，建立关联\n 我们需要_config.yml文件，来建立关联(注意冒号后面要有空格)\n\n```\n\ndeploy:  \n   type: git   \n   repository: https://github.com/leopardpan/  leopardpan.github.io.git  \n   branch: master  \n\n```\n\n> #### 部署\n\n执行如下命令才能使用git部署  \n``npm install hexo-deployer-git --save``  \n(我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。)\n 执行配置命令：  \n``hexo deploy``  \n然后再浏览器中输入http://username.github.io/就行了，把 username ,改成你 github 的账户名就行了\n\n> #### 发文章\n\n\n每次部署的步骤，可按以下三步来进行。\n\n```\n\nhexo clean  \nhexo generate  \nhexo deploy  \n\n```\n\n一些常用命令：\n\n```\n\nhexo new \"postName\" #新建文章  \nhexo new page \"pageName\" #新建页面  \nhexo generate #生成静态页面至public目录  \nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）  \nhexo deploy #将.deploy目录部署到GitHub  \nhexo help  #查看帮助  \nhexo version  #查看Hexo的版本  \n\n```\n\n\n---\n参考：  \n1. http://www.jianshu.com/p/465830080ea9  \n2. http://www.chinaz.com/web/2016/0105/491998.shtml","slug":"教你快速搭建个人博客","published":1,"updated":"2019-04-25T09:01:06.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaujx000iaeyytioumvi9","content":"<h3 id=\"基于HEXO博客框架和Github搭建个人博客简单教程\"><a href=\"#基于HEXO博客框架和Github搭建个人博客简单教程\" class=\"headerlink\" title=\"基于HEXO博客框架和Github搭建个人博客简单教程\"></a>基于HEXO博客框架和Github搭建个人博客简单教程</h3><p>Author: <a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">Yangfan</a><br>Time: 2017-02-03  </p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1400844-40d8b2e5a0a5c036?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"poster\"></p>\n<blockquote>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4></blockquote>\n<p>配置环境</p>\n<p>安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a><br>安装<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a><br>注册<a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">GitHub</a>    </p>\n<blockquote>\n<h4 id=\"Hexo-部分\"><a href=\"#Hexo-部分\" class=\"headerlink\" title=\"Hexo 部分\"></a>Hexo 部分</h4></blockquote>\n<ol>\n<li><p>Hexo简介<br>Hexo 是一个轻量的静态博客框架。通过Hexo可以快速生成一个静态博客框架,仅需要几条命令就可以完成,相当方便。<br>而架设Hexo的环境更简单了 不需要 lnmp/lamp/XAMPP 这些繁琐复杂的环境 仅仅需要一个简单的http服务器即可使用 或者使用互联网上免费的页面托管服务</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://upload.chinaz.com/2016/0105/1451965733809.jpg\" alt=\"hexo\" title=\"\">\n                </div>\n                <div class=\"image-caption\">hexo</div>\n            </figure>\n</li>\n<li><p>Hexo安装方法<br>参考<a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">官网</a>中文文档,只需要一条命令即可自动安装hexo框架。<br><code>$ npm install -g hexo-cli #使用 npm 安装 Hexo</code></p>\n</li>\n</ol>\n<ol>\n<li>初始化<br>创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令：<br><code>hexo init</code></li>\n<li><p>生成静态页面<br>继续再Blog目录下执行如下命令，生成静态页面<br><code>hexo generate （或者 hexo g）</code> </p>\n</li>\n<li><p>本地启动<br>启动本地服务，进行文章预览调试，命令：<br><code>hexo server</code> </p>\n</li>\n<li>本地测试<br>浏览器输入 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></li>\n</ol>\n<blockquote>\n<h4 id=\"Github-部分\"><a href=\"#Github-部分\" class=\"headerlink\" title=\"Github 部分\"></a>Github 部分</h4></blockquote>\n<ol>\n<li>注册github<br><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">Github</a></li>\n<li>新建仓库<br>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】， <strong>固定写法</strong>  !!!</li>\n<li>本地_config.yml文配置件，建立关联<br>我们需要_config.yml文件，来建立关联(注意冒号后面要有空格)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">deploy:  </span><br><span class=\"line\">   type: git   </span><br><span class=\"line\">   repository: https://github.com/leopardpan/  leopardpan.github.io.git  </span><br><span class=\"line\">   branch: master</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4></blockquote>\n<p>执行如下命令才能使用git部署<br><code>npm install hexo-deployer-git --save</code><br>(我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。)<br> 执行配置命令：<br><code>hexo deploy</code><br>然后再浏览器中输入<a href=\"http://username.github.io/就行了，把\" target=\"_blank\" rel=\"noopener\">http://username.github.io/就行了，把</a> username ,改成你 github 的账户名就行了</p>\n<blockquote>\n<h4 id=\"发文章\"><a href=\"#发文章\" class=\"headerlink\" title=\"发文章\"></a>发文章</h4></blockquote>\n<p>每次部署的步骤，可按以下三步来进行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hexo clean  </span><br><span class=\"line\">hexo generate  </span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>一些常用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hexo new &quot;postName&quot; #新建文章  </span><br><span class=\"line\">hexo new page &quot;pageName&quot; #新建页面  </span><br><span class=\"line\">hexo generate #生成静态页面至public目录  </span><br><span class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）  </span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub  </span><br><span class=\"line\">hexo help  #查看帮助  </span><br><span class=\"line\">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure>\n<hr>\n<p>参考：  </p>\n<ol>\n<li><a href=\"http://www.jianshu.com/p/465830080ea9\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/465830080ea9</a>  </li>\n<li><a href=\"http://www.chinaz.com/web/2016/0105/491998.shtml\" target=\"_blank\" rel=\"noopener\">http://www.chinaz.com/web/2016/0105/491998.shtml</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基于HEXO博客框架和Github搭建个人博客简单教程\"><a href=\"#基于HEXO博客框架和Github搭建个人博客简单教程\" class=\"headerlink\" title=\"基于HEXO博客框架和Github搭建个人博客简单教程\"></a>基于HEXO博客框架和Github搭建个人博客简单教程</h3><p>Author: <a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">Yangfan</a><br>Time: 2017-02-03  </p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1400844-40d8b2e5a0a5c036?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"poster\"></p>\n<blockquote>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4></blockquote>\n<p>配置环境</p>\n<p>安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a><br>安装<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a><br>注册<a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">GitHub</a>    </p>\n<blockquote>\n<h4 id=\"Hexo-部分\"><a href=\"#Hexo-部分\" class=\"headerlink\" title=\"Hexo 部分\"></a>Hexo 部分</h4></blockquote>\n<ol>\n<li><p>Hexo简介<br>Hexo 是一个轻量的静态博客框架。通过Hexo可以快速生成一个静态博客框架,仅需要几条命令就可以完成,相当方便。<br>而架设Hexo的环境更简单了 不需要 lnmp/lamp/XAMPP 这些繁琐复杂的环境 仅仅需要一个简单的http服务器即可使用 或者使用互联网上免费的页面托管服务</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://upload.chinaz.com/2016/0105/1451965733809.jpg\" alt=\"hexo\" title=\"\">\n                </div>\n                <div class=\"image-caption\">hexo</div>\n            </figure>\n</li>\n<li><p>Hexo安装方法<br>参考<a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">官网</a>中文文档,只需要一条命令即可自动安装hexo框架。<br><code>$ npm install -g hexo-cli #使用 npm 安装 Hexo</code></p>\n</li>\n</ol>\n<ol>\n<li>初始化<br>创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令：<br><code>hexo init</code></li>\n<li><p>生成静态页面<br>继续再Blog目录下执行如下命令，生成静态页面<br><code>hexo generate （或者 hexo g）</code> </p>\n</li>\n<li><p>本地启动<br>启动本地服务，进行文章预览调试，命令：<br><code>hexo server</code> </p>\n</li>\n<li>本地测试<br>浏览器输入 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></li>\n</ol>\n<blockquote>\n<h4 id=\"Github-部分\"><a href=\"#Github-部分\" class=\"headerlink\" title=\"Github 部分\"></a>Github 部分</h4></blockquote>\n<ol>\n<li>注册github<br><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">Github</a></li>\n<li>新建仓库<br>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】， <strong>固定写法</strong>  !!!</li>\n<li>本地_config.yml文配置件，建立关联<br>我们需要_config.yml文件，来建立关联(注意冒号后面要有空格)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">deploy:  </span><br><span class=\"line\">   type: git   </span><br><span class=\"line\">   repository: https://github.com/leopardpan/  leopardpan.github.io.git  </span><br><span class=\"line\">   branch: master</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4></blockquote>\n<p>执行如下命令才能使用git部署<br><code>npm install hexo-deployer-git --save</code><br>(我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。)<br> 执行配置命令：<br><code>hexo deploy</code><br>然后再浏览器中输入<a href=\"http://username.github.io/就行了，把\" target=\"_blank\" rel=\"noopener\">http://username.github.io/就行了，把</a> username ,改成你 github 的账户名就行了</p>\n<blockquote>\n<h4 id=\"发文章\"><a href=\"#发文章\" class=\"headerlink\" title=\"发文章\"></a>发文章</h4></blockquote>\n<p>每次部署的步骤，可按以下三步来进行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hexo clean  </span><br><span class=\"line\">hexo generate  </span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>一些常用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hexo new &quot;postName&quot; #新建文章  </span><br><span class=\"line\">hexo new page &quot;pageName&quot; #新建页面  </span><br><span class=\"line\">hexo generate #生成静态页面至public目录  </span><br><span class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）  </span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub  </span><br><span class=\"line\">hexo help  #查看帮助  </span><br><span class=\"line\">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure>\n<hr>\n<p>参考：  </p>\n<ol>\n<li><a href=\"http://www.jianshu.com/p/465830080ea9\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/465830080ea9</a>  </li>\n<li><a href=\"http://www.chinaz.com/web/2016/0105/491998.shtml\" target=\"_blank\" rel=\"noopener\">http://www.chinaz.com/web/2016/0105/491998.shtml</a></li>\n</ol>\n"},{"title":"浏览器杂谈","date":"2018-06-05T02:56:31.000Z","_content":"\n## 浏览器缓存（协议层的缓存）\n> 主要分为强缓存和协商缓存，详情 [https://segmentfault.com/a/1190000011212929](https://segmentfault.com/a/1190000011212929)\n\n1. 强缓存   \n    浏览器会先获取该资源缓存的header信息，根据其中的`Expires`和`Cahe-control`判断是否命中强缓存，若命中则直接从缓存中获取资源\n\n1. 协商缓存  \n    如果没有命中强缓存，浏览器会发送请求到服务器，该请求会携带第一次请求返回的有关缓存的header字段信息（`Last-Modified`/`IF-Modified-Since`、`Etag`/`IF-None-Match`）,由服务器根据请求中的相关header信息来对比结果是否命中协商缓存，若命中，则服务器返回新的响应header信息更新缓存中的对应header信息，但是并不返回资源内容，它会告知浏览器可以直接从缓存获取；否则返回最新的资源内容\n\n## reflow(重排)和repaint(重绘)\n\n> reflow & repaint   \n[https://www.jianshu.com/p/40c6fc1d4800](https://www.jianshu.com/p/40c6fc1d4800)  \n[http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html](http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html)\n\n#### 浏览器解析网页的过程\n1. HTML代码转化成DOM\n1. CSS代码转化成CSSOM（CSS Object Model）\n1. 结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）\n1. 生成布局（layout），即将所有渲染树的所有节点进行平面合成\n1. 将布局绘制（paint）在屏幕上\n\n#### 重排与重绘\n- 重排：渲染树的结点发生了结构性变化，例如宽度、高度或者位置上的变化时，那么会触发reflow(重排)的逻辑。第一次进入一个页面时便会至少触发一次重排。\n\n- 重绘：渲染树结点发生了非结构性变化，例如背景色等的变化时，那么会触发repaint(重绘)。\n\n\n## AST（抽象语法树）\n\n#### 定义\n\n抽象语法树（[Abstract Syntax Tree](http://www.iteye.com/news/30731)）也称为AST语法树，指的是源代码语法所对应的树状结构。也就是说，对于一种具体编程语言下的源代码，通过构建语法树的形式将源代码中的语句映射到树中的每一个节点上\n\n#### 应用\n\n抽象语法树的作用非常的多，比如编译器、IDE、压缩优化代码等。在JavaScript中，虽然我们并不会常常与AST直接打交道，但却也会经常的涉及到它。例如使用UglifyJS来压缩代码，实际这背后就是在对JavaScript的抽象语法树进行操作，例如 [Babel编译ES6的代码](https://www.cnblogs.com/tugenhua0707/p/7863616.html)\n\n","source":"_posts/浏览器杂谈.md","raw":"---\ntitle: 浏览器杂谈\ndate: 2018-06-05 10:56:31\ntags:\n---\n\n## 浏览器缓存（协议层的缓存）\n> 主要分为强缓存和协商缓存，详情 [https://segmentfault.com/a/1190000011212929](https://segmentfault.com/a/1190000011212929)\n\n1. 强缓存   \n    浏览器会先获取该资源缓存的header信息，根据其中的`Expires`和`Cahe-control`判断是否命中强缓存，若命中则直接从缓存中获取资源\n\n1. 协商缓存  \n    如果没有命中强缓存，浏览器会发送请求到服务器，该请求会携带第一次请求返回的有关缓存的header字段信息（`Last-Modified`/`IF-Modified-Since`、`Etag`/`IF-None-Match`）,由服务器根据请求中的相关header信息来对比结果是否命中协商缓存，若命中，则服务器返回新的响应header信息更新缓存中的对应header信息，但是并不返回资源内容，它会告知浏览器可以直接从缓存获取；否则返回最新的资源内容\n\n## reflow(重排)和repaint(重绘)\n\n> reflow & repaint   \n[https://www.jianshu.com/p/40c6fc1d4800](https://www.jianshu.com/p/40c6fc1d4800)  \n[http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html](http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html)\n\n#### 浏览器解析网页的过程\n1. HTML代码转化成DOM\n1. CSS代码转化成CSSOM（CSS Object Model）\n1. 结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）\n1. 生成布局（layout），即将所有渲染树的所有节点进行平面合成\n1. 将布局绘制（paint）在屏幕上\n\n#### 重排与重绘\n- 重排：渲染树的结点发生了结构性变化，例如宽度、高度或者位置上的变化时，那么会触发reflow(重排)的逻辑。第一次进入一个页面时便会至少触发一次重排。\n\n- 重绘：渲染树结点发生了非结构性变化，例如背景色等的变化时，那么会触发repaint(重绘)。\n\n\n## AST（抽象语法树）\n\n#### 定义\n\n抽象语法树（[Abstract Syntax Tree](http://www.iteye.com/news/30731)）也称为AST语法树，指的是源代码语法所对应的树状结构。也就是说，对于一种具体编程语言下的源代码，通过构建语法树的形式将源代码中的语句映射到树中的每一个节点上\n\n#### 应用\n\n抽象语法树的作用非常的多，比如编译器、IDE、压缩优化代码等。在JavaScript中，虽然我们并不会常常与AST直接打交道，但却也会经常的涉及到它。例如使用UglifyJS来压缩代码，实际这背后就是在对JavaScript的抽象语法树进行操作，例如 [Babel编译ES6的代码](https://www.cnblogs.com/tugenhua0707/p/7863616.html)\n\n","slug":"浏览器杂谈","published":1,"updated":"2019-04-25T09:00:54.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaujy000jaeyyrh27eniv","content":"<h2 id=\"浏览器缓存（协议层的缓存）\"><a href=\"#浏览器缓存（协议层的缓存）\" class=\"headerlink\" title=\"浏览器缓存（协议层的缓存）\"></a>浏览器缓存（协议层的缓存）</h2><blockquote>\n<p>主要分为强缓存和协商缓存，详情 <a href=\"https://segmentfault.com/a/1190000011212929\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000011212929</a></p>\n</blockquote>\n<ol>\n<li><p>强缓存<br> 浏览器会先获取该资源缓存的header信息，根据其中的<code>Expires</code>和<code>Cahe-control</code>判断是否命中强缓存，若命中则直接从缓存中获取资源</p>\n</li>\n<li><p>协商缓存<br> 如果没有命中强缓存，浏览器会发送请求到服务器，该请求会携带第一次请求返回的有关缓存的header字段信息（<code>Last-Modified</code>/<code>IF-Modified-Since</code>、<code>Etag</code>/<code>IF-None-Match</code>）,由服务器根据请求中的相关header信息来对比结果是否命中协商缓存，若命中，则服务器返回新的响应header信息更新缓存中的对应header信息，但是并不返回资源内容，它会告知浏览器可以直接从缓存获取；否则返回最新的资源内容</p>\n</li>\n</ol>\n<h2 id=\"reflow-重排-和repaint-重绘\"><a href=\"#reflow-重排-和repaint-重绘\" class=\"headerlink\" title=\"reflow(重排)和repaint(重绘)\"></a>reflow(重排)和repaint(重绘)</h2><blockquote>\n<p>reflow &amp; repaint<br><a href=\"https://www.jianshu.com/p/40c6fc1d4800\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/40c6fc1d4800</a><br><a href=\"http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html</a></p>\n</blockquote>\n<h4 id=\"浏览器解析网页的过程\"><a href=\"#浏览器解析网页的过程\" class=\"headerlink\" title=\"浏览器解析网页的过程\"></a>浏览器解析网页的过程</h4><ol>\n<li>HTML代码转化成DOM</li>\n<li>CSS代码转化成CSSOM（CSS Object Model）</li>\n<li>结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）</li>\n<li>生成布局（layout），即将所有渲染树的所有节点进行平面合成</li>\n<li>将布局绘制（paint）在屏幕上</li>\n</ol>\n<h4 id=\"重排与重绘\"><a href=\"#重排与重绘\" class=\"headerlink\" title=\"重排与重绘\"></a>重排与重绘</h4><ul>\n<li><p>重排：渲染树的结点发生了结构性变化，例如宽度、高度或者位置上的变化时，那么会触发reflow(重排)的逻辑。第一次进入一个页面时便会至少触发一次重排。</p>\n</li>\n<li><p>重绘：渲染树结点发生了非结构性变化，例如背景色等的变化时，那么会触发repaint(重绘)。</p>\n</li>\n</ul>\n<h2 id=\"AST（抽象语法树）\"><a href=\"#AST（抽象语法树）\" class=\"headerlink\" title=\"AST（抽象语法树）\"></a>AST（抽象语法树）</h2><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>抽象语法树（<a href=\"http://www.iteye.com/news/30731\" target=\"_blank\" rel=\"noopener\">Abstract Syntax Tree</a>）也称为AST语法树，指的是源代码语法所对应的树状结构。也就是说，对于一种具体编程语言下的源代码，通过构建语法树的形式将源代码中的语句映射到树中的每一个节点上</p>\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><p>抽象语法树的作用非常的多，比如编译器、IDE、压缩优化代码等。在JavaScript中，虽然我们并不会常常与AST直接打交道，但却也会经常的涉及到它。例如使用UglifyJS来压缩代码，实际这背后就是在对JavaScript的抽象语法树进行操作，例如 <a href=\"https://www.cnblogs.com/tugenhua0707/p/7863616.html\" target=\"_blank\" rel=\"noopener\">Babel编译ES6的代码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"浏览器缓存（协议层的缓存）\"><a href=\"#浏览器缓存（协议层的缓存）\" class=\"headerlink\" title=\"浏览器缓存（协议层的缓存）\"></a>浏览器缓存（协议层的缓存）</h2><blockquote>\n<p>主要分为强缓存和协商缓存，详情 <a href=\"https://segmentfault.com/a/1190000011212929\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000011212929</a></p>\n</blockquote>\n<ol>\n<li><p>强缓存<br> 浏览器会先获取该资源缓存的header信息，根据其中的<code>Expires</code>和<code>Cahe-control</code>判断是否命中强缓存，若命中则直接从缓存中获取资源</p>\n</li>\n<li><p>协商缓存<br> 如果没有命中强缓存，浏览器会发送请求到服务器，该请求会携带第一次请求返回的有关缓存的header字段信息（<code>Last-Modified</code>/<code>IF-Modified-Since</code>、<code>Etag</code>/<code>IF-None-Match</code>）,由服务器根据请求中的相关header信息来对比结果是否命中协商缓存，若命中，则服务器返回新的响应header信息更新缓存中的对应header信息，但是并不返回资源内容，它会告知浏览器可以直接从缓存获取；否则返回最新的资源内容</p>\n</li>\n</ol>\n<h2 id=\"reflow-重排-和repaint-重绘\"><a href=\"#reflow-重排-和repaint-重绘\" class=\"headerlink\" title=\"reflow(重排)和repaint(重绘)\"></a>reflow(重排)和repaint(重绘)</h2><blockquote>\n<p>reflow &amp; repaint<br><a href=\"https://www.jianshu.com/p/40c6fc1d4800\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/40c6fc1d4800</a><br><a href=\"http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html</a></p>\n</blockquote>\n<h4 id=\"浏览器解析网页的过程\"><a href=\"#浏览器解析网页的过程\" class=\"headerlink\" title=\"浏览器解析网页的过程\"></a>浏览器解析网页的过程</h4><ol>\n<li>HTML代码转化成DOM</li>\n<li>CSS代码转化成CSSOM（CSS Object Model）</li>\n<li>结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）</li>\n<li>生成布局（layout），即将所有渲染树的所有节点进行平面合成</li>\n<li>将布局绘制（paint）在屏幕上</li>\n</ol>\n<h4 id=\"重排与重绘\"><a href=\"#重排与重绘\" class=\"headerlink\" title=\"重排与重绘\"></a>重排与重绘</h4><ul>\n<li><p>重排：渲染树的结点发生了结构性变化，例如宽度、高度或者位置上的变化时，那么会触发reflow(重排)的逻辑。第一次进入一个页面时便会至少触发一次重排。</p>\n</li>\n<li><p>重绘：渲染树结点发生了非结构性变化，例如背景色等的变化时，那么会触发repaint(重绘)。</p>\n</li>\n</ul>\n<h2 id=\"AST（抽象语法树）\"><a href=\"#AST（抽象语法树）\" class=\"headerlink\" title=\"AST（抽象语法树）\"></a>AST（抽象语法树）</h2><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>抽象语法树（<a href=\"http://www.iteye.com/news/30731\" target=\"_blank\" rel=\"noopener\">Abstract Syntax Tree</a>）也称为AST语法树，指的是源代码语法所对应的树状结构。也就是说，对于一种具体编程语言下的源代码，通过构建语法树的形式将源代码中的语句映射到树中的每一个节点上</p>\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><p>抽象语法树的作用非常的多，比如编译器、IDE、压缩优化代码等。在JavaScript中，虽然我们并不会常常与AST直接打交道，但却也会经常的涉及到它。例如使用UglifyJS来压缩代码，实际这背后就是在对JavaScript的抽象语法树进行操作，例如 <a href=\"https://www.cnblogs.com/tugenhua0707/p/7863616.html\" target=\"_blank\" rel=\"noopener\">Babel编译ES6的代码</a></p>\n"},{"title":"HTML+CSS+JAVASCRIPT 网易云音乐播放器","date":"2017-02-18T12:15:55.000Z","_content":"\n\n## HTML+CSS+JAVASCRIPT 高仿低配网页版网易云音乐播放器\n\n![app-poster](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc.gif)\n\n### 前言\n\n没有使用任何框架，只是想用最简单纯js的代码实现下  \n- 前台: Javascript+jQuery  \n- 后台: php/nodejs（php是参考网上的例子写的，nodejs代码是在php的基础上重新写的）  \n- 还有她的姊妹篇（网易云音乐移动端），请查看这里  [https://github.com/Yangfan2016/cloud-music-mobile#cloud-music-mobile](https://github.com/Yangfan2016/cloud-music-mobile#cloud-music-mobile)\n\n### 写在前头的话\n\n鄙人野生前端一只，gis专业，自学前端已经一年多了，为什么要写个音乐播放器呢？原因有两个：  \n1. 本人是网易云音乐的重度用户，近乎疯狂  \n2. 自学了前端这么久了，也是想检验下自己的成果吧\n\n### 本播放器要干什么呢\n\n1. 简单的 **播放** **暂停** 那当然不能少\n2. 切换歌曲，**上一首** 、 **下一首** 也得有\n3. **进度条** ，这个有点复杂，本来想用 input[range] 写，但是样式不好改，自己用多个div代替吧\n4. 进度条都有了，**音量调节** 不能少吧，毕竟他俩UI样式差不多，照猫画虎呗\n5. 再加一个 **静音功能** ，省的音乐太大声，邻居找茬哦(⊙o⊙)\n\n### 本播放器还能干什么呢\n\n1. **歌词滚动** 有木有\n2. **搜索单曲** \n3. **指定歌单播放**  这个需要知道歌单的 id 不是很好找，（得上[网易云音乐官网](http://music.163.com )登录自己的账号，找到歌单，点进去，抬头看URL 里最后的 id 参数）暂时用的是“我喜欢的音乐”（歌单）的id\n\n![music-163](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc-wins003.JPG)\n\n### 那闲话不多说，开整吧（原谅一个理科生的表达能力）\n\n我模仿的是网易云音乐的PC端，所用到的技术都是前端的基本技术 HTML、CSS、JAVASCRIPT  \n由于我是自学的，没有那么多规矩，我这个人看到是我感兴趣的，我立马就会去做，这个播放器也不例外。\n\n> 首先先的将它“画”出来（HTML+CSS）\n\n我仔细看了下网易云音乐PC端的布局，大致分为四部分，四个模块\n\n1. 顶部菜单（顶部导航，叫什么名无所谓了）\n2. 底部播放条 这是播放器的核心\n3. 主体内容在右边 歌单的详细信息和歌曲列表\n4. 左侧是导航和歌单组\n5. 左下角还有一个小窗，显示正在播放歌曲的简要信息，点击小窗 展开一个歌曲详情页\n\n无图不真相\n![pc-music](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc-wins001.JPG)\n![pc-music](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc-wins002.JPG)\n\n\n> 然后呢，写页面逻辑JavaScript\n\n### 播放器\n\n1. 播放器的控制按钮\n播放(暂停)按钮，这个可以通过` play() `和` pause()`方法实现\n2. 进度条\n这个通过监听`timeupdate`事件，实施更新当前播放位置，\n通过监听鼠标移动事件，改变进度条的长度\n3. 静音按钮，可以通过`audio.muted=true`实现\n\n\n### 初始化歌单列表\n\n网易云音乐获取歌单的API \nhttp://music.163.com/api/playlist/detail?id=[id]\n\n\tid 歌单id\n\n因为涉及到跨域问题。暂时我前台这边又没有办法跨域，所以参考了网上的代码，~~写个PHP做代理~~ （2018-09-14更新：现在代码已改为Nodejs做代理服务），这样就不存在跨域问题了。\n获取到歌单数据后，重新渲染下DOM\n\n\n### 搜索歌曲\n\n网易云音乐获取歌曲的API  \nhttp://s.music.163.com/search/get?s=[songname]&type=1&limit=10\n\n\ts           搜索内容\n\ttype        搜索类型\n\tlimit       搜索返回结果数\n\n\n### 歌曲详情页\n\n主要是歌词和歌词滚动\n\n网易云音乐获取歌词API  \nhttp://music.163.com/api/song/lyric?os=pc&id=[id]\n\n\tid 歌曲id\n\n歌词滚动，先把获取到的歌词数据分割成时间点和歌词两部分，将这两部分存入dataset中，\n通过监听timeupdate事件，判断和当前播放时间相近的歌词，记录它的getBoundingClient()的top值，将滚动条设置到指定位置 例如：`ele.srcollTop=100;`\n\n\n### 先写到这里吧\n\n总结能力太差了，原谅理科生的无奈\n\n\n### 附录\n\n[完整源码，点击查看](https://github.com/Yangfan2016/cloud-music-web)  \n[后台代码，点击查看](https://github.com/Yangfan2016/cloud-music-web/tree/master/server)\n\n此文源自我的[博客](https://yangfan2016.github.io/2017/02/18/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/)\n\n#### 大佬，给个[start](https://github.com/Yangfan2016/cloud-music-web)呗^_^","source":"_posts/网易云音乐播放器.md","raw":"---\ntitle: HTML+CSS+JAVASCRIPT 网易云音乐播放器  \ndate: 2017-02-18 20:15:55  \ntags: [前端,音乐播放器]  \n---\n\n\n## HTML+CSS+JAVASCRIPT 高仿低配网页版网易云音乐播放器\n\n![app-poster](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc.gif)\n\n### 前言\n\n没有使用任何框架，只是想用最简单纯js的代码实现下  \n- 前台: Javascript+jQuery  \n- 后台: php/nodejs（php是参考网上的例子写的，nodejs代码是在php的基础上重新写的）  \n- 还有她的姊妹篇（网易云音乐移动端），请查看这里  [https://github.com/Yangfan2016/cloud-music-mobile#cloud-music-mobile](https://github.com/Yangfan2016/cloud-music-mobile#cloud-music-mobile)\n\n### 写在前头的话\n\n鄙人野生前端一只，gis专业，自学前端已经一年多了，为什么要写个音乐播放器呢？原因有两个：  \n1. 本人是网易云音乐的重度用户，近乎疯狂  \n2. 自学了前端这么久了，也是想检验下自己的成果吧\n\n### 本播放器要干什么呢\n\n1. 简单的 **播放** **暂停** 那当然不能少\n2. 切换歌曲，**上一首** 、 **下一首** 也得有\n3. **进度条** ，这个有点复杂，本来想用 input[range] 写，但是样式不好改，自己用多个div代替吧\n4. 进度条都有了，**音量调节** 不能少吧，毕竟他俩UI样式差不多，照猫画虎呗\n5. 再加一个 **静音功能** ，省的音乐太大声，邻居找茬哦(⊙o⊙)\n\n### 本播放器还能干什么呢\n\n1. **歌词滚动** 有木有\n2. **搜索单曲** \n3. **指定歌单播放**  这个需要知道歌单的 id 不是很好找，（得上[网易云音乐官网](http://music.163.com )登录自己的账号，找到歌单，点进去，抬头看URL 里最后的 id 参数）暂时用的是“我喜欢的音乐”（歌单）的id\n\n![music-163](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc-wins003.JPG)\n\n### 那闲话不多说，开整吧（原谅一个理科生的表达能力）\n\n我模仿的是网易云音乐的PC端，所用到的技术都是前端的基本技术 HTML、CSS、JAVASCRIPT  \n由于我是自学的，没有那么多规矩，我这个人看到是我感兴趣的，我立马就会去做，这个播放器也不例外。\n\n> 首先先的将它“画”出来（HTML+CSS）\n\n我仔细看了下网易云音乐PC端的布局，大致分为四部分，四个模块\n\n1. 顶部菜单（顶部导航，叫什么名无所谓了）\n2. 底部播放条 这是播放器的核心\n3. 主体内容在右边 歌单的详细信息和歌曲列表\n4. 左侧是导航和歌单组\n5. 左下角还有一个小窗，显示正在播放歌曲的简要信息，点击小窗 展开一个歌曲详情页\n\n无图不真相\n![pc-music](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc-wins001.JPG)\n![pc-music](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc-wins002.JPG)\n\n\n> 然后呢，写页面逻辑JavaScript\n\n### 播放器\n\n1. 播放器的控制按钮\n播放(暂停)按钮，这个可以通过` play() `和` pause()`方法实现\n2. 进度条\n这个通过监听`timeupdate`事件，实施更新当前播放位置，\n通过监听鼠标移动事件，改变进度条的长度\n3. 静音按钮，可以通过`audio.muted=true`实现\n\n\n### 初始化歌单列表\n\n网易云音乐获取歌单的API \nhttp://music.163.com/api/playlist/detail?id=[id]\n\n\tid 歌单id\n\n因为涉及到跨域问题。暂时我前台这边又没有办法跨域，所以参考了网上的代码，~~写个PHP做代理~~ （2018-09-14更新：现在代码已改为Nodejs做代理服务），这样就不存在跨域问题了。\n获取到歌单数据后，重新渲染下DOM\n\n\n### 搜索歌曲\n\n网易云音乐获取歌曲的API  \nhttp://s.music.163.com/search/get?s=[songname]&type=1&limit=10\n\n\ts           搜索内容\n\ttype        搜索类型\n\tlimit       搜索返回结果数\n\n\n### 歌曲详情页\n\n主要是歌词和歌词滚动\n\n网易云音乐获取歌词API  \nhttp://music.163.com/api/song/lyric?os=pc&id=[id]\n\n\tid 歌曲id\n\n歌词滚动，先把获取到的歌词数据分割成时间点和歌词两部分，将这两部分存入dataset中，\n通过监听timeupdate事件，判断和当前播放时间相近的歌词，记录它的getBoundingClient()的top值，将滚动条设置到指定位置 例如：`ele.srcollTop=100;`\n\n\n### 先写到这里吧\n\n总结能力太差了，原谅理科生的无奈\n\n\n### 附录\n\n[完整源码，点击查看](https://github.com/Yangfan2016/cloud-music-web)  \n[后台代码，点击查看](https://github.com/Yangfan2016/cloud-music-web/tree/master/server)\n\n此文源自我的[博客](https://yangfan2016.github.io/2017/02/18/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/)\n\n#### 大佬，给个[start](https://github.com/Yangfan2016/cloud-music-web)呗^_^","slug":"网易云音乐播放器","published":1,"updated":"2019-04-25T09:00:46.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauk0000laeyy3m2szh6f","content":"<h2 id=\"HTML-CSS-JAVASCRIPT-高仿低配网页版网易云音乐播放器\"><a href=\"#HTML-CSS-JAVASCRIPT-高仿低配网页版网易云音乐播放器\" class=\"headerlink\" title=\"HTML+CSS+JAVASCRIPT 高仿低配网页版网易云音乐播放器\"></a>HTML+CSS+JAVASCRIPT 高仿低配网页版网易云音乐播放器</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc.gif\" alt=\"app-poster\" title=\"\">\n                </div>\n                <div class=\"image-caption\">app-poster</div>\n            </figure>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>没有使用任何框架，只是想用最简单纯js的代码实现下  </p>\n<ul>\n<li>前台: Javascript+jQuery  </li>\n<li>后台: php/nodejs（php是参考网上的例子写的，nodejs代码是在php的基础上重新写的）  </li>\n<li>还有她的姊妹篇（网易云音乐移动端），请查看这里  <a href=\"https://github.com/Yangfan2016/cloud-music-mobile#cloud-music-mobile\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016/cloud-music-mobile#cloud-music-mobile</a></li>\n</ul>\n<h3 id=\"写在前头的话\"><a href=\"#写在前头的话\" class=\"headerlink\" title=\"写在前头的话\"></a>写在前头的话</h3><p>鄙人野生前端一只，gis专业，自学前端已经一年多了，为什么要写个音乐播放器呢？原因有两个：  </p>\n<ol>\n<li>本人是网易云音乐的重度用户，近乎疯狂  </li>\n<li>自学了前端这么久了，也是想检验下自己的成果吧</li>\n</ol>\n<h3 id=\"本播放器要干什么呢\"><a href=\"#本播放器要干什么呢\" class=\"headerlink\" title=\"本播放器要干什么呢\"></a>本播放器要干什么呢</h3><ol>\n<li>简单的 <strong>播放</strong> <strong>暂停</strong> 那当然不能少</li>\n<li>切换歌曲，<strong>上一首</strong> 、 <strong>下一首</strong> 也得有</li>\n<li><strong>进度条</strong> ，这个有点复杂，本来想用 input[range] 写，但是样式不好改，自己用多个div代替吧</li>\n<li>进度条都有了，<strong>音量调节</strong> 不能少吧，毕竟他俩UI样式差不多，照猫画虎呗</li>\n<li>再加一个 <strong>静音功能</strong> ，省的音乐太大声，邻居找茬哦(⊙o⊙)</li>\n</ol>\n<h3 id=\"本播放器还能干什么呢\"><a href=\"#本播放器还能干什么呢\" class=\"headerlink\" title=\"本播放器还能干什么呢\"></a>本播放器还能干什么呢</h3><ol>\n<li><strong>歌词滚动</strong> 有木有</li>\n<li><strong>搜索单曲</strong> </li>\n<li><strong>指定歌单播放</strong>  这个需要知道歌单的 id 不是很好找，（得上<a href=\"http://music.163.com\" target=\"_blank\" rel=\"noopener\">网易云音乐官网</a>登录自己的账号，找到歌单，点进去，抬头看URL 里最后的 id 参数）暂时用的是“我喜欢的音乐”（歌单）的id</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc-wins003.JPG\" alt=\"music-163\" title=\"\">\n                </div>\n                <div class=\"image-caption\">music-163</div>\n            </figure>\n<h3 id=\"那闲话不多说，开整吧（原谅一个理科生的表达能力）\"><a href=\"#那闲话不多说，开整吧（原谅一个理科生的表达能力）\" class=\"headerlink\" title=\"那闲话不多说，开整吧（原谅一个理科生的表达能力）\"></a>那闲话不多说，开整吧（原谅一个理科生的表达能力）</h3><p>我模仿的是网易云音乐的PC端，所用到的技术都是前端的基本技术 HTML、CSS、JAVASCRIPT<br>由于我是自学的，没有那么多规矩，我这个人看到是我感兴趣的，我立马就会去做，这个播放器也不例外。</p>\n<blockquote>\n<p>首先先的将它“画”出来（HTML+CSS）</p>\n</blockquote>\n<p>我仔细看了下网易云音乐PC端的布局，大致分为四部分，四个模块</p>\n<ol>\n<li>顶部菜单（顶部导航，叫什么名无所谓了）</li>\n<li>底部播放条 这是播放器的核心</li>\n<li>主体内容在右边 歌单的详细信息和歌曲列表</li>\n<li>左侧是导航和歌单组</li>\n<li>左下角还有一个小窗，显示正在播放歌曲的简要信息，点击小窗 展开一个歌曲详情页</li>\n</ol>\n<p>无图不真相<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc-wins001.JPG\" alt=\"pc-music\" title=\"\">\n                </div>\n                <div class=\"image-caption\">pc-music</div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc-wins002.JPG\" alt=\"pc-music\" title=\"\">\n                </div>\n                <div class=\"image-caption\">pc-music</div>\n            </figure></p>\n<blockquote>\n<p>然后呢，写页面逻辑JavaScript</p>\n</blockquote>\n<h3 id=\"播放器\"><a href=\"#播放器\" class=\"headerlink\" title=\"播放器\"></a>播放器</h3><ol>\n<li>播放器的控制按钮<br>播放(暂停)按钮，这个可以通过<code>play()</code>和<code>pause()</code>方法实现</li>\n<li>进度条<br>这个通过监听<code>timeupdate</code>事件，实施更新当前播放位置，<br>通过监听鼠标移动事件，改变进度条的长度</li>\n<li>静音按钮，可以通过<code>audio.muted=true</code>实现</li>\n</ol>\n<h3 id=\"初始化歌单列表\"><a href=\"#初始化歌单列表\" class=\"headerlink\" title=\"初始化歌单列表\"></a>初始化歌单列表</h3><p>网易云音乐获取歌单的API<br><a href=\"http://music.163.com/api/playlist/detail?id=[id]\" target=\"_blank\" rel=\"noopener\">http://music.163.com/api/playlist/detail?id=[id]</a></p>\n<pre><code>id 歌单id\n</code></pre><p>因为涉及到跨域问题。暂时我前台这边又没有办法跨域，所以参考了网上的代码，<del>写个PHP做代理</del> （2018-09-14更新：现在代码已改为Nodejs做代理服务），这样就不存在跨域问题了。<br>获取到歌单数据后，重新渲染下DOM</p>\n<h3 id=\"搜索歌曲\"><a href=\"#搜索歌曲\" class=\"headerlink\" title=\"搜索歌曲\"></a>搜索歌曲</h3><p>网易云音乐获取歌曲的API<br><a href=\"http://s.music.163.com/search/get?s=[songname]&amp;type=1&amp;limit=10\" target=\"_blank\" rel=\"noopener\">http://s.music.163.com/search/get?s=[songname]&amp;type=1&amp;limit=10</a></p>\n<pre><code>s           搜索内容\ntype        搜索类型\nlimit       搜索返回结果数\n</code></pre><h3 id=\"歌曲详情页\"><a href=\"#歌曲详情页\" class=\"headerlink\" title=\"歌曲详情页\"></a>歌曲详情页</h3><p>主要是歌词和歌词滚动</p>\n<p>网易云音乐获取歌词API<br><a href=\"http://music.163.com/api/song/lyric?os=pc&amp;id=[id]\" target=\"_blank\" rel=\"noopener\">http://music.163.com/api/song/lyric?os=pc&amp;id=[id]</a></p>\n<pre><code>id 歌曲id\n</code></pre><p>歌词滚动，先把获取到的歌词数据分割成时间点和歌词两部分，将这两部分存入dataset中，<br>通过监听timeupdate事件，判断和当前播放时间相近的歌词，记录它的getBoundingClient()的top值，将滚动条设置到指定位置 例如：<code>ele.srcollTop=100;</code></p>\n<h3 id=\"先写到这里吧\"><a href=\"#先写到这里吧\" class=\"headerlink\" title=\"先写到这里吧\"></a>先写到这里吧</h3><p>总结能力太差了，原谅理科生的无奈</p>\n<h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><p><a href=\"https://github.com/Yangfan2016/cloud-music-web\" target=\"_blank\" rel=\"noopener\">完整源码，点击查看</a><br><a href=\"https://github.com/Yangfan2016/cloud-music-web/tree/master/server\" target=\"_blank\" rel=\"noopener\">后台代码，点击查看</a></p>\n<p>此文源自我的<a href=\"https://yangfan2016.github.io/2017/02/18/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/\" target=\"_blank\" rel=\"noopener\">博客</a></p>\n<h4 id=\"大佬，给个start呗\"><a href=\"#大佬，给个start呗\" class=\"headerlink\" title=\"大佬，给个start呗^_^\"></a>大佬，给个<a href=\"https://github.com/Yangfan2016/cloud-music-web\" target=\"_blank\" rel=\"noopener\">start</a>呗^_^</h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"HTML-CSS-JAVASCRIPT-高仿低配网页版网易云音乐播放器\"><a href=\"#HTML-CSS-JAVASCRIPT-高仿低配网页版网易云音乐播放器\" class=\"headerlink\" title=\"HTML+CSS+JAVASCRIPT 高仿低配网页版网易云音乐播放器\"></a>HTML+CSS+JAVASCRIPT 高仿低配网页版网易云音乐播放器</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc.gif\" alt=\"app-poster\" title=\"\">\n                </div>\n                <div class=\"image-caption\">app-poster</div>\n            </figure>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>没有使用任何框架，只是想用最简单纯js的代码实现下  </p>\n<ul>\n<li>前台: Javascript+jQuery  </li>\n<li>后台: php/nodejs（php是参考网上的例子写的，nodejs代码是在php的基础上重新写的）  </li>\n<li>还有她的姊妹篇（网易云音乐移动端），请查看这里  <a href=\"https://github.com/Yangfan2016/cloud-music-mobile#cloud-music-mobile\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016/cloud-music-mobile#cloud-music-mobile</a></li>\n</ul>\n<h3 id=\"写在前头的话\"><a href=\"#写在前头的话\" class=\"headerlink\" title=\"写在前头的话\"></a>写在前头的话</h3><p>鄙人野生前端一只，gis专业，自学前端已经一年多了，为什么要写个音乐播放器呢？原因有两个：  </p>\n<ol>\n<li>本人是网易云音乐的重度用户，近乎疯狂  </li>\n<li>自学了前端这么久了，也是想检验下自己的成果吧</li>\n</ol>\n<h3 id=\"本播放器要干什么呢\"><a href=\"#本播放器要干什么呢\" class=\"headerlink\" title=\"本播放器要干什么呢\"></a>本播放器要干什么呢</h3><ol>\n<li>简单的 <strong>播放</strong> <strong>暂停</strong> 那当然不能少</li>\n<li>切换歌曲，<strong>上一首</strong> 、 <strong>下一首</strong> 也得有</li>\n<li><strong>进度条</strong> ，这个有点复杂，本来想用 input[range] 写，但是样式不好改，自己用多个div代替吧</li>\n<li>进度条都有了，<strong>音量调节</strong> 不能少吧，毕竟他俩UI样式差不多，照猫画虎呗</li>\n<li>再加一个 <strong>静音功能</strong> ，省的音乐太大声，邻居找茬哦(⊙o⊙)</li>\n</ol>\n<h3 id=\"本播放器还能干什么呢\"><a href=\"#本播放器还能干什么呢\" class=\"headerlink\" title=\"本播放器还能干什么呢\"></a>本播放器还能干什么呢</h3><ol>\n<li><strong>歌词滚动</strong> 有木有</li>\n<li><strong>搜索单曲</strong> </li>\n<li><strong>指定歌单播放</strong>  这个需要知道歌单的 id 不是很好找，（得上<a href=\"http://music.163.com\" target=\"_blank\" rel=\"noopener\">网易云音乐官网</a>登录自己的账号，找到歌单，点进去，抬头看URL 里最后的 id 参数）暂时用的是“我喜欢的音乐”（歌单）的id</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc-wins003.JPG\" alt=\"music-163\" title=\"\">\n                </div>\n                <div class=\"image-caption\">music-163</div>\n            </figure>\n<h3 id=\"那闲话不多说，开整吧（原谅一个理科生的表达能力）\"><a href=\"#那闲话不多说，开整吧（原谅一个理科生的表达能力）\" class=\"headerlink\" title=\"那闲话不多说，开整吧（原谅一个理科生的表达能力）\"></a>那闲话不多说，开整吧（原谅一个理科生的表达能力）</h3><p>我模仿的是网易云音乐的PC端，所用到的技术都是前端的基本技术 HTML、CSS、JAVASCRIPT<br>由于我是自学的，没有那么多规矩，我这个人看到是我感兴趣的，我立马就会去做，这个播放器也不例外。</p>\n<blockquote>\n<p>首先先的将它“画”出来（HTML+CSS）</p>\n</blockquote>\n<p>我仔细看了下网易云音乐PC端的布局，大致分为四部分，四个模块</p>\n<ol>\n<li>顶部菜单（顶部导航，叫什么名无所谓了）</li>\n<li>底部播放条 这是播放器的核心</li>\n<li>主体内容在右边 歌单的详细信息和歌曲列表</li>\n<li>左侧是导航和歌单组</li>\n<li>左下角还有一个小窗，显示正在播放歌曲的简要信息，点击小窗 展开一个歌曲详情页</li>\n</ol>\n<p>无图不真相<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc-wins001.JPG\" alt=\"pc-music\" title=\"\">\n                </div>\n                <div class=\"image-caption\">pc-music</div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/cloud-music-pc-wins002.JPG\" alt=\"pc-music\" title=\"\">\n                </div>\n                <div class=\"image-caption\">pc-music</div>\n            </figure></p>\n<blockquote>\n<p>然后呢，写页面逻辑JavaScript</p>\n</blockquote>\n<h3 id=\"播放器\"><a href=\"#播放器\" class=\"headerlink\" title=\"播放器\"></a>播放器</h3><ol>\n<li>播放器的控制按钮<br>播放(暂停)按钮，这个可以通过<code>play()</code>和<code>pause()</code>方法实现</li>\n<li>进度条<br>这个通过监听<code>timeupdate</code>事件，实施更新当前播放位置，<br>通过监听鼠标移动事件，改变进度条的长度</li>\n<li>静音按钮，可以通过<code>audio.muted=true</code>实现</li>\n</ol>\n<h3 id=\"初始化歌单列表\"><a href=\"#初始化歌单列表\" class=\"headerlink\" title=\"初始化歌单列表\"></a>初始化歌单列表</h3><p>网易云音乐获取歌单的API<br><a href=\"http://music.163.com/api/playlist/detail?id=[id]\" target=\"_blank\" rel=\"noopener\">http://music.163.com/api/playlist/detail?id=[id]</a></p>\n<pre><code>id 歌单id\n</code></pre><p>因为涉及到跨域问题。暂时我前台这边又没有办法跨域，所以参考了网上的代码，<del>写个PHP做代理</del> （2018-09-14更新：现在代码已改为Nodejs做代理服务），这样就不存在跨域问题了。<br>获取到歌单数据后，重新渲染下DOM</p>\n<h3 id=\"搜索歌曲\"><a href=\"#搜索歌曲\" class=\"headerlink\" title=\"搜索歌曲\"></a>搜索歌曲</h3><p>网易云音乐获取歌曲的API<br><a href=\"http://s.music.163.com/search/get?s=[songname]&amp;type=1&amp;limit=10\" target=\"_blank\" rel=\"noopener\">http://s.music.163.com/search/get?s=[songname]&amp;type=1&amp;limit=10</a></p>\n<pre><code>s           搜索内容\ntype        搜索类型\nlimit       搜索返回结果数\n</code></pre><h3 id=\"歌曲详情页\"><a href=\"#歌曲详情页\" class=\"headerlink\" title=\"歌曲详情页\"></a>歌曲详情页</h3><p>主要是歌词和歌词滚动</p>\n<p>网易云音乐获取歌词API<br><a href=\"http://music.163.com/api/song/lyric?os=pc&amp;id=[id]\" target=\"_blank\" rel=\"noopener\">http://music.163.com/api/song/lyric?os=pc&amp;id=[id]</a></p>\n<pre><code>id 歌曲id\n</code></pre><p>歌词滚动，先把获取到的歌词数据分割成时间点和歌词两部分，将这两部分存入dataset中，<br>通过监听timeupdate事件，判断和当前播放时间相近的歌词，记录它的getBoundingClient()的top值，将滚动条设置到指定位置 例如：<code>ele.srcollTop=100;</code></p>\n<h3 id=\"先写到这里吧\"><a href=\"#先写到这里吧\" class=\"headerlink\" title=\"先写到这里吧\"></a>先写到这里吧</h3><p>总结能力太差了，原谅理科生的无奈</p>\n<h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><p><a href=\"https://github.com/Yangfan2016/cloud-music-web\" target=\"_blank\" rel=\"noopener\">完整源码，点击查看</a><br><a href=\"https://github.com/Yangfan2016/cloud-music-web/tree/master/server\" target=\"_blank\" rel=\"noopener\">后台代码，点击查看</a></p>\n<p>此文源自我的<a href=\"https://yangfan2016.github.io/2017/02/18/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/\" target=\"_blank\" rel=\"noopener\">博客</a></p>\n<h4 id=\"大佬，给个start呗\"><a href=\"#大佬，给个start呗\" class=\"headerlink\" title=\"大佬，给个start呗^_^\"></a>大佬，给个<a href=\"https://github.com/Yangfan2016/cloud-music-web\" target=\"_blank\" rel=\"noopener\">start</a>呗^_^</h4>"},{"title":"你所不知道的 Chrome 控制台","date":"2019-02-19T07:21:25.000Z","_content":"\n\n## 你所不知道的 Chrome 控制台调试技巧\n\n### 前言\n\n收集了一些工作中常用到的 Chrome 调试技巧，其他大部分 Chrome 调试功能工具介绍已经在其他的很多文章中介绍到了，这里就不 DRY 了\n\n### Request blocking 阻塞请求\n\n使用这个功能可以拦截请求  \n\n大部分情况是页面执行完某个操作后，页面就重定向了（比如登录），这时就不方便调试了，下面这个工具很好的解决了这个问题\n\n比如你想了解在页面重定向之前，发去的登录请求都做了什么，使用操作如下图所示：\n\n![console-reqblock-001](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-reqblock-001.png)\n\n### Coverage 代码覆盖率\n\n可以观察到代码覆盖率，哪些是没用的，去除无用代码，较少代码体积  \n\n\n你需要点击下图的记录按钮进行记录，然后你需要在页面上进行一些交互操作（如点击、鼠标移入等）\n\n![console-coverage-001](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-coverage-001.png)\n\n然后你会得到下图，红色的部分是没有用到的代码占比，绿色部分是用到的代码占比，你可以点击占比进度条，到达指定源代码区进行细致查看\n\n![console-coverage-002](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-coverage-002.png)\n\n### Changes 变化\n\n显示更改代码的比较，你可以通过这个工具观察，你用控制台修改过的代码，就和 git 的 diff 功能类似，红色代表删除、绿色代码新增\n\n![console-changes-001](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-changes-001.png)\n\n你如果点击代码里的某一行，它会打开源代码面板，你可以在这里进行修改、调试操作\n\n![console-changes-002](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-changes-002.png)\n\n### Snippets 代码片段\n\n一般在 console 里可以临时运行代码，但是书写格式不太友好，而且一换行就执行了（当然你可以 shift+enter 换行），这时，你又懒癌发作，不想打开代码编辑器，你可以使用 Snippets 这个工具，如下图所示：\n\n![console-snippets-001](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-snippets-001.png)\n\n可以像代码编辑器一样书写，可以格式化代码、可以断点调试、也可以单独导出文件","source":"_posts/你所不知道的-chrome-控制台.md","raw":"---\ntitle: 你所不知道的 Chrome 控制台\ndate: 2019-02-19 15:21:25\ntags:\n---\n\n\n## 你所不知道的 Chrome 控制台调试技巧\n\n### 前言\n\n收集了一些工作中常用到的 Chrome 调试技巧，其他大部分 Chrome 调试功能工具介绍已经在其他的很多文章中介绍到了，这里就不 DRY 了\n\n### Request blocking 阻塞请求\n\n使用这个功能可以拦截请求  \n\n大部分情况是页面执行完某个操作后，页面就重定向了（比如登录），这时就不方便调试了，下面这个工具很好的解决了这个问题\n\n比如你想了解在页面重定向之前，发去的登录请求都做了什么，使用操作如下图所示：\n\n![console-reqblock-001](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-reqblock-001.png)\n\n### Coverage 代码覆盖率\n\n可以观察到代码覆盖率，哪些是没用的，去除无用代码，较少代码体积  \n\n\n你需要点击下图的记录按钮进行记录，然后你需要在页面上进行一些交互操作（如点击、鼠标移入等）\n\n![console-coverage-001](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-coverage-001.png)\n\n然后你会得到下图，红色的部分是没有用到的代码占比，绿色部分是用到的代码占比，你可以点击占比进度条，到达指定源代码区进行细致查看\n\n![console-coverage-002](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-coverage-002.png)\n\n### Changes 变化\n\n显示更改代码的比较，你可以通过这个工具观察，你用控制台修改过的代码，就和 git 的 diff 功能类似，红色代表删除、绿色代码新增\n\n![console-changes-001](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-changes-001.png)\n\n你如果点击代码里的某一行，它会打开源代码面板，你可以在这里进行修改、调试操作\n\n![console-changes-002](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-changes-002.png)\n\n### Snippets 代码片段\n\n一般在 console 里可以临时运行代码，但是书写格式不太友好，而且一换行就执行了（当然你可以 shift+enter 换行），这时，你又懒癌发作，不想打开代码编辑器，你可以使用 Snippets 这个工具，如下图所示：\n\n![console-snippets-001](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-snippets-001.png)\n\n可以像代码编辑器一样书写，可以格式化代码、可以断点调试、也可以单独导出文件","slug":"你所不知道的-chrome-控制台","published":1,"updated":"2019-04-25T08:24:11.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauk1000naeyyw13pqqvs","content":"<h2 id=\"你所不知道的-Chrome-控制台调试技巧\"><a href=\"#你所不知道的-Chrome-控制台调试技巧\" class=\"headerlink\" title=\"你所不知道的 Chrome 控制台调试技巧\"></a>你所不知道的 Chrome 控制台调试技巧</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>收集了一些工作中常用到的 Chrome 调试技巧，其他大部分 Chrome 调试功能工具介绍已经在其他的很多文章中介绍到了，这里就不 DRY 了</p>\n<h3 id=\"Request-blocking-阻塞请求\"><a href=\"#Request-blocking-阻塞请求\" class=\"headerlink\" title=\"Request blocking 阻塞请求\"></a>Request blocking 阻塞请求</h3><p>使用这个功能可以拦截请求  </p>\n<p>大部分情况是页面执行完某个操作后，页面就重定向了（比如登录），这时就不方便调试了，下面这个工具很好的解决了这个问题</p>\n<p>比如你想了解在页面重定向之前，发去的登录请求都做了什么，使用操作如下图所示：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-reqblock-001.png\" alt=\"console-reqblock-001\" title=\"\">\n                </div>\n                <div class=\"image-caption\">console-reqblock-001</div>\n            </figure>\n<h3 id=\"Coverage-代码覆盖率\"><a href=\"#Coverage-代码覆盖率\" class=\"headerlink\" title=\"Coverage 代码覆盖率\"></a>Coverage 代码覆盖率</h3><p>可以观察到代码覆盖率，哪些是没用的，去除无用代码，较少代码体积  </p>\n<p>你需要点击下图的记录按钮进行记录，然后你需要在页面上进行一些交互操作（如点击、鼠标移入等）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-coverage-001.png\" alt=\"console-coverage-001\" title=\"\">\n                </div>\n                <div class=\"image-caption\">console-coverage-001</div>\n            </figure>\n<p>然后你会得到下图，红色的部分是没有用到的代码占比，绿色部分是用到的代码占比，你可以点击占比进度条，到达指定源代码区进行细致查看</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-coverage-002.png\" alt=\"console-coverage-002\" title=\"\">\n                </div>\n                <div class=\"image-caption\">console-coverage-002</div>\n            </figure>\n<h3 id=\"Changes-变化\"><a href=\"#Changes-变化\" class=\"headerlink\" title=\"Changes 变化\"></a>Changes 变化</h3><p>显示更改代码的比较，你可以通过这个工具观察，你用控制台修改过的代码，就和 git 的 diff 功能类似，红色代表删除、绿色代码新增</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-changes-001.png\" alt=\"console-changes-001\" title=\"\">\n                </div>\n                <div class=\"image-caption\">console-changes-001</div>\n            </figure>\n<p>你如果点击代码里的某一行，它会打开源代码面板，你可以在这里进行修改、调试操作</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-changes-002.png\" alt=\"console-changes-002\" title=\"\">\n                </div>\n                <div class=\"image-caption\">console-changes-002</div>\n            </figure>\n<h3 id=\"Snippets-代码片段\"><a href=\"#Snippets-代码片段\" class=\"headerlink\" title=\"Snippets 代码片段\"></a>Snippets 代码片段</h3><p>一般在 console 里可以临时运行代码，但是书写格式不太友好，而且一换行就执行了（当然你可以 shift+enter 换行），这时，你又懒癌发作，不想打开代码编辑器，你可以使用 Snippets 这个工具，如下图所示：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-snippets-001.png\" alt=\"console-snippets-001\" title=\"\">\n                </div>\n                <div class=\"image-caption\">console-snippets-001</div>\n            </figure>\n<p>可以像代码编辑器一样书写，可以格式化代码、可以断点调试、也可以单独导出文件</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"你所不知道的-Chrome-控制台调试技巧\"><a href=\"#你所不知道的-Chrome-控制台调试技巧\" class=\"headerlink\" title=\"你所不知道的 Chrome 控制台调试技巧\"></a>你所不知道的 Chrome 控制台调试技巧</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>收集了一些工作中常用到的 Chrome 调试技巧，其他大部分 Chrome 调试功能工具介绍已经在其他的很多文章中介绍到了，这里就不 DRY 了</p>\n<h3 id=\"Request-blocking-阻塞请求\"><a href=\"#Request-blocking-阻塞请求\" class=\"headerlink\" title=\"Request blocking 阻塞请求\"></a>Request blocking 阻塞请求</h3><p>使用这个功能可以拦截请求  </p>\n<p>大部分情况是页面执行完某个操作后，页面就重定向了（比如登录），这时就不方便调试了，下面这个工具很好的解决了这个问题</p>\n<p>比如你想了解在页面重定向之前，发去的登录请求都做了什么，使用操作如下图所示：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-reqblock-001.png\" alt=\"console-reqblock-001\" title=\"\">\n                </div>\n                <div class=\"image-caption\">console-reqblock-001</div>\n            </figure>\n<h3 id=\"Coverage-代码覆盖率\"><a href=\"#Coverage-代码覆盖率\" class=\"headerlink\" title=\"Coverage 代码覆盖率\"></a>Coverage 代码覆盖率</h3><p>可以观察到代码覆盖率，哪些是没用的，去除无用代码，较少代码体积  </p>\n<p>你需要点击下图的记录按钮进行记录，然后你需要在页面上进行一些交互操作（如点击、鼠标移入等）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-coverage-001.png\" alt=\"console-coverage-001\" title=\"\">\n                </div>\n                <div class=\"image-caption\">console-coverage-001</div>\n            </figure>\n<p>然后你会得到下图，红色的部分是没有用到的代码占比，绿色部分是用到的代码占比，你可以点击占比进度条，到达指定源代码区进行细致查看</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-coverage-002.png\" alt=\"console-coverage-002\" title=\"\">\n                </div>\n                <div class=\"image-caption\">console-coverage-002</div>\n            </figure>\n<h3 id=\"Changes-变化\"><a href=\"#Changes-变化\" class=\"headerlink\" title=\"Changes 变化\"></a>Changes 变化</h3><p>显示更改代码的比较，你可以通过这个工具观察，你用控制台修改过的代码，就和 git 的 diff 功能类似，红色代表删除、绿色代码新增</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-changes-001.png\" alt=\"console-changes-001\" title=\"\">\n                </div>\n                <div class=\"image-caption\">console-changes-001</div>\n            </figure>\n<p>你如果点击代码里的某一行，它会打开源代码面板，你可以在这里进行修改、调试操作</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-changes-002.png\" alt=\"console-changes-002\" title=\"\">\n                </div>\n                <div class=\"image-caption\">console-changes-002</div>\n            </figure>\n<h3 id=\"Snippets-代码片段\"><a href=\"#Snippets-代码片段\" class=\"headerlink\" title=\"Snippets 代码片段\"></a>Snippets 代码片段</h3><p>一般在 console 里可以临时运行代码，但是书写格式不太友好，而且一换行就执行了（当然你可以 shift+enter 换行），这时，你又懒癌发作，不想打开代码编辑器，你可以使用 Snippets 这个工具，如下图所示：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/console-snippets-001.png\" alt=\"console-snippets-001\" title=\"\">\n                </div>\n                <div class=\"image-caption\">console-snippets-001</div>\n            </figure>\n<p>可以像代码编辑器一样书写，可以格式化代码、可以断点调试、也可以单独导出文件</p>\n"},{"title":"高德地图 Javascript API 入门（一）","date":"2017-02-20T11:32:00.000Z","_content":"\n\n高德地图 Javascript API 入门（一）\n===\n\n\n准备工作\n---\n\n#### 首先注册个开发者账号\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap101.JPG)\n\n#### 然后创建应用，获取Key\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap102.JPG)\n\n#### 新建HTML文件，在body标签中引入如下代码（把你的Key值填入即可）\n\nHTML\n\n```html\n\t<script type=\"text/javascript\" src=\"http://webapi.amap.com/maps?v=1.3&key=您申请的key值\"></script>\n```\n\n#### 创建设置地图容器\n\nHTML\n\n```html\n\t<div id=\"container\"></div>  \n```\n\nCSS\n\n```css\n\t#container {width:300px; height: 180px; }  \n```\n\n地图初始化\n---\n\n#### 创建地图\n\nJS\n\n```js\n\tvar map = new AMap.Map('container');\n```\n\n\n#### 设置地图参数\n\n可以通过以下设置  \nJS\n\n```js\n\tvar map = new AMap.Map('container',{\n    \tzoom: 12,\n    \tcenter: [112.549248,37.852135]\n\t});\n```\n\n\n也可通过map对象的方法设置\n\nJS\n\n```js\n\tvar map = new AMap.Map('container');\n\tmap.setZoom(12);\n\tmap.setCenter([112.549248,37.852135]);\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap103.JPG \"高德地图\")\n\n\n个性化地图\n---\n\n#### 改变地图样式\n\n目前支持五种地图配色模版\n\n地图类型列表\n\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>名称</p></th><th><p>说明</p></th></tr><tr><td><p>normal</p></td><td><p>默认样式</p></td></tr><tr><td><p>dark</p></td><td><p>深色样式</p></td></tr><tr><td><p>blue_night</p></td><td><p>夜空蓝样式</p></td></tr><tr><td><p>fresh</p></td><td><p>浅色样式</p></td></tr><tr><td><p>light</p></td><td><p>osm清新风格样式</p></td></tr></tbody></table>\n\n可以这样设置  \nJS\n\n```js\n\tvar map = new AMap.Map('container', {\n        resizeEnable: true,\n        mapStyle:'fresh',\n        center: [116.408075, 39.950187]\n    });\n```\n\n\n也可以这样设置  \nJS\n\n```js\n\tmap.setMapStyle(\"fresh\");\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap104.JPG)\n\n\n#### 显示指定地图内容（地图要素）\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>名称</p></th><th><p>说明</p></th></tr><tr><td><p>bg</p></td><td><p>背景地图</p></td></tr><tr><td><p>point</p></td><td><p>兴趣点</p></td></tr><tr><td><p>road</p></td><td><p>道路</p></td></tr><tr><td><p>building</p></td><td><p>建筑</p></td></tr></tbody></table>\n\n\nJS\n\n```js\n\tmap.setFeatures(\"road\");//单一种类要素显示\n\tmap.setFeatures(['road','point'])//多个种类要素显示\n```\n\n\n预览（只显示道路要素的地图）\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap105.JPG)\n\n\n地图控件\n---\n\nJavaScript API提供了工具条、比例尺、定位、鹰眼、基本图层切换等常用的控件\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>名称</p></th><th><p>类名</p></th><th><p>简介</p></th></tr><tr><td><p>工具条</p></td><td><p>ToolBar</p></td><td><p>集成了缩放、平移、定位等功能按钮在内的组合控件</p></td></tr><tr><td><p>比例尺</p></td><td><p>Scale</p></td><td><p>展示地图在当前层级和纬度下的比例尺</p></td></tr><tr><td><p>定位</p></td><td><p>Geolocation</p></td><td><p>用来获取和展示用户主机所在的经纬度位置</p></td></tr><tr><td><p>鹰眼</p></td><td><p>OverView</p></td><td><p>在地图右下角显示地图的缩略图</p></td></tr><tr><td><p>类别切换</p></td><td><p>MapType</p></td><td><p>实现默认图层与卫星图、实施交通图层之间切换的控</p></td></tr></tbody></table>\n\n\n添加控件\n\nJS\n\n```js\n\tmap.plugin([\"AMap.ToolBar\"],function () {\n\t\tmap.addControl(new AMap.ToolBar()); // 工具条控件\n\t});\n```\n\n\n（其他控件添加方式同上）\n\n预览（带有工具条控件的地图）\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap106.JPG)\n\n\n\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","source":"_posts/高德地图 Javascript API 入门（一）.md","raw":"---\ntitle: 高德地图 Javascript API 入门（一）\ndate: 2017-02-20 19:32:00\ntags: [GIS,API,JS]\n---\n\n\n高德地图 Javascript API 入门（一）\n===\n\n\n准备工作\n---\n\n#### 首先注册个开发者账号\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap101.JPG)\n\n#### 然后创建应用，获取Key\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap102.JPG)\n\n#### 新建HTML文件，在body标签中引入如下代码（把你的Key值填入即可）\n\nHTML\n\n```html\n\t<script type=\"text/javascript\" src=\"http://webapi.amap.com/maps?v=1.3&key=您申请的key值\"></script>\n```\n\n#### 创建设置地图容器\n\nHTML\n\n```html\n\t<div id=\"container\"></div>  \n```\n\nCSS\n\n```css\n\t#container {width:300px; height: 180px; }  \n```\n\n地图初始化\n---\n\n#### 创建地图\n\nJS\n\n```js\n\tvar map = new AMap.Map('container');\n```\n\n\n#### 设置地图参数\n\n可以通过以下设置  \nJS\n\n```js\n\tvar map = new AMap.Map('container',{\n    \tzoom: 12,\n    \tcenter: [112.549248,37.852135]\n\t});\n```\n\n\n也可通过map对象的方法设置\n\nJS\n\n```js\n\tvar map = new AMap.Map('container');\n\tmap.setZoom(12);\n\tmap.setCenter([112.549248,37.852135]);\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap103.JPG \"高德地图\")\n\n\n个性化地图\n---\n\n#### 改变地图样式\n\n目前支持五种地图配色模版\n\n地图类型列表\n\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>名称</p></th><th><p>说明</p></th></tr><tr><td><p>normal</p></td><td><p>默认样式</p></td></tr><tr><td><p>dark</p></td><td><p>深色样式</p></td></tr><tr><td><p>blue_night</p></td><td><p>夜空蓝样式</p></td></tr><tr><td><p>fresh</p></td><td><p>浅色样式</p></td></tr><tr><td><p>light</p></td><td><p>osm清新风格样式</p></td></tr></tbody></table>\n\n可以这样设置  \nJS\n\n```js\n\tvar map = new AMap.Map('container', {\n        resizeEnable: true,\n        mapStyle:'fresh',\n        center: [116.408075, 39.950187]\n    });\n```\n\n\n也可以这样设置  \nJS\n\n```js\n\tmap.setMapStyle(\"fresh\");\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap104.JPG)\n\n\n#### 显示指定地图内容（地图要素）\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>名称</p></th><th><p>说明</p></th></tr><tr><td><p>bg</p></td><td><p>背景地图</p></td></tr><tr><td><p>point</p></td><td><p>兴趣点</p></td></tr><tr><td><p>road</p></td><td><p>道路</p></td></tr><tr><td><p>building</p></td><td><p>建筑</p></td></tr></tbody></table>\n\n\nJS\n\n```js\n\tmap.setFeatures(\"road\");//单一种类要素显示\n\tmap.setFeatures(['road','point'])//多个种类要素显示\n```\n\n\n预览（只显示道路要素的地图）\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap105.JPG)\n\n\n地图控件\n---\n\nJavaScript API提供了工具条、比例尺、定位、鹰眼、基本图层切换等常用的控件\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>名称</p></th><th><p>类名</p></th><th><p>简介</p></th></tr><tr><td><p>工具条</p></td><td><p>ToolBar</p></td><td><p>集成了缩放、平移、定位等功能按钮在内的组合控件</p></td></tr><tr><td><p>比例尺</p></td><td><p>Scale</p></td><td><p>展示地图在当前层级和纬度下的比例尺</p></td></tr><tr><td><p>定位</p></td><td><p>Geolocation</p></td><td><p>用来获取和展示用户主机所在的经纬度位置</p></td></tr><tr><td><p>鹰眼</p></td><td><p>OverView</p></td><td><p>在地图右下角显示地图的缩略图</p></td></tr><tr><td><p>类别切换</p></td><td><p>MapType</p></td><td><p>实现默认图层与卫星图、实施交通图层之间切换的控</p></td></tr></tbody></table>\n\n\n添加控件\n\nJS\n\n```js\n\tmap.plugin([\"AMap.ToolBar\"],function () {\n\t\tmap.addControl(new AMap.ToolBar()); // 工具条控件\n\t});\n```\n\n\n（其他控件添加方式同上）\n\n预览（带有工具条控件的地图）\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap106.JPG)\n\n\n\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","slug":"高德地图 Javascript API 入门（一）","published":1,"updated":"2019-04-25T09:00:36.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauk4000paeyye1iar187","content":"<h1 id=\"高德地图-Javascript-API-入门（一）\"><a href=\"#高德地图-Javascript-API-入门（一）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（一）\"></a>高德地图 Javascript API 入门（一）</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h4 id=\"首先注册个开发者账号\"><a href=\"#首先注册个开发者账号\" class=\"headerlink\" title=\"首先注册个开发者账号\"></a>首先注册个开发者账号</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap101.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"然后创建应用，获取Key\"><a href=\"#然后创建应用，获取Key\" class=\"headerlink\" title=\"然后创建应用，获取Key\"></a>然后创建应用，获取Key</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap102.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"新建HTML文件，在body标签中引入如下代码（把你的Key值填入即可）\"><a href=\"#新建HTML文件，在body标签中引入如下代码（把你的Key值填入即可）\" class=\"headerlink\" title=\"新建HTML文件，在body标签中引入如下代码（把你的Key值填入即可）\"></a>新建HTML文件，在body标签中引入如下代码（把你的Key值填入即可）</h4><p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://webapi.amap.com/maps?v=1.3&amp;key=您申请的key值\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建设置地图容器\"><a href=\"#创建设置地图容器\" class=\"headerlink\" title=\"创建设置地图容器\"></a>创建设置地图容器</h4><p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>CSS</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;<span class=\"attribute\">width</span>:<span class=\"number\">300px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">180px</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"地图初始化\"><a href=\"#地图初始化\" class=\"headerlink\" title=\"地图初始化\"></a>地图初始化</h2><h4 id=\"创建地图\"><a href=\"#创建地图\" class=\"headerlink\" title=\"创建地图\"></a>创建地图</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">'container'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置地图参数\"><a href=\"#设置地图参数\" class=\"headerlink\" title=\"设置地图参数\"></a>设置地图参数</h4><p>可以通过以下设置<br>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">'container'</span>,&#123;</span><br><span class=\"line\">   \tzoom: <span class=\"number\">12</span>,</span><br><span class=\"line\">   \tcenter: [<span class=\"number\">112.549248</span>,<span class=\"number\">37.852135</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>也可通过map对象的方法设置</p>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">'container'</span>);</span><br><span class=\"line\">map.setZoom(<span class=\"number\">12</span>);</span><br><span class=\"line\">map.setCenter([<span class=\"number\">112.549248</span>,<span class=\"number\">37.852135</span>]);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap103.JPG\" alt=\"image\" title=\"高德地图\">\n                </div>\n                <div class=\"image-caption\">高德地图</div>\n            </figure>\n<h2 id=\"个性化地图\"><a href=\"#个性化地图\" class=\"headerlink\" title=\"个性化地图\"></a>个性化地图</h2><h4 id=\"改变地图样式\"><a href=\"#改变地图样式\" class=\"headerlink\" title=\"改变地图样式\"></a>改变地图样式</h4><p>目前支持五种地图配色模版</p>\n<p>地图类型列表</p>\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>名称</p></th><th><p>说明</p></th></tr><tr><td><p>normal</p></td><td><p>默认样式</p></td></tr><tr><td><p>dark</p></td><td><p>深色样式</p></td></tr><tr><td><p>blue_night</p></td><td><p>夜空蓝样式</p></td></tr><tr><td><p>fresh</p></td><td><p>浅色样式</p></td></tr><tr><td><p>light</p></td><td><p>osm清新风格样式</p></td></tr></tbody></table>\n\n<p>可以这样设置<br>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">'container'</span>, &#123;</span><br><span class=\"line\">       resizeEnable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">       mapStyle:<span class=\"string\">'fresh'</span>,</span><br><span class=\"line\">       center: [<span class=\"number\">116.408075</span>, <span class=\"number\">39.950187</span>]</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>也可以这样设置<br>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.setMapStyle(<span class=\"string\">\"fresh\"</span>);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap104.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"显示指定地图内容（地图要素）\"><a href=\"#显示指定地图内容（地图要素）\" class=\"headerlink\" title=\"显示指定地图内容（地图要素）\"></a>显示指定地图内容（地图要素）</h4><table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>名称</p></th><th><p>说明</p></th></tr><tr><td><p>bg</p></td><td><p>背景地图</p></td></tr><tr><td><p>point</p></td><td><p>兴趣点</p></td></tr><tr><td><p>road</p></td><td><p>道路</p></td></tr><tr><td><p>building</p></td><td><p>建筑</p></td></tr></tbody></table>\n\n\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.setFeatures(<span class=\"string\">\"road\"</span>);<span class=\"comment\">//单一种类要素显示</span></span><br><span class=\"line\">map.setFeatures([<span class=\"string\">'road'</span>,<span class=\"string\">'point'</span>])<span class=\"comment\">//多个种类要素显示</span></span><br></pre></td></tr></table></figure>\n<p>预览（只显示道路要素的地图）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap105.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h2 id=\"地图控件\"><a href=\"#地图控件\" class=\"headerlink\" title=\"地图控件\"></a>地图控件</h2><p>JavaScript API提供了工具条、比例尺、定位、鹰眼、基本图层切换等常用的控件</p>\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>名称</p></th><th><p>类名</p></th><th><p>简介</p></th></tr><tr><td><p>工具条</p></td><td><p>ToolBar</p></td><td><p>集成了缩放、平移、定位等功能按钮在内的组合控件</p></td></tr><tr><td><p>比例尺</p></td><td><p>Scale</p></td><td><p>展示地图在当前层级和纬度下的比例尺</p></td></tr><tr><td><p>定位</p></td><td><p>Geolocation</p></td><td><p>用来获取和展示用户主机所在的经纬度位置</p></td></tr><tr><td><p>鹰眼</p></td><td><p>OverView</p></td><td><p>在地图右下角显示地图的缩略图</p></td></tr><tr><td><p>类别切换</p></td><td><p>MapType</p></td><td><p>实现默认图层与卫星图、实施交通图层之间切换的控</p></td></tr></tbody></table>\n\n\n<p>添加控件</p>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.ToolBar\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tmap.addControl(<span class=\"keyword\">new</span> AMap.ToolBar()); <span class=\"comment\">// 工具条控件</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>（其他控件添加方式同上）</p>\n<p>预览（带有工具条控件的地图）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap106.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"高德地图-Javascript-API-入门（一）\"><a href=\"#高德地图-Javascript-API-入门（一）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（一）\"></a>高德地图 Javascript API 入门（一）</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h4 id=\"首先注册个开发者账号\"><a href=\"#首先注册个开发者账号\" class=\"headerlink\" title=\"首先注册个开发者账号\"></a>首先注册个开发者账号</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap101.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"然后创建应用，获取Key\"><a href=\"#然后创建应用，获取Key\" class=\"headerlink\" title=\"然后创建应用，获取Key\"></a>然后创建应用，获取Key</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap102.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"新建HTML文件，在body标签中引入如下代码（把你的Key值填入即可）\"><a href=\"#新建HTML文件，在body标签中引入如下代码（把你的Key值填入即可）\" class=\"headerlink\" title=\"新建HTML文件，在body标签中引入如下代码（把你的Key值填入即可）\"></a>新建HTML文件，在body标签中引入如下代码（把你的Key值填入即可）</h4><p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://webapi.amap.com/maps?v=1.3&amp;key=您申请的key值\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建设置地图容器\"><a href=\"#创建设置地图容器\" class=\"headerlink\" title=\"创建设置地图容器\"></a>创建设置地图容器</h4><p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>CSS</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;<span class=\"attribute\">width</span>:<span class=\"number\">300px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">180px</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"地图初始化\"><a href=\"#地图初始化\" class=\"headerlink\" title=\"地图初始化\"></a>地图初始化</h2><h4 id=\"创建地图\"><a href=\"#创建地图\" class=\"headerlink\" title=\"创建地图\"></a>创建地图</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">'container'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置地图参数\"><a href=\"#设置地图参数\" class=\"headerlink\" title=\"设置地图参数\"></a>设置地图参数</h4><p>可以通过以下设置<br>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">'container'</span>,&#123;</span><br><span class=\"line\">   \tzoom: <span class=\"number\">12</span>,</span><br><span class=\"line\">   \tcenter: [<span class=\"number\">112.549248</span>,<span class=\"number\">37.852135</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>也可通过map对象的方法设置</p>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">'container'</span>);</span><br><span class=\"line\">map.setZoom(<span class=\"number\">12</span>);</span><br><span class=\"line\">map.setCenter([<span class=\"number\">112.549248</span>,<span class=\"number\">37.852135</span>]);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap103.JPG\" alt=\"image\" title=\"高德地图\">\n                </div>\n                <div class=\"image-caption\">高德地图</div>\n            </figure>\n<h2 id=\"个性化地图\"><a href=\"#个性化地图\" class=\"headerlink\" title=\"个性化地图\"></a>个性化地图</h2><h4 id=\"改变地图样式\"><a href=\"#改变地图样式\" class=\"headerlink\" title=\"改变地图样式\"></a>改变地图样式</h4><p>目前支持五种地图配色模版</p>\n<p>地图类型列表</p>\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>名称</p></th><th><p>说明</p></th></tr><tr><td><p>normal</p></td><td><p>默认样式</p></td></tr><tr><td><p>dark</p></td><td><p>深色样式</p></td></tr><tr><td><p>blue_night</p></td><td><p>夜空蓝样式</p></td></tr><tr><td><p>fresh</p></td><td><p>浅色样式</p></td></tr><tr><td><p>light</p></td><td><p>osm清新风格样式</p></td></tr></tbody></table>\n\n<p>可以这样设置<br>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">'container'</span>, &#123;</span><br><span class=\"line\">       resizeEnable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">       mapStyle:<span class=\"string\">'fresh'</span>,</span><br><span class=\"line\">       center: [<span class=\"number\">116.408075</span>, <span class=\"number\">39.950187</span>]</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>也可以这样设置<br>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.setMapStyle(<span class=\"string\">\"fresh\"</span>);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap104.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"显示指定地图内容（地图要素）\"><a href=\"#显示指定地图内容（地图要素）\" class=\"headerlink\" title=\"显示指定地图内容（地图要素）\"></a>显示指定地图内容（地图要素）</h4><table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>名称</p></th><th><p>说明</p></th></tr><tr><td><p>bg</p></td><td><p>背景地图</p></td></tr><tr><td><p>point</p></td><td><p>兴趣点</p></td></tr><tr><td><p>road</p></td><td><p>道路</p></td></tr><tr><td><p>building</p></td><td><p>建筑</p></td></tr></tbody></table>\n\n\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.setFeatures(<span class=\"string\">\"road\"</span>);<span class=\"comment\">//单一种类要素显示</span></span><br><span class=\"line\">map.setFeatures([<span class=\"string\">'road'</span>,<span class=\"string\">'point'</span>])<span class=\"comment\">//多个种类要素显示</span></span><br></pre></td></tr></table></figure>\n<p>预览（只显示道路要素的地图）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap105.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h2 id=\"地图控件\"><a href=\"#地图控件\" class=\"headerlink\" title=\"地图控件\"></a>地图控件</h2><p>JavaScript API提供了工具条、比例尺、定位、鹰眼、基本图层切换等常用的控件</p>\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>名称</p></th><th><p>类名</p></th><th><p>简介</p></th></tr><tr><td><p>工具条</p></td><td><p>ToolBar</p></td><td><p>集成了缩放、平移、定位等功能按钮在内的组合控件</p></td></tr><tr><td><p>比例尺</p></td><td><p>Scale</p></td><td><p>展示地图在当前层级和纬度下的比例尺</p></td></tr><tr><td><p>定位</p></td><td><p>Geolocation</p></td><td><p>用来获取和展示用户主机所在的经纬度位置</p></td></tr><tr><td><p>鹰眼</p></td><td><p>OverView</p></td><td><p>在地图右下角显示地图的缩略图</p></td></tr><tr><td><p>类别切换</p></td><td><p>MapType</p></td><td><p>实现默认图层与卫星图、实施交通图层之间切换的控</p></td></tr></tbody></table>\n\n\n<p>添加控件</p>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.ToolBar\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tmap.addControl(<span class=\"keyword\">new</span> AMap.ToolBar()); <span class=\"comment\">// 工具条控件</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>（其他控件添加方式同上）</p>\n<p>预览（带有工具条控件的地图）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap106.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n"},{"title":"高德地图 Javascript API 入门（三）","date":"2017-02-22T04:52:44.000Z","_content":"\n\n高德地图 Javascript API 入门（三）\n===\n\n距离测量插件\n---\n\n#### 区别\n\n虽然鼠标工具插件也提供距离量测功能，\n但是距离量测插件，提供更为丰富的样式设置功能。\n\n#### 加载插件\n\nJS\n\n\t\n```js\n\tmap.plugin([\"AMap.RangingTool\"],function () {\n\t\tvar rangingTool=new AMap.RangingTool(map);\n\t\trangingTool.turnOn(); // 开启量测功能\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap301.JPG)\n\n#### 样式设置\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>RangingToolOptions</p></th><th><p>类型</p></th><th><p>说明</p></th></tr><tr><td><p><code class=\"inline-code\">startMarkerOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置量测起始点标记属性对象，包括点标记样式、大小等，参考 &nbsp;&nbsp;<a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\">MarkerOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">midMarkerOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置量测中间点标记属性对象，包括点标记样式、大小等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\">MarkerOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">endMarkerOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置量测结束点标记属性对象，包括点标记样式、大小等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\">MarkerOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">lineOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置距离量测线的属性对象，包括线样式、颜色等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\">PolylineOptions </a>列表</p></td></tr><tr><td><p><code class=\"inline-code\">tmpLineOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置距离量测过程中临时量测线的属性对象，包括线样式、颜色等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\">PolylineOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">startLabelText</code></p></td><td><p><code class=\"inline-code\">String</code></p></td><td><p>设置量测起始点标签的文字内容，默认为“起点”</p></td></tr><tr><td><p><code class=\"inline-code\">midLabelText</code></p></td><td><p><code class=\"inline-code\">String</code></p></td><td><p>设置量测中间点处标签的文字内容，默认为当前量测结果值</p></td></tr><tr><td><p><code class=\"inline-code\">endLabelText</code></p></td><td><p><code class=\"inline-code\">String</code></p></td><td><p>设置量测结束点处标签的文字内容，默认为当前量测结果值</p></td></tr><tr><td><p><code class=\"inline-code\">startLabelOffset</code></p></td><td><p><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Pixel\" class=\"\" target=\"\"><code class=\"inline-code\">Pixel</code></a>&nbsp;</p></td><td><p>设置量测起始点标签的偏移量。默认值：Pixel(-6, 6)</p></td></tr><tr><td><p><code class=\"inline-code\">midLabelOffset</code></p></td><td><p><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Pixel\" class=\"\" target=\"\"><code class=\"inline-code\">Pixel</code></a>&nbsp;</p></td><td><p>设置量测中间点标签的偏移量。默认值：Pixel(-6, 6)</p></td></tr><tr><td><p><code class=\"inline-code\">endLabelOffset</code></p></td><td><p><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Pixel\" class=\"\" target=\"\"><code class=\"inline-code\">Pixel</code></a>&nbsp;</p></td><td><p>设置量测结束点标签的偏移量。默认值：Pixel(-6, 6)</p></td></tr></tbody></table>\n\n\n#### 示例\n\n\n###### 改变标签文字\n\n\nJS\n\n\n```js\n\tmap.plugin([\"AMap.RangingTool\"],function () {\n\t\tvar rangingTool=new AMap.RangingTool(map,{\n\t\t\tstartLabelText:\"START\",\n\t\t\tmidLabelText:\"MID\",\n\t\t\tendLabelText:\"END\"\n\t\t});\n\t\trangingTool.turnOn();\n\t});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap302.JPG)\n\n\t\n###### 改变线条样式\n\nJS\n\n\n```js\n\tmap.plugin([\"AMap.RangingTool\"],function () {\n\t\tvar rangingTool=new AMap.RangingTool(map,{\n\t\t\tlineOptions:{\n\t\t\t\tstrokeColor:\"#ff3300\",\n\t\t\t\tstrokeStyle:\"dashed\",\n\t\t\t\tstrokeWeight:10,\n\t\t\t\tstrokeOpacity:0.5,\n\t\t\t\tisOutline:true,\n\t\t\t\toutlineColor:\"#009933\",\n\t\t\t\tshowDir:true\n\t\t\t}\n\t\t});\n\t\trangingTool.turnOn();\n\t});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap303.JPG)\n\n\n\n小练习\n---\n\n#### 绘制太原市区的大概范围\n\nJS\n\n\n```js\n\t// 用坐标拾取器获得坐标\n\tvar lineArr=[\n\t\t[112.490931,37.898793],\n\t\t[112.553588,37.898793],\n\t\t[112.603026,37.899877],\n\t\t[112.605086,37.855028],\n\t\t[112.605601,37.831169],\n\t\t[112.610236,37.824661],\n\t\t[112.610236,37.798487],\n\t\t[112.602683,37.793739],\n\t\t[112.499171,37.793739],\n\t\t[112.495051,37.794553],\n\t\t[112.500544,37.830762],\n\t\t[112.500716,37.843099],\n\t\t[112.48973,37.847301],\n\t\t[112.489901,37.896897],\n\t\t[112.492476,37.8992]\n\t];\n\t// 实例化一个Polyline类\n\tvar polyline=new AMap.Polyline({\n\t\tpath:lineArr,\n\t\tstrokeColor:\"#ff2200\",\n\t\tstrokeWeight:5\n\t});\n\t// 添加到地图中\n\tpolyline.setMap(map);\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap304.JPG)\n\n\n\n\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","source":"_posts/高德地图 Javascript API 入门（三）.md","raw":"---\ntitle: 高德地图 Javascript API 入门（三）\ndate: 2017-02-22 12:52:44\ntags: [GIS,API,JS]\n---\n\n\n高德地图 Javascript API 入门（三）\n===\n\n距离测量插件\n---\n\n#### 区别\n\n虽然鼠标工具插件也提供距离量测功能，\n但是距离量测插件，提供更为丰富的样式设置功能。\n\n#### 加载插件\n\nJS\n\n\t\n```js\n\tmap.plugin([\"AMap.RangingTool\"],function () {\n\t\tvar rangingTool=new AMap.RangingTool(map);\n\t\trangingTool.turnOn(); // 开启量测功能\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap301.JPG)\n\n#### 样式设置\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>RangingToolOptions</p></th><th><p>类型</p></th><th><p>说明</p></th></tr><tr><td><p><code class=\"inline-code\">startMarkerOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置量测起始点标记属性对象，包括点标记样式、大小等，参考 &nbsp;&nbsp;<a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\">MarkerOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">midMarkerOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置量测中间点标记属性对象，包括点标记样式、大小等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\">MarkerOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">endMarkerOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置量测结束点标记属性对象，包括点标记样式、大小等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\">MarkerOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">lineOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置距离量测线的属性对象，包括线样式、颜色等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\">PolylineOptions </a>列表</p></td></tr><tr><td><p><code class=\"inline-code\">tmpLineOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置距离量测过程中临时量测线的属性对象，包括线样式、颜色等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\">PolylineOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">startLabelText</code></p></td><td><p><code class=\"inline-code\">String</code></p></td><td><p>设置量测起始点标签的文字内容，默认为“起点”</p></td></tr><tr><td><p><code class=\"inline-code\">midLabelText</code></p></td><td><p><code class=\"inline-code\">String</code></p></td><td><p>设置量测中间点处标签的文字内容，默认为当前量测结果值</p></td></tr><tr><td><p><code class=\"inline-code\">endLabelText</code></p></td><td><p><code class=\"inline-code\">String</code></p></td><td><p>设置量测结束点处标签的文字内容，默认为当前量测结果值</p></td></tr><tr><td><p><code class=\"inline-code\">startLabelOffset</code></p></td><td><p><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Pixel\" class=\"\" target=\"\"><code class=\"inline-code\">Pixel</code></a>&nbsp;</p></td><td><p>设置量测起始点标签的偏移量。默认值：Pixel(-6, 6)</p></td></tr><tr><td><p><code class=\"inline-code\">midLabelOffset</code></p></td><td><p><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Pixel\" class=\"\" target=\"\"><code class=\"inline-code\">Pixel</code></a>&nbsp;</p></td><td><p>设置量测中间点标签的偏移量。默认值：Pixel(-6, 6)</p></td></tr><tr><td><p><code class=\"inline-code\">endLabelOffset</code></p></td><td><p><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Pixel\" class=\"\" target=\"\"><code class=\"inline-code\">Pixel</code></a>&nbsp;</p></td><td><p>设置量测结束点标签的偏移量。默认值：Pixel(-6, 6)</p></td></tr></tbody></table>\n\n\n#### 示例\n\n\n###### 改变标签文字\n\n\nJS\n\n\n```js\n\tmap.plugin([\"AMap.RangingTool\"],function () {\n\t\tvar rangingTool=new AMap.RangingTool(map,{\n\t\t\tstartLabelText:\"START\",\n\t\t\tmidLabelText:\"MID\",\n\t\t\tendLabelText:\"END\"\n\t\t});\n\t\trangingTool.turnOn();\n\t});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap302.JPG)\n\n\t\n###### 改变线条样式\n\nJS\n\n\n```js\n\tmap.plugin([\"AMap.RangingTool\"],function () {\n\t\tvar rangingTool=new AMap.RangingTool(map,{\n\t\t\tlineOptions:{\n\t\t\t\tstrokeColor:\"#ff3300\",\n\t\t\t\tstrokeStyle:\"dashed\",\n\t\t\t\tstrokeWeight:10,\n\t\t\t\tstrokeOpacity:0.5,\n\t\t\t\tisOutline:true,\n\t\t\t\toutlineColor:\"#009933\",\n\t\t\t\tshowDir:true\n\t\t\t}\n\t\t});\n\t\trangingTool.turnOn();\n\t});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap303.JPG)\n\n\n\n小练习\n---\n\n#### 绘制太原市区的大概范围\n\nJS\n\n\n```js\n\t// 用坐标拾取器获得坐标\n\tvar lineArr=[\n\t\t[112.490931,37.898793],\n\t\t[112.553588,37.898793],\n\t\t[112.603026,37.899877],\n\t\t[112.605086,37.855028],\n\t\t[112.605601,37.831169],\n\t\t[112.610236,37.824661],\n\t\t[112.610236,37.798487],\n\t\t[112.602683,37.793739],\n\t\t[112.499171,37.793739],\n\t\t[112.495051,37.794553],\n\t\t[112.500544,37.830762],\n\t\t[112.500716,37.843099],\n\t\t[112.48973,37.847301],\n\t\t[112.489901,37.896897],\n\t\t[112.492476,37.8992]\n\t];\n\t// 实例化一个Polyline类\n\tvar polyline=new AMap.Polyline({\n\t\tpath:lineArr,\n\t\tstrokeColor:\"#ff2200\",\n\t\tstrokeWeight:5\n\t});\n\t// 添加到地图中\n\tpolyline.setMap(map);\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap304.JPG)\n\n\n\n\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","slug":"高德地图 Javascript API 入门（三）","published":1,"updated":"2019-04-25T09:00:32.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauk8000raeyyqaygis4g","content":"<h1 id=\"高德地图-Javascript-API-入门（三）\"><a href=\"#高德地图-Javascript-API-入门（三）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（三）\"></a>高德地图 Javascript API 入门（三）</h1><h2 id=\"距离测量插件\"><a href=\"#距离测量插件\" class=\"headerlink\" title=\"距离测量插件\"></a>距离测量插件</h2><h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><p>虽然鼠标工具插件也提供距离量测功能，<br>但是距离量测插件，提供更为丰富的样式设置功能。</p>\n<h4 id=\"加载插件\"><a href=\"#加载插件\" class=\"headerlink\" title=\"加载插件\"></a>加载插件</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.RangingTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rangingTool=<span class=\"keyword\">new</span> AMap.RangingTool(map);</span><br><span class=\"line\">\trangingTool.turnOn(); <span class=\"comment\">// 开启量测功能</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap301.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"样式设置\"><a href=\"#样式设置\" class=\"headerlink\" title=\"样式设置\"></a>样式设置</h4><table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>RangingToolOptions</p></th><th><p>类型</p></th><th><p>说明</p></th></tr><tr><td><p><code class=\"inline-code\">startMarkerOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置量测起始点标记属性对象，包括点标记样式、大小等，参考 &nbsp;&nbsp;<a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\">MarkerOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">midMarkerOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置量测中间点标记属性对象，包括点标记样式、大小等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\">MarkerOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">endMarkerOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置量测结束点标记属性对象，包括点标记样式、大小等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\">MarkerOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">lineOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置距离量测线的属性对象，包括线样式、颜色等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\">PolylineOptions </a>列表</p></td></tr><tr><td><p><code class=\"inline-code\">tmpLineOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置距离量测过程中临时量测线的属性对象，包括线样式、颜色等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\">PolylineOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">startLabelText</code></p></td><td><p><code class=\"inline-code\">String</code></p></td><td><p>设置量测起始点标签的文字内容，默认为“起点”</p></td></tr><tr><td><p><code class=\"inline-code\">midLabelText</code></p></td><td><p><code class=\"inline-code\">String</code></p></td><td><p>设置量测中间点处标签的文字内容，默认为当前量测结果值</p></td></tr><tr><td><p><code class=\"inline-code\">endLabelText</code></p></td><td><p><code class=\"inline-code\">String</code></p></td><td><p>设置量测结束点处标签的文字内容，默认为当前量测结果值</p></td></tr><tr><td><p><code class=\"inline-code\">startLabelOffset</code></p></td><td><p><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Pixel\" class=\"\" target=\"_blank\" rel=\"noopener\"><code class=\"inline-code\">Pixel</code></a>&nbsp;</p></td><td><p>设置量测起始点标签的偏移量。默认值：Pixel(-6, 6)</p></td></tr><tr><td><p><code class=\"inline-code\">midLabelOffset</code></p></td><td><p><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Pixel\" class=\"\" target=\"_blank\" rel=\"noopener\"><code class=\"inline-code\">Pixel</code></a>&nbsp;</p></td><td><p>设置量测中间点标签的偏移量。默认值：Pixel(-6, 6)</p></td></tr><tr><td><p><code class=\"inline-code\">endLabelOffset</code></p></td><td><p><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Pixel\" class=\"\" target=\"_blank\" rel=\"noopener\"><code class=\"inline-code\">Pixel</code></a>&nbsp;</p></td><td><p>设置量测结束点标签的偏移量。默认值：Pixel(-6, 6)</p></td></tr></tbody></table>\n\n\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><h6 id=\"改变标签文字\"><a href=\"#改变标签文字\" class=\"headerlink\" title=\"改变标签文字\"></a>改变标签文字</h6><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.RangingTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rangingTool=<span class=\"keyword\">new</span> AMap.RangingTool(map,&#123;</span><br><span class=\"line\">\t\tstartLabelText:<span class=\"string\">\"START\"</span>,</span><br><span class=\"line\">\t\tmidLabelText:<span class=\"string\">\"MID\"</span>,</span><br><span class=\"line\">\t\tendLabelText:<span class=\"string\">\"END\"</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\trangingTool.turnOn();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap302.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h6 id=\"改变线条样式\"><a href=\"#改变线条样式\" class=\"headerlink\" title=\"改变线条样式\"></a>改变线条样式</h6><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.RangingTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rangingTool=<span class=\"keyword\">new</span> AMap.RangingTool(map,&#123;</span><br><span class=\"line\">\t\tlineOptions:&#123;</span><br><span class=\"line\">\t\t\tstrokeColor:<span class=\"string\">\"#ff3300\"</span>,</span><br><span class=\"line\">\t\t\tstrokeStyle:<span class=\"string\">\"dashed\"</span>,</span><br><span class=\"line\">\t\t\tstrokeWeight:<span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t\tstrokeOpacity:<span class=\"number\">0.5</span>,</span><br><span class=\"line\">\t\t\tisOutline:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\toutlineColor:<span class=\"string\">\"#009933\"</span>,</span><br><span class=\"line\">\t\t\tshowDir:<span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\trangingTool.turnOn();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap303.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h2 id=\"小练习\"><a href=\"#小练习\" class=\"headerlink\" title=\"小练习\"></a>小练习</h2><h4 id=\"绘制太原市区的大概范围\"><a href=\"#绘制太原市区的大概范围\" class=\"headerlink\" title=\"绘制太原市区的大概范围\"></a>绘制太原市区的大概范围</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用坐标拾取器获得坐标</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lineArr=[</span><br><span class=\"line\">\t[<span class=\"number\">112.490931</span>,<span class=\"number\">37.898793</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.553588</span>,<span class=\"number\">37.898793</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.603026</span>,<span class=\"number\">37.899877</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.605086</span>,<span class=\"number\">37.855028</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.605601</span>,<span class=\"number\">37.831169</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.610236</span>,<span class=\"number\">37.824661</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.610236</span>,<span class=\"number\">37.798487</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.602683</span>,<span class=\"number\">37.793739</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.499171</span>,<span class=\"number\">37.793739</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.495051</span>,<span class=\"number\">37.794553</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.500544</span>,<span class=\"number\">37.830762</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.500716</span>,<span class=\"number\">37.843099</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.48973</span>,<span class=\"number\">37.847301</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.489901</span>,<span class=\"number\">37.896897</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.492476</span>,<span class=\"number\">37.8992</span>]</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 实例化一个Polyline类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> polyline=<span class=\"keyword\">new</span> AMap.Polyline(&#123;</span><br><span class=\"line\">\tpath:lineArr,</span><br><span class=\"line\">\tstrokeColor:<span class=\"string\">\"#ff2200\"</span>,</span><br><span class=\"line\">\tstrokeWeight:<span class=\"number\">5</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 添加到地图中</span></span><br><span class=\"line\">polyline.setMap(map);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap304.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"高德地图-Javascript-API-入门（三）\"><a href=\"#高德地图-Javascript-API-入门（三）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（三）\"></a>高德地图 Javascript API 入门（三）</h1><h2 id=\"距离测量插件\"><a href=\"#距离测量插件\" class=\"headerlink\" title=\"距离测量插件\"></a>距离测量插件</h2><h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><p>虽然鼠标工具插件也提供距离量测功能，<br>但是距离量测插件，提供更为丰富的样式设置功能。</p>\n<h4 id=\"加载插件\"><a href=\"#加载插件\" class=\"headerlink\" title=\"加载插件\"></a>加载插件</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.RangingTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rangingTool=<span class=\"keyword\">new</span> AMap.RangingTool(map);</span><br><span class=\"line\">\trangingTool.turnOn(); <span class=\"comment\">// 开启量测功能</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap301.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"样式设置\"><a href=\"#样式设置\" class=\"headerlink\" title=\"样式设置\"></a>样式设置</h4><table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>RangingToolOptions</p></th><th><p>类型</p></th><th><p>说明</p></th></tr><tr><td><p><code class=\"inline-code\">startMarkerOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置量测起始点标记属性对象，包括点标记样式、大小等，参考 &nbsp;&nbsp;<a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\">MarkerOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">midMarkerOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置量测中间点标记属性对象，包括点标记样式、大小等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\">MarkerOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">endMarkerOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置量测结束点标记属性对象，包括点标记样式、大小等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\">MarkerOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">lineOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置距离量测线的属性对象，包括线样式、颜色等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\">PolylineOptions </a>列表</p></td></tr><tr><td><p><code class=\"inline-code\">tmpLineOptions</code></p></td><td><p><code class=\"inline-code\">Object</code></p></td><td><p>设置距离量测过程中临时量测线的属性对象，包括线样式、颜色等，参考 &nbsp;<a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\">PolylineOptions</a> &nbsp;列表</p></td></tr><tr><td><p><code class=\"inline-code\">startLabelText</code></p></td><td><p><code class=\"inline-code\">String</code></p></td><td><p>设置量测起始点标签的文字内容，默认为“起点”</p></td></tr><tr><td><p><code class=\"inline-code\">midLabelText</code></p></td><td><p><code class=\"inline-code\">String</code></p></td><td><p>设置量测中间点处标签的文字内容，默认为当前量测结果值</p></td></tr><tr><td><p><code class=\"inline-code\">endLabelText</code></p></td><td><p><code class=\"inline-code\">String</code></p></td><td><p>设置量测结束点处标签的文字内容，默认为当前量测结果值</p></td></tr><tr><td><p><code class=\"inline-code\">startLabelOffset</code></p></td><td><p><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Pixel\" class=\"\" target=\"_blank\" rel=\"noopener\"><code class=\"inline-code\">Pixel</code></a>&nbsp;</p></td><td><p>设置量测起始点标签的偏移量。默认值：Pixel(-6, 6)</p></td></tr><tr><td><p><code class=\"inline-code\">midLabelOffset</code></p></td><td><p><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Pixel\" class=\"\" target=\"_blank\" rel=\"noopener\"><code class=\"inline-code\">Pixel</code></a>&nbsp;</p></td><td><p>设置量测中间点标签的偏移量。默认值：Pixel(-6, 6)</p></td></tr><tr><td><p><code class=\"inline-code\">endLabelOffset</code></p></td><td><p><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Pixel\" class=\"\" target=\"_blank\" rel=\"noopener\"><code class=\"inline-code\">Pixel</code></a>&nbsp;</p></td><td><p>设置量测结束点标签的偏移量。默认值：Pixel(-6, 6)</p></td></tr></tbody></table>\n\n\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><h6 id=\"改变标签文字\"><a href=\"#改变标签文字\" class=\"headerlink\" title=\"改变标签文字\"></a>改变标签文字</h6><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.RangingTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rangingTool=<span class=\"keyword\">new</span> AMap.RangingTool(map,&#123;</span><br><span class=\"line\">\t\tstartLabelText:<span class=\"string\">\"START\"</span>,</span><br><span class=\"line\">\t\tmidLabelText:<span class=\"string\">\"MID\"</span>,</span><br><span class=\"line\">\t\tendLabelText:<span class=\"string\">\"END\"</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\trangingTool.turnOn();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap302.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h6 id=\"改变线条样式\"><a href=\"#改变线条样式\" class=\"headerlink\" title=\"改变线条样式\"></a>改变线条样式</h6><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.RangingTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rangingTool=<span class=\"keyword\">new</span> AMap.RangingTool(map,&#123;</span><br><span class=\"line\">\t\tlineOptions:&#123;</span><br><span class=\"line\">\t\t\tstrokeColor:<span class=\"string\">\"#ff3300\"</span>,</span><br><span class=\"line\">\t\t\tstrokeStyle:<span class=\"string\">\"dashed\"</span>,</span><br><span class=\"line\">\t\t\tstrokeWeight:<span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t\tstrokeOpacity:<span class=\"number\">0.5</span>,</span><br><span class=\"line\">\t\t\tisOutline:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\toutlineColor:<span class=\"string\">\"#009933\"</span>,</span><br><span class=\"line\">\t\t\tshowDir:<span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\trangingTool.turnOn();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap303.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h2 id=\"小练习\"><a href=\"#小练习\" class=\"headerlink\" title=\"小练习\"></a>小练习</h2><h4 id=\"绘制太原市区的大概范围\"><a href=\"#绘制太原市区的大概范围\" class=\"headerlink\" title=\"绘制太原市区的大概范围\"></a>绘制太原市区的大概范围</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用坐标拾取器获得坐标</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lineArr=[</span><br><span class=\"line\">\t[<span class=\"number\">112.490931</span>,<span class=\"number\">37.898793</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.553588</span>,<span class=\"number\">37.898793</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.603026</span>,<span class=\"number\">37.899877</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.605086</span>,<span class=\"number\">37.855028</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.605601</span>,<span class=\"number\">37.831169</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.610236</span>,<span class=\"number\">37.824661</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.610236</span>,<span class=\"number\">37.798487</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.602683</span>,<span class=\"number\">37.793739</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.499171</span>,<span class=\"number\">37.793739</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.495051</span>,<span class=\"number\">37.794553</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.500544</span>,<span class=\"number\">37.830762</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.500716</span>,<span class=\"number\">37.843099</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.48973</span>,<span class=\"number\">37.847301</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.489901</span>,<span class=\"number\">37.896897</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.492476</span>,<span class=\"number\">37.8992</span>]</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 实例化一个Polyline类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> polyline=<span class=\"keyword\">new</span> AMap.Polyline(&#123;</span><br><span class=\"line\">\tpath:lineArr,</span><br><span class=\"line\">\tstrokeColor:<span class=\"string\">\"#ff2200\"</span>,</span><br><span class=\"line\">\tstrokeWeight:<span class=\"number\">5</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 添加到地图中</span></span><br><span class=\"line\">polyline.setMap(map);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap304.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n"},{"title":"高德地图 Javascript API 入门（二）","date":"2017-02-21T05:53:12.000Z","_content":"\n\n高德地图 Javascript API 入门（二）\n===\n\n\n鼠标工具插件\n---\n\n#### 测量距离\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.rule();\n\t});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap201.JPG)\n\n\n#### 测量面积\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.measureArea();\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap202.JPG)\n\n#### 绘制点标注\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.marker();\n\t});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap203.JPG)\n\n\n#### 绘制折线\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.polyline();\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap204.JPG)\n\n\n#### 绘制多边形\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.polygon();\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap205.JPG)\n\n\n#### 绘制矩形\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.rectangle();\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap206.JPG)\n\n\n#### 绘制圆\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.circle();\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap207.JPG)\n\n#### 全部功能\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th style=\"white-space:nowrap;\"><p>方法</p></th><th style=\"white-space:nowrap;\"><p>返回值</p></th><th><p>说明</p></th></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">marker( options：</code><a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\"><code class=\"inline-code\">MarkerOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p><p>&nbsp;</p></td><td><p>开启鼠标画点标注模式。鼠标在地图上单击绘制点标注，标注样式参考MarkerOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">polyline( options：</code><a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolylineOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画折线模式。鼠标在地图上点击绘制折线，鼠标左键双击或右键单击结束绘制，折线样式参考PolylineOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">polygon( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画多边形模式。鼠标在地图上单击开始绘制多边形，鼠标左键双击或右键单击结束当前多边形的绘制，多边形样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rectangle( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画矩形模式。鼠标在地图上拉框即可绘制相应的矩形。矩形样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">circle( options：</code><a href=\"/api/javascript-api/reference/overlay#CircleOptions\" class=\"\" target=\"\"><code class=\"inline-code\">CircleOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画圆模式。鼠标在地图上拖动绘制相应的圆形。圆形样式参考CircleOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rule( options：</code><a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolylineOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启距离量测模式。鼠标在地图上单击绘制量测节点，并计算显示两两节点之间的距离，鼠标左键双击或右键单击结束当前量测操作。量测线样式参考 <a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\">PolylineOptions</a> 设置</p><p>注：不能同时使用rule方法和RangTool插件进行距离量测</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">measureArea( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启面积量测模式。鼠标在地图上单击绘制量测区域，鼠标左键双击或右键单击结束当前量测操作，并显示本次量测结果。量测面样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rectZoomIn( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标拉框放大模式。鼠标可在地图上拉框放大地图。矩形框样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rectZoomOut( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标拉框缩小模式。鼠标可在地图上拉框缩小地图。矩形框样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">close( Boolean)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>关闭当前鼠标操作。参数arg设为true时，鼠标操作关闭的同时清除地图上绘制的所有覆盖物对象；设为false时，保留所绘制的覆盖物对象。默认为false</p></td></tr></tbody></table>\n\n\n#### 自定义覆盖物样式\n\n以折线为例 Polyline\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.polyline({\n\t\t\tstrokeColor:\"#f50\", // 线条颜色，十六进制\n\t\t\tstrokeOpacity:0.5, // 线条透明度\n\t\t\tstrokeWeight:10, // 线条宽度\n\t\t\tstrokeStyle:\"dashed\" // 线条样式 solid || dashed\n\t\t});\n\t});\n```\n\t\n\n更多详细参数参考 [http://lbs.amap.com/api/javascript-api/reference/overlay#PolylineOptions](http://lbs.amap.com/api/javascript-api/reference/overlay#PolylineOptions \"Polyline类\")\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap208.JPG)\n\n\n\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","source":"_posts/高德地图 Javascript API 入门（二）.md","raw":"---\ntitle: 高德地图 Javascript API 入门（二）\ndate: 2017-02-21 13:53:12 \ntags: [GIS,API,JS]\n---\n\n\n高德地图 Javascript API 入门（二）\n===\n\n\n鼠标工具插件\n---\n\n#### 测量距离\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.rule();\n\t});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap201.JPG)\n\n\n#### 测量面积\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.measureArea();\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap202.JPG)\n\n#### 绘制点标注\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.marker();\n\t});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap203.JPG)\n\n\n#### 绘制折线\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.polyline();\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap204.JPG)\n\n\n#### 绘制多边形\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.polygon();\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap205.JPG)\n\n\n#### 绘制矩形\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.rectangle();\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap206.JPG)\n\n\n#### 绘制圆\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.circle();\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap207.JPG)\n\n#### 全部功能\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th style=\"white-space:nowrap;\"><p>方法</p></th><th style=\"white-space:nowrap;\"><p>返回值</p></th><th><p>说明</p></th></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">marker( options：</code><a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\"><code class=\"inline-code\">MarkerOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p><p>&nbsp;</p></td><td><p>开启鼠标画点标注模式。鼠标在地图上单击绘制点标注，标注样式参考MarkerOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">polyline( options：</code><a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolylineOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画折线模式。鼠标在地图上点击绘制折线，鼠标左键双击或右键单击结束绘制，折线样式参考PolylineOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">polygon( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画多边形模式。鼠标在地图上单击开始绘制多边形，鼠标左键双击或右键单击结束当前多边形的绘制，多边形样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rectangle( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画矩形模式。鼠标在地图上拉框即可绘制相应的矩形。矩形样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">circle( options：</code><a href=\"/api/javascript-api/reference/overlay#CircleOptions\" class=\"\" target=\"\"><code class=\"inline-code\">CircleOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画圆模式。鼠标在地图上拖动绘制相应的圆形。圆形样式参考CircleOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rule( options：</code><a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolylineOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启距离量测模式。鼠标在地图上单击绘制量测节点，并计算显示两两节点之间的距离，鼠标左键双击或右键单击结束当前量测操作。量测线样式参考 <a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\">PolylineOptions</a> 设置</p><p>注：不能同时使用rule方法和RangTool插件进行距离量测</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">measureArea( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启面积量测模式。鼠标在地图上单击绘制量测区域，鼠标左键双击或右键单击结束当前量测操作，并显示本次量测结果。量测面样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rectZoomIn( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标拉框放大模式。鼠标可在地图上拉框放大地图。矩形框样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rectZoomOut( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标拉框缩小模式。鼠标可在地图上拉框缩小地图。矩形框样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">close( Boolean)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>关闭当前鼠标操作。参数arg设为true时，鼠标操作关闭的同时清除地图上绘制的所有覆盖物对象；设为false时，保留所绘制的覆盖物对象。默认为false</p></td></tr></tbody></table>\n\n\n#### 自定义覆盖物样式\n\n以折线为例 Polyline\n\nJS\n\n```js\n\tmap.plugin([\"AMap.MouseTool\"],function () {\n\t\tvar mouseTool=new AMap.MouseTool(map);\n\t\tmouseTool.polyline({\n\t\t\tstrokeColor:\"#f50\", // 线条颜色，十六进制\n\t\t\tstrokeOpacity:0.5, // 线条透明度\n\t\t\tstrokeWeight:10, // 线条宽度\n\t\t\tstrokeStyle:\"dashed\" // 线条样式 solid || dashed\n\t\t});\n\t});\n```\n\t\n\n更多详细参数参考 [http://lbs.amap.com/api/javascript-api/reference/overlay#PolylineOptions](http://lbs.amap.com/api/javascript-api/reference/overlay#PolylineOptions \"Polyline类\")\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap208.JPG)\n\n\n\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","slug":"高德地图 Javascript API 入门（二）","published":1,"updated":"2019-04-25T09:00:27.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauk9000saeyy76uyo7vm","content":"<h1 id=\"高德地图-Javascript-API-入门（二）\"><a href=\"#高德地图-Javascript-API-入门（二）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（二）\"></a>高德地图 Javascript API 入门（二）</h1><h2 id=\"鼠标工具插件\"><a href=\"#鼠标工具插件\" class=\"headerlink\" title=\"鼠标工具插件\"></a>鼠标工具插件</h2><h4 id=\"测量距离\"><a href=\"#测量距离\" class=\"headerlink\" title=\"测量距离\"></a>测量距离</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.rule();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap201.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"测量面积\"><a href=\"#测量面积\" class=\"headerlink\" title=\"测量面积\"></a>测量面积</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.measureArea();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap202.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"绘制点标注\"><a href=\"#绘制点标注\" class=\"headerlink\" title=\"绘制点标注\"></a>绘制点标注</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.marker();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap203.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"绘制折线\"><a href=\"#绘制折线\" class=\"headerlink\" title=\"绘制折线\"></a>绘制折线</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.polyline();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap204.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"绘制多边形\"><a href=\"#绘制多边形\" class=\"headerlink\" title=\"绘制多边形\"></a>绘制多边形</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.polygon();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap205.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.rectangle();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap206.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"绘制圆\"><a href=\"#绘制圆\" class=\"headerlink\" title=\"绘制圆\"></a>绘制圆</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.circle();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap207.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"全部功能\"><a href=\"#全部功能\" class=\"headerlink\" title=\"全部功能\"></a>全部功能</h4><table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th style=\"white-space:nowrap;\"><p>方法</p></th><th style=\"white-space:nowrap;\"><p>返回值</p></th><th><p>说明</p></th></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">marker( options：</code><a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\"><code class=\"inline-code\">MarkerOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p><p>&nbsp;</p></td><td><p>开启鼠标画点标注模式。鼠标在地图上单击绘制点标注，标注样式参考MarkerOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">polyline( options：</code><a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolylineOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画折线模式。鼠标在地图上点击绘制折线，鼠标左键双击或右键单击结束绘制，折线样式参考PolylineOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">polygon( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画多边形模式。鼠标在地图上单击开始绘制多边形，鼠标左键双击或右键单击结束当前多边形的绘制，多边形样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rectangle( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画矩形模式。鼠标在地图上拉框即可绘制相应的矩形。矩形样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">circle( options：</code><a href=\"/api/javascript-api/reference/overlay#CircleOptions\" class=\"\" target=\"\"><code class=\"inline-code\">CircleOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画圆模式。鼠标在地图上拖动绘制相应的圆形。圆形样式参考CircleOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rule( options：</code><a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolylineOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启距离量测模式。鼠标在地图上单击绘制量测节点，并计算显示两两节点之间的距离，鼠标左键双击或右键单击结束当前量测操作。量测线样式参考 <a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\">PolylineOptions</a> 设置</p><p>注：不能同时使用rule方法和RangTool插件进行距离量测</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">measureArea( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启面积量测模式。鼠标在地图上单击绘制量测区域，鼠标左键双击或右键单击结束当前量测操作，并显示本次量测结果。量测面样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rectZoomIn( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标拉框放大模式。鼠标可在地图上拉框放大地图。矩形框样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rectZoomOut( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标拉框缩小模式。鼠标可在地图上拉框缩小地图。矩形框样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">close( Boolean)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>关闭当前鼠标操作。参数arg设为true时，鼠标操作关闭的同时清除地图上绘制的所有覆盖物对象；设为false时，保留所绘制的覆盖物对象。默认为false</p></td></tr></tbody></table>\n\n\n<h4 id=\"自定义覆盖物样式\"><a href=\"#自定义覆盖物样式\" class=\"headerlink\" title=\"自定义覆盖物样式\"></a>自定义覆盖物样式</h4><p>以折线为例 Polyline</p>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.polyline(&#123;</span><br><span class=\"line\">\t\tstrokeColor:<span class=\"string\">\"#f50\"</span>, <span class=\"comment\">// 线条颜色，十六进制</span></span><br><span class=\"line\">\t\tstrokeOpacity:<span class=\"number\">0.5</span>, <span class=\"comment\">// 线条透明度</span></span><br><span class=\"line\">\t\tstrokeWeight:<span class=\"number\">10</span>, <span class=\"comment\">// 线条宽度</span></span><br><span class=\"line\">\t\tstrokeStyle:<span class=\"string\">\"dashed\"</span> <span class=\"comment\">// 线条样式 solid || dashed</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>更多详细参数参考 <a href=\"http://lbs.amap.com/api/javascript-api/reference/overlay#PolylineOptions\" title=\"Polyline类\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/api/javascript-api/reference/overlay#PolylineOptions</a></p>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap208.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"高德地图-Javascript-API-入门（二）\"><a href=\"#高德地图-Javascript-API-入门（二）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（二）\"></a>高德地图 Javascript API 入门（二）</h1><h2 id=\"鼠标工具插件\"><a href=\"#鼠标工具插件\" class=\"headerlink\" title=\"鼠标工具插件\"></a>鼠标工具插件</h2><h4 id=\"测量距离\"><a href=\"#测量距离\" class=\"headerlink\" title=\"测量距离\"></a>测量距离</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.rule();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap201.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"测量面积\"><a href=\"#测量面积\" class=\"headerlink\" title=\"测量面积\"></a>测量面积</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.measureArea();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap202.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"绘制点标注\"><a href=\"#绘制点标注\" class=\"headerlink\" title=\"绘制点标注\"></a>绘制点标注</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.marker();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap203.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"绘制折线\"><a href=\"#绘制折线\" class=\"headerlink\" title=\"绘制折线\"></a>绘制折线</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.polyline();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap204.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"绘制多边形\"><a href=\"#绘制多边形\" class=\"headerlink\" title=\"绘制多边形\"></a>绘制多边形</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.polygon();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap205.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.rectangle();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap206.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"绘制圆\"><a href=\"#绘制圆\" class=\"headerlink\" title=\"绘制圆\"></a>绘制圆</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.circle();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap207.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"全部功能\"><a href=\"#全部功能\" class=\"headerlink\" title=\"全部功能\"></a>全部功能</h4><table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th style=\"white-space:nowrap;\"><p>方法</p></th><th style=\"white-space:nowrap;\"><p>返回值</p></th><th><p>说明</p></th></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">marker( options：</code><a href=\"/api/javascript-api/reference/overlay#MarkerOptions\" class=\"\" target=\"\"><code class=\"inline-code\">MarkerOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p><p>&nbsp;</p></td><td><p>开启鼠标画点标注模式。鼠标在地图上单击绘制点标注，标注样式参考MarkerOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">polyline( options：</code><a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolylineOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画折线模式。鼠标在地图上点击绘制折线，鼠标左键双击或右键单击结束绘制，折线样式参考PolylineOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">polygon( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画多边形模式。鼠标在地图上单击开始绘制多边形，鼠标左键双击或右键单击结束当前多边形的绘制，多边形样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rectangle( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画矩形模式。鼠标在地图上拉框即可绘制相应的矩形。矩形样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">circle( options：</code><a href=\"/api/javascript-api/reference/overlay#CircleOptions\" class=\"\" target=\"\"><code class=\"inline-code\">CircleOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标画圆模式。鼠标在地图上拖动绘制相应的圆形。圆形样式参考CircleOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rule( options：</code><a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolylineOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启距离量测模式。鼠标在地图上单击绘制量测节点，并计算显示两两节点之间的距离，鼠标左键双击或右键单击结束当前量测操作。量测线样式参考 <a href=\"/api/javascript-api/reference/overlay#PolylineOptions\" class=\"\" target=\"\">PolylineOptions</a> 设置</p><p>注：不能同时使用rule方法和RangTool插件进行距离量测</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">measureArea( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启面积量测模式。鼠标在地图上单击绘制量测区域，鼠标左键双击或右键单击结束当前量测操作，并显示本次量测结果。量测面样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rectZoomIn( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标拉框放大模式。鼠标可在地图上拉框放大地图。矩形框样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">rectZoomOut( options：</code><a href=\"/api/javascript-api/reference/overlay#PolygonOptions\" class=\"\" target=\"\"><code class=\"inline-code\">PolygonOptions</code></a><code class=\"inline-code\">)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>开启鼠标拉框缩小模式。鼠标可在地图上拉框缩小地图。矩形框样式参考PolygonOptions设置</p></td></tr><tr><td style=\"white-space:nowrap;\"><p><code class=\"inline-code\">close( Boolean)</code></p></td><td style=\"white-space:nowrap;\"><p><br></p></td><td><p>关闭当前鼠标操作。参数arg设为true时，鼠标操作关闭的同时清除地图上绘制的所有覆盖物对象；设为false时，保留所绘制的覆盖物对象。默认为false</p></td></tr></tbody></table>\n\n\n<h4 id=\"自定义覆盖物样式\"><a href=\"#自定义覆盖物样式\" class=\"headerlink\" title=\"自定义覆盖物样式\"></a>自定义覆盖物样式</h4><p>以折线为例 Polyline</p>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MouseTool\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mouseTool=<span class=\"keyword\">new</span> AMap.MouseTool(map);</span><br><span class=\"line\">\tmouseTool.polyline(&#123;</span><br><span class=\"line\">\t\tstrokeColor:<span class=\"string\">\"#f50\"</span>, <span class=\"comment\">// 线条颜色，十六进制</span></span><br><span class=\"line\">\t\tstrokeOpacity:<span class=\"number\">0.5</span>, <span class=\"comment\">// 线条透明度</span></span><br><span class=\"line\">\t\tstrokeWeight:<span class=\"number\">10</span>, <span class=\"comment\">// 线条宽度</span></span><br><span class=\"line\">\t\tstrokeStyle:<span class=\"string\">\"dashed\"</span> <span class=\"comment\">// 线条样式 solid || dashed</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>更多详细参数参考 <a href=\"http://lbs.amap.com/api/javascript-api/reference/overlay#PolylineOptions\" title=\"Polyline类\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/api/javascript-api/reference/overlay#PolylineOptions</a></p>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap208.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n"},{"title":"高德地图 Javascript API 入门（五）","date":"2017-02-26T14:03:02.000Z","_content":"\n\n高德地图 Javascript API 入门（五）\n===\n\n\n搜索服务\n---\n\n#### 搜索服务\n\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>名称</th><th>说明</th><th>是否插件</th></tr><tr><td><a href=\"#m_AMap.Autocomplete\" class=\"\" target=\"\">AMap.Autocomplete</a></td><td>输入提示，根据输入关键字提示匹配信息</td><td>是</td></tr><tr><td><a href=\"#m_AMap.PlaceSearch\" class=\"\" target=\"\">AMap.PlaceSearch</a></td><td>地点搜索服务插件，提供某一特定地区的位置查询服务</td><td>是</td></tr><tr><td><a href=\"#m_AMap.PlaceSearchLayer\" class=\"\" target=\"\">AMap.PlaceSearchLayer</a></td><td>麻点图插件，提供海量搜索结果的辅助显示功能</td><td>是</td></tr><tr><td><a href=\"#m_AMap.DistrictSearch\" class=\"\" target=\"\">AMap.DistrictSearch</a></td><td>行政区查询服务，提供行政区相关信息</td><td>是</td></tr><tr><td><a href=\"#m_AMap.LineSearch\" class=\"\" target=\"\">AMap.LineSearch</a></td><td>公交路线服务，提供公交路线相关信息查询服务</td><td>是</td></tr><tr><td><a href=\"#m_AMap.StationSearch\" class=\"\" target=\"\">AMap.StationSearch</a></td><td>公交站点查询服务，提供途经公交线路、站点经纬度等信息</td><td>是</td></tr></tbody></table>\n\n\n#### 地点搜索插件 AMap.PlaceSearch\n\n- 创建地点查询类的实例\n\n```js\n\t// 创建地点查询类的实例\n\tAMap.service(\"AMap.PlaceSearch\",function () {\n\t\tvar s1=new AMap.PlaceSearch({\n\t\t\tcity:\"北京市\", // 搜索范围的城市\n\t\t\ttype:\"风景名胜\", // 搜索类型\n\t\t\tmap:map, // 可选，AMap示例\n\t\t\tpanel:\"result\", // 可选，结果列表的HTML容器id或容器元素\n\t\t\tpageSize:5, // 结果，单页展示结果数\n\t\t\tpageIndex:2, // 结果，页码\n\t\t\textensions:\"all\" // 信息，默认值 \"base\", 详细信息 \"all\"\n\t\t});\n\t});\n```\n\n\n- 根据关键字搜索\n\n```js\n\t// 关键字搜索\n\ts1.search(\"八达岭\",function (status,result) {\n\t\tconsole.log(result);\n\t});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap501.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n- 根据中心点经纬度、半径以及关键字进行周边查询（周边搜索）\n\n```js\n\t// 周边搜索\n\ts1.searchNearBy(\"餐饮\",[116.403322, 39.920255],1000,function (status,result) {\n    \tconsole.log(result);\n    });\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap502.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n\n- 根据范围和关键词进行范围查询\n\n\n```js\n\tvar lnglat1=new AMap.LngLat( 116.403322, 39.920255);\n\tvar lnglat2=new AMap.LngLat( 116.389846, 39.891365);\n\ts1.searchInBounds('酒店',new AMap.Bounds(lnglat1,lnglat2));\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap503.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n- 根据POIID 查询POI详细信息\n\nPOIID是返回数据（JSON）的一个 id 值\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap504.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n获取POI的详细信息\n\n```js\n\ts1.getDetails(\"B000A82RP2\",function (status,result) {\n    \tconsole.log(result.poiList.pois[0].name);\n   \t\twindow.top.data=result.poiList.pois[0];\n    });\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap505.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n#### 公交线路搜索插件 AMap.LineSearch\n\n- 创建公交线路查询类的实例\n\n```js\n\tAMap.service(\"AMap.LineSearch\",function () {\n  \t\tvar lineSearch=new AMap.LineSearch({\n      \t\tcity:\"太原\",\n    \t\textensions:\"all\"         \n    \t});\n  \t});\n```\n\n- 按关键字查询公交线路\n\n```js\n\tlineSearch.search(\"901\",function (status,result) {\t\n    \tif (status===\"complete\" && result.info===\"OK\") {\n        \tconsole.log(result);\n        \twindow.top.data=result;\n        }\n    });\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap506.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n\n- 按id查询公交线路\n\n\n```js\n\tlineSearch.searchById(\"140100010458\",function (status,result) {\t\n    \tif (status===\"complete\" && result.info===\"OK\") {\n        \tconsole.log(result);\n        \twindow.top.data=result;\n        }\n    });\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap507.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n\n#### LineInfo 对象\n\n- 基本信息\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>属性</th><th>类型</th><th>说明</th></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">id</code></td><td><code class=\"inline-code\">String</code></td><td>公交线路id，该id是唯一标识</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">name</code></td><td><code class=\"inline-code\">String</code></td><td>公交线路名称</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">path</code></td><td><code class=\"inline-code\">Array.&lt;</code><a href=\"/api/javascript-api/reference/core#LngLat\" class=\"\" target=\"\"><code class=\"inline-code\">LngLat</code></a><code class=\"inline-code\">&gt;</code></td><td>公交线路经纬度</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">citycode</code></td><td><code class=\"inline-code\">String</code></td><td>公交线路所在城市的城市编码</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">type</code></td><td><code class=\"inline-code\">String</code></td><td>公交类型列表</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">type</code></td><td><code class=\"inline-code\">String</code></td><td>公交类型列表</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">start_stop</code></td><td><code class=\"inline-code\">String</code></td><td>首发站</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">end_stop</code></td><td><code class=\"inline-code\">String</code></td><td>终点站</td></tr></tbody></table>\n\n- 详细信息\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>属性</th><th>类型</th><th>说明</th></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">stime</code></td><td><code class=\"inline-code\">String</code></td><td>首班车时间</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">etime</code></td><td><code class=\"inline-code\">String</code></td><td>末班车时间</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">basic_price</code></td><td><code class=\"inline-code\">String</code></td><td>起步票价，单位：元</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">total_price</code></td><td><code class=\"inline-code\">String</code></td><td>全程票价，单位：元</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">via_stops</code></td><td><code class=\"inline-code\">String</code></td><td>途径站，包括首发站和终点站</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">distance</code></td><td><code class=\"inline-code\">Number</code></td><td>全程距离，单位：千米</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">bounds</code></td><td><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Bounds\" class=\"\" target=\"\"><code class=\"inline-code\">Bounds</code></a></td><td>此公交路线的地理范围</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">company</code></td><td><code class=\"inline-code\">String</code></td><td>所属公交公司</td></tr></tbody></table>\n\n\n\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","source":"_posts/高德地图 Javascript API 入门（五）.md","raw":"---\ntitle: 高德地图 Javascript API 入门（五）\ndate: 2017-02-26 22:03:02\ntags: [GIS,API,JS]\n---\n\n\n高德地图 Javascript API 入门（五）\n===\n\n\n搜索服务\n---\n\n#### 搜索服务\n\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>名称</th><th>说明</th><th>是否插件</th></tr><tr><td><a href=\"#m_AMap.Autocomplete\" class=\"\" target=\"\">AMap.Autocomplete</a></td><td>输入提示，根据输入关键字提示匹配信息</td><td>是</td></tr><tr><td><a href=\"#m_AMap.PlaceSearch\" class=\"\" target=\"\">AMap.PlaceSearch</a></td><td>地点搜索服务插件，提供某一特定地区的位置查询服务</td><td>是</td></tr><tr><td><a href=\"#m_AMap.PlaceSearchLayer\" class=\"\" target=\"\">AMap.PlaceSearchLayer</a></td><td>麻点图插件，提供海量搜索结果的辅助显示功能</td><td>是</td></tr><tr><td><a href=\"#m_AMap.DistrictSearch\" class=\"\" target=\"\">AMap.DistrictSearch</a></td><td>行政区查询服务，提供行政区相关信息</td><td>是</td></tr><tr><td><a href=\"#m_AMap.LineSearch\" class=\"\" target=\"\">AMap.LineSearch</a></td><td>公交路线服务，提供公交路线相关信息查询服务</td><td>是</td></tr><tr><td><a href=\"#m_AMap.StationSearch\" class=\"\" target=\"\">AMap.StationSearch</a></td><td>公交站点查询服务，提供途经公交线路、站点经纬度等信息</td><td>是</td></tr></tbody></table>\n\n\n#### 地点搜索插件 AMap.PlaceSearch\n\n- 创建地点查询类的实例\n\n```js\n\t// 创建地点查询类的实例\n\tAMap.service(\"AMap.PlaceSearch\",function () {\n\t\tvar s1=new AMap.PlaceSearch({\n\t\t\tcity:\"北京市\", // 搜索范围的城市\n\t\t\ttype:\"风景名胜\", // 搜索类型\n\t\t\tmap:map, // 可选，AMap示例\n\t\t\tpanel:\"result\", // 可选，结果列表的HTML容器id或容器元素\n\t\t\tpageSize:5, // 结果，单页展示结果数\n\t\t\tpageIndex:2, // 结果，页码\n\t\t\textensions:\"all\" // 信息，默认值 \"base\", 详细信息 \"all\"\n\t\t});\n\t});\n```\n\n\n- 根据关键字搜索\n\n```js\n\t// 关键字搜索\n\ts1.search(\"八达岭\",function (status,result) {\n\t\tconsole.log(result);\n\t});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap501.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n- 根据中心点经纬度、半径以及关键字进行周边查询（周边搜索）\n\n```js\n\t// 周边搜索\n\ts1.searchNearBy(\"餐饮\",[116.403322, 39.920255],1000,function (status,result) {\n    \tconsole.log(result);\n    });\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap502.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n\n- 根据范围和关键词进行范围查询\n\n\n```js\n\tvar lnglat1=new AMap.LngLat( 116.403322, 39.920255);\n\tvar lnglat2=new AMap.LngLat( 116.389846, 39.891365);\n\ts1.searchInBounds('酒店',new AMap.Bounds(lnglat1,lnglat2));\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap503.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n- 根据POIID 查询POI详细信息\n\nPOIID是返回数据（JSON）的一个 id 值\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap504.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n获取POI的详细信息\n\n```js\n\ts1.getDetails(\"B000A82RP2\",function (status,result) {\n    \tconsole.log(result.poiList.pois[0].name);\n   \t\twindow.top.data=result.poiList.pois[0];\n    });\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap505.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n#### 公交线路搜索插件 AMap.LineSearch\n\n- 创建公交线路查询类的实例\n\n```js\n\tAMap.service(\"AMap.LineSearch\",function () {\n  \t\tvar lineSearch=new AMap.LineSearch({\n      \t\tcity:\"太原\",\n    \t\textensions:\"all\"         \n    \t});\n  \t});\n```\n\n- 按关键字查询公交线路\n\n```js\n\tlineSearch.search(\"901\",function (status,result) {\t\n    \tif (status===\"complete\" && result.info===\"OK\") {\n        \tconsole.log(result);\n        \twindow.top.data=result;\n        }\n    });\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap506.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n\n- 按id查询公交线路\n\n\n```js\n\tlineSearch.searchById(\"140100010458\",function (status,result) {\t\n    \tif (status===\"complete\" && result.info===\"OK\") {\n        \tconsole.log(result);\n        \twindow.top.data=result;\n        }\n    });\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap507.JPG)\n\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n\n#### LineInfo 对象\n\n- 基本信息\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>属性</th><th>类型</th><th>说明</th></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">id</code></td><td><code class=\"inline-code\">String</code></td><td>公交线路id，该id是唯一标识</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">name</code></td><td><code class=\"inline-code\">String</code></td><td>公交线路名称</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">path</code></td><td><code class=\"inline-code\">Array.&lt;</code><a href=\"/api/javascript-api/reference/core#LngLat\" class=\"\" target=\"\"><code class=\"inline-code\">LngLat</code></a><code class=\"inline-code\">&gt;</code></td><td>公交线路经纬度</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">citycode</code></td><td><code class=\"inline-code\">String</code></td><td>公交线路所在城市的城市编码</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">type</code></td><td><code class=\"inline-code\">String</code></td><td>公交类型列表</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">type</code></td><td><code class=\"inline-code\">String</code></td><td>公交类型列表</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">start_stop</code></td><td><code class=\"inline-code\">String</code></td><td>首发站</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">end_stop</code></td><td><code class=\"inline-code\">String</code></td><td>终点站</td></tr></tbody></table>\n\n- 详细信息\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>属性</th><th>类型</th><th>说明</th></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">stime</code></td><td><code class=\"inline-code\">String</code></td><td>首班车时间</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">etime</code></td><td><code class=\"inline-code\">String</code></td><td>末班车时间</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">basic_price</code></td><td><code class=\"inline-code\">String</code></td><td>起步票价，单位：元</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">total_price</code></td><td><code class=\"inline-code\">String</code></td><td>全程票价，单位：元</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">via_stops</code></td><td><code class=\"inline-code\">String</code></td><td>途径站，包括首发站和终点站</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">distance</code></td><td><code class=\"inline-code\">Number</code></td><td>全程距离，单位：千米</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">bounds</code></td><td><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Bounds\" class=\"\" target=\"\"><code class=\"inline-code\">Bounds</code></a></td><td>此公交路线的地理范围</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">company</code></td><td><code class=\"inline-code\">String</code></td><td>所属公交公司</td></tr></tbody></table>\n\n\n\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","slug":"高德地图 Javascript API 入门（五）","published":1,"updated":"2019-04-25T09:00:24.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaukb000uaeyy4njuaid9","content":"<h1 id=\"高德地图-Javascript-API-入门（五）\"><a href=\"#高德地图-Javascript-API-入门（五）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（五）\"></a>高德地图 Javascript API 入门（五）</h1><h2 id=\"搜索服务\"><a href=\"#搜索服务\" class=\"headerlink\" title=\"搜索服务\"></a>搜索服务</h2><h4 id=\"搜索服务-1\"><a href=\"#搜索服务-1\" class=\"headerlink\" title=\"搜索服务\"></a>搜索服务</h4><table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>名称</th><th>说明</th><th>是否插件</th></tr><tr><td><a href=\"#m_AMap.Autocomplete\" class=\"\" target=\"\">AMap.Autocomplete</a></td><td>输入提示，根据输入关键字提示匹配信息</td><td>是</td></tr><tr><td><a href=\"#m_AMap.PlaceSearch\" class=\"\" target=\"\">AMap.PlaceSearch</a></td><td>地点搜索服务插件，提供某一特定地区的位置查询服务</td><td>是</td></tr><tr><td><a href=\"#m_AMap.PlaceSearchLayer\" class=\"\" target=\"\">AMap.PlaceSearchLayer</a></td><td>麻点图插件，提供海量搜索结果的辅助显示功能</td><td>是</td></tr><tr><td><a href=\"#m_AMap.DistrictSearch\" class=\"\" target=\"\">AMap.DistrictSearch</a></td><td>行政区查询服务，提供行政区相关信息</td><td>是</td></tr><tr><td><a href=\"#m_AMap.LineSearch\" class=\"\" target=\"\">AMap.LineSearch</a></td><td>公交路线服务，提供公交路线相关信息查询服务</td><td>是</td></tr><tr><td><a href=\"#m_AMap.StationSearch\" class=\"\" target=\"\">AMap.StationSearch</a></td><td>公交站点查询服务，提供途经公交线路、站点经纬度等信息</td><td>是</td></tr></tbody></table>\n\n\n<h4 id=\"地点搜索插件-AMap-PlaceSearch\"><a href=\"#地点搜索插件-AMap-PlaceSearch\" class=\"headerlink\" title=\"地点搜索插件 AMap.PlaceSearch\"></a>地点搜索插件 AMap.PlaceSearch</h4><ul>\n<li>创建地点查询类的实例</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建地点查询类的实例</span></span><br><span class=\"line\">AMap.service(<span class=\"string\">\"AMap.PlaceSearch\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s1=<span class=\"keyword\">new</span> AMap.PlaceSearch(&#123;</span><br><span class=\"line\">\t\tcity:<span class=\"string\">\"北京市\"</span>, <span class=\"comment\">// 搜索范围的城市</span></span><br><span class=\"line\">\t\ttype:<span class=\"string\">\"风景名胜\"</span>, <span class=\"comment\">// 搜索类型</span></span><br><span class=\"line\">\t\tmap:map, <span class=\"comment\">// 可选，AMap示例</span></span><br><span class=\"line\">\t\tpanel:<span class=\"string\">\"result\"</span>, <span class=\"comment\">// 可选，结果列表的HTML容器id或容器元素</span></span><br><span class=\"line\">\t\tpageSize:<span class=\"number\">5</span>, <span class=\"comment\">// 结果，单页展示结果数</span></span><br><span class=\"line\">\t\tpageIndex:<span class=\"number\">2</span>, <span class=\"comment\">// 结果，页码</span></span><br><span class=\"line\">\t\textensions:<span class=\"string\">\"all\"</span> <span class=\"comment\">// 信息，默认值 \"base\", 详细信息 \"all\"</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据关键字搜索</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 关键字搜索</span></span><br><span class=\"line\">s1.search(<span class=\"string\">\"八达岭\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap501.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n<ul>\n<li>根据中心点经纬度、半径以及关键字进行周边查询（周边搜索）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 周边搜索</span></span><br><span class=\"line\">s1.searchNearBy(<span class=\"string\">\"餐饮\"</span>,[<span class=\"number\">116.403322</span>, <span class=\"number\">39.920255</span>],<span class=\"number\">1000</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">   \t<span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap502.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n\n<ul>\n<li>根据范围和关键词进行范围查询</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lnglat1=<span class=\"keyword\">new</span> AMap.LngLat( <span class=\"number\">116.403322</span>, <span class=\"number\">39.920255</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> lnglat2=<span class=\"keyword\">new</span> AMap.LngLat( <span class=\"number\">116.389846</span>, <span class=\"number\">39.891365</span>);</span><br><span class=\"line\">s1.searchInBounds(<span class=\"string\">'酒店'</span>,<span class=\"keyword\">new</span> AMap.Bounds(lnglat1,lnglat2));</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap503.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n<ul>\n<li>根据POIID 查询POI详细信息</li>\n</ul>\n<p>POIID是返回数据（JSON）的一个 id 值</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap504.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n<p>获取POI的详细信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1.getDetails(<span class=\"string\">\"B000A82RP2\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">   \t<span class=\"built_in\">console</span>.log(result.poiList.pois[<span class=\"number\">0</span>].name);</span><br><span class=\"line\">  \t\t<span class=\"built_in\">window</span>.top.data=result.poiList.pois[<span class=\"number\">0</span>];</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap505.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n<h4 id=\"公交线路搜索插件-AMap-LineSearch\"><a href=\"#公交线路搜索插件-AMap-LineSearch\" class=\"headerlink\" title=\"公交线路搜索插件 AMap.LineSearch\"></a>公交线路搜索插件 AMap.LineSearch</h4><ul>\n<li>创建公交线路查询类的实例</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AMap.service(<span class=\"string\">\"AMap.LineSearch\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">var</span> lineSearch=<span class=\"keyword\">new</span> AMap.LineSearch(&#123;</span><br><span class=\"line\">     \t\tcity:<span class=\"string\">\"太原\"</span>,</span><br><span class=\"line\">   \t\textensions:<span class=\"string\">\"all\"</span>         </span><br><span class=\"line\">   \t&#125;);</span><br><span class=\"line\"> \t&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按关键字查询公交线路</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lineSearch.search(<span class=\"string\">\"901\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;\t</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> (status===<span class=\"string\">\"complete\"</span> &amp;&amp; result.info===<span class=\"string\">\"OK\"</span>) &#123;</span><br><span class=\"line\">       \t<span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">       \t<span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap506.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n\n<ul>\n<li>按id查询公交线路</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lineSearch.searchById(<span class=\"string\">\"140100010458\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;\t</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> (status===<span class=\"string\">\"complete\"</span> &amp;&amp; result.info===<span class=\"string\">\"OK\"</span>) &#123;</span><br><span class=\"line\">       \t<span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">       \t<span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap507.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n\n<h4 id=\"LineInfo-对象\"><a href=\"#LineInfo-对象\" class=\"headerlink\" title=\"LineInfo 对象\"></a>LineInfo 对象</h4><ul>\n<li>基本信息</li>\n</ul>\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>属性</th><th>类型</th><th>说明</th></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">id</code></td><td><code class=\"inline-code\">String</code></td><td>公交线路id，该id是唯一标识</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">name</code></td><td><code class=\"inline-code\">String</code></td><td>公交线路名称</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">path</code></td><td><code class=\"inline-code\">Array.&lt;</code><a href=\"/api/javascript-api/reference/core#LngLat\" class=\"\" target=\"\"><code class=\"inline-code\">LngLat</code></a><code class=\"inline-code\">&gt;</code></td><td>公交线路经纬度</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">citycode</code></td><td><code class=\"inline-code\">String</code></td><td>公交线路所在城市的城市编码</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">type</code></td><td><code class=\"inline-code\">String</code></td><td>公交类型列表</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">type</code></td><td><code class=\"inline-code\">String</code></td><td>公交类型列表</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">start_stop</code></td><td><code class=\"inline-code\">String</code></td><td>首发站</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">end_stop</code></td><td><code class=\"inline-code\">String</code></td><td>终点站</td></tr></tbody></table>\n\n<ul>\n<li>详细信息</li>\n</ul>\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>属性</th><th>类型</th><th>说明</th></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">stime</code></td><td><code class=\"inline-code\">String</code></td><td>首班车时间</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">etime</code></td><td><code class=\"inline-code\">String</code></td><td>末班车时间</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">basic_price</code></td><td><code class=\"inline-code\">String</code></td><td>起步票价，单位：元</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">total_price</code></td><td><code class=\"inline-code\">String</code></td><td>全程票价，单位：元</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">via_stops</code></td><td><code class=\"inline-code\">String</code></td><td>途径站，包括首发站和终点站</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">distance</code></td><td><code class=\"inline-code\">Number</code></td><td>全程距离，单位：千米</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">bounds</code></td><td><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Bounds\" class=\"\" target=\"_blank\" rel=\"noopener\"><code class=\"inline-code\">Bounds</code></a></td><td>此公交路线的地理范围</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">company</code></td><td><code class=\"inline-code\">String</code></td><td>所属公交公司</td></tr></tbody></table>\n\n\n\n\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"高德地图-Javascript-API-入门（五）\"><a href=\"#高德地图-Javascript-API-入门（五）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（五）\"></a>高德地图 Javascript API 入门（五）</h1><h2 id=\"搜索服务\"><a href=\"#搜索服务\" class=\"headerlink\" title=\"搜索服务\"></a>搜索服务</h2><h4 id=\"搜索服务-1\"><a href=\"#搜索服务-1\" class=\"headerlink\" title=\"搜索服务\"></a>搜索服务</h4><table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>名称</th><th>说明</th><th>是否插件</th></tr><tr><td><a href=\"#m_AMap.Autocomplete\" class=\"\" target=\"\">AMap.Autocomplete</a></td><td>输入提示，根据输入关键字提示匹配信息</td><td>是</td></tr><tr><td><a href=\"#m_AMap.PlaceSearch\" class=\"\" target=\"\">AMap.PlaceSearch</a></td><td>地点搜索服务插件，提供某一特定地区的位置查询服务</td><td>是</td></tr><tr><td><a href=\"#m_AMap.PlaceSearchLayer\" class=\"\" target=\"\">AMap.PlaceSearchLayer</a></td><td>麻点图插件，提供海量搜索结果的辅助显示功能</td><td>是</td></tr><tr><td><a href=\"#m_AMap.DistrictSearch\" class=\"\" target=\"\">AMap.DistrictSearch</a></td><td>行政区查询服务，提供行政区相关信息</td><td>是</td></tr><tr><td><a href=\"#m_AMap.LineSearch\" class=\"\" target=\"\">AMap.LineSearch</a></td><td>公交路线服务，提供公交路线相关信息查询服务</td><td>是</td></tr><tr><td><a href=\"#m_AMap.StationSearch\" class=\"\" target=\"\">AMap.StationSearch</a></td><td>公交站点查询服务，提供途经公交线路、站点经纬度等信息</td><td>是</td></tr></tbody></table>\n\n\n<h4 id=\"地点搜索插件-AMap-PlaceSearch\"><a href=\"#地点搜索插件-AMap-PlaceSearch\" class=\"headerlink\" title=\"地点搜索插件 AMap.PlaceSearch\"></a>地点搜索插件 AMap.PlaceSearch</h4><ul>\n<li>创建地点查询类的实例</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建地点查询类的实例</span></span><br><span class=\"line\">AMap.service(<span class=\"string\">\"AMap.PlaceSearch\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s1=<span class=\"keyword\">new</span> AMap.PlaceSearch(&#123;</span><br><span class=\"line\">\t\tcity:<span class=\"string\">\"北京市\"</span>, <span class=\"comment\">// 搜索范围的城市</span></span><br><span class=\"line\">\t\ttype:<span class=\"string\">\"风景名胜\"</span>, <span class=\"comment\">// 搜索类型</span></span><br><span class=\"line\">\t\tmap:map, <span class=\"comment\">// 可选，AMap示例</span></span><br><span class=\"line\">\t\tpanel:<span class=\"string\">\"result\"</span>, <span class=\"comment\">// 可选，结果列表的HTML容器id或容器元素</span></span><br><span class=\"line\">\t\tpageSize:<span class=\"number\">5</span>, <span class=\"comment\">// 结果，单页展示结果数</span></span><br><span class=\"line\">\t\tpageIndex:<span class=\"number\">2</span>, <span class=\"comment\">// 结果，页码</span></span><br><span class=\"line\">\t\textensions:<span class=\"string\">\"all\"</span> <span class=\"comment\">// 信息，默认值 \"base\", 详细信息 \"all\"</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据关键字搜索</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 关键字搜索</span></span><br><span class=\"line\">s1.search(<span class=\"string\">\"八达岭\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap501.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n<ul>\n<li>根据中心点经纬度、半径以及关键字进行周边查询（周边搜索）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 周边搜索</span></span><br><span class=\"line\">s1.searchNearBy(<span class=\"string\">\"餐饮\"</span>,[<span class=\"number\">116.403322</span>, <span class=\"number\">39.920255</span>],<span class=\"number\">1000</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">   \t<span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap502.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n\n<ul>\n<li>根据范围和关键词进行范围查询</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lnglat1=<span class=\"keyword\">new</span> AMap.LngLat( <span class=\"number\">116.403322</span>, <span class=\"number\">39.920255</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> lnglat2=<span class=\"keyword\">new</span> AMap.LngLat( <span class=\"number\">116.389846</span>, <span class=\"number\">39.891365</span>);</span><br><span class=\"line\">s1.searchInBounds(<span class=\"string\">'酒店'</span>,<span class=\"keyword\">new</span> AMap.Bounds(lnglat1,lnglat2));</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap503.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n<ul>\n<li>根据POIID 查询POI详细信息</li>\n</ul>\n<p>POIID是返回数据（JSON）的一个 id 值</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap504.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n<p>获取POI的详细信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1.getDetails(<span class=\"string\">\"B000A82RP2\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">   \t<span class=\"built_in\">console</span>.log(result.poiList.pois[<span class=\"number\">0</span>].name);</span><br><span class=\"line\">  \t\t<span class=\"built_in\">window</span>.top.data=result.poiList.pois[<span class=\"number\">0</span>];</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap505.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n<h4 id=\"公交线路搜索插件-AMap-LineSearch\"><a href=\"#公交线路搜索插件-AMap-LineSearch\" class=\"headerlink\" title=\"公交线路搜索插件 AMap.LineSearch\"></a>公交线路搜索插件 AMap.LineSearch</h4><ul>\n<li>创建公交线路查询类的实例</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AMap.service(<span class=\"string\">\"AMap.LineSearch\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">var</span> lineSearch=<span class=\"keyword\">new</span> AMap.LineSearch(&#123;</span><br><span class=\"line\">     \t\tcity:<span class=\"string\">\"太原\"</span>,</span><br><span class=\"line\">   \t\textensions:<span class=\"string\">\"all\"</span>         </span><br><span class=\"line\">   \t&#125;);</span><br><span class=\"line\"> \t&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按关键字查询公交线路</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lineSearch.search(<span class=\"string\">\"901\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;\t</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> (status===<span class=\"string\">\"complete\"</span> &amp;&amp; result.info===<span class=\"string\">\"OK\"</span>) &#123;</span><br><span class=\"line\">       \t<span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">       \t<span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap506.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n\n<ul>\n<li>按id查询公交线路</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lineSearch.searchById(<span class=\"string\">\"140100010458\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;\t</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> (status===<span class=\"string\">\"complete\"</span> &amp;&amp; result.info===<span class=\"string\">\"OK\"</span>) &#123;</span><br><span class=\"line\">       \t<span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">       \t<span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap507.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<div style=\"margin:30px 0;border-bottom:3px dotted #9c3\"></div>\n\n\n<h4 id=\"LineInfo-对象\"><a href=\"#LineInfo-对象\" class=\"headerlink\" title=\"LineInfo 对象\"></a>LineInfo 对象</h4><ul>\n<li>基本信息</li>\n</ul>\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>属性</th><th>类型</th><th>说明</th></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">id</code></td><td><code class=\"inline-code\">String</code></td><td>公交线路id，该id是唯一标识</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">name</code></td><td><code class=\"inline-code\">String</code></td><td>公交线路名称</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">path</code></td><td><code class=\"inline-code\">Array.&lt;</code><a href=\"/api/javascript-api/reference/core#LngLat\" class=\"\" target=\"\"><code class=\"inline-code\">LngLat</code></a><code class=\"inline-code\">&gt;</code></td><td>公交线路经纬度</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">citycode</code></td><td><code class=\"inline-code\">String</code></td><td>公交线路所在城市的城市编码</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">type</code></td><td><code class=\"inline-code\">String</code></td><td>公交类型列表</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">type</code></td><td><code class=\"inline-code\">String</code></td><td>公交类型列表</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">start_stop</code></td><td><code class=\"inline-code\">String</code></td><td>首发站</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">end_stop</code></td><td><code class=\"inline-code\">String</code></td><td>终点站</td></tr></tbody></table>\n\n<ul>\n<li>详细信息</li>\n</ul>\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>属性</th><th>类型</th><th>说明</th></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">stime</code></td><td><code class=\"inline-code\">String</code></td><td>首班车时间</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">etime</code></td><td><code class=\"inline-code\">String</code></td><td>末班车时间</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">basic_price</code></td><td><code class=\"inline-code\">String</code></td><td>起步票价，单位：元</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">total_price</code></td><td><code class=\"inline-code\">String</code></td><td>全程票价，单位：元</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">via_stops</code></td><td><code class=\"inline-code\">String</code></td><td>途径站，包括首发站和终点站</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">distance</code></td><td><code class=\"inline-code\">Number</code></td><td>全程距离，单位：千米</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">bounds</code></td><td><a href=\"http://lbs.amap.com/api/javascript-api/reference/core/#Bounds\" class=\"\" target=\"_blank\" rel=\"noopener\"><code class=\"inline-code\">Bounds</code></a></td><td>此公交路线的地理范围</td></tr><tr><td style=\"white-space: nowrap;\"><code class=\"inline-code\">company</code></td><td><code class=\"inline-code\">String</code></td><td>所属公交公司</td></tr></tbody></table>\n\n\n\n\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n"},{"title":"高德地图 Javascript API 入门（八）","date":"2017-03-07T13:57:02.000Z","_content":"\n\n高德地图 Javascript API 入门（八）\n===\n\n点聚合插件\n---\n\n用于地图上加载大量点标记，提高地图浏览性能。点聚合支持用户自定义点标记\n\n#### 加载地图\n\n```js\n// 加载地图\nvar map=new AMap.Map(\"container\",{\n    resizeEnable:true,\n    center:[116.397428, 39.90923],\n    zoom:11\n});\n```\n#### 生成点标记\n\n```js\n// 生成点标记\nvar markers=[];\nvar marker=null;\nfor (var i=0;i<100;i++) {\n    marker=new AMap.Marker({\n        position:[116.39+0.001*Math.random()*i, 39.90-0.001*Math.random()*i],\n        icon: \"http://amappc.cn-hangzhou.oss-pub.aliyun-inc.com/lbs/static/img/marker.png\"\n    });\n    marker.setMap(map);\n    markers.push(marker);\n}\n```\n\n#### 载入点聚合插件\n\n- 默认样式\n\n```js\nmap.plugin([\"AMap.MarkerClusterer\"],function () {\n    var cluster=new AMap.MarkerClusterer(map,markers);\n});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap801.JPG)\n\n- 自定义样式\n\n\n```js\n// 聚合样式\nvar sts=[{\n    url:\"http://a.amap.com/lbs/static/img/1102-1.png\",\n    size:new AMap.Size(32,32),\n    offset:new AMap.Pixel(-16,-30),\n    imageOffset:new AMap.Pixel(0,0)\n},{\n    url:\"http://a.amap.com/lbs/static/img/2.png\",\n    size:new AMap.Size(32,32),\n    offset:new AMap.Pixel(-16,-30)\n},{\n    url:\"http://lbs.amap.com/wp-content/uploads/2014/06/3.png\",\n    size:new AMap.Size(32,32),\n    offset:new AMap.Pixel(-16,-30),\n    textColor:\"#f00\",\n    textSize:30\n}];\n// 载入插件\nmap.plugin([\"AMap.MarkerClusterer\"],function () {\n    var cluster=new AMap.MarkerClusterer(map,markers,{\n        styles:sts\n    });\n});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap802.JPG)\n\n\n#### MarkerClustererOptions\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>MarkerClustererOptions</p></th><th><p>类型</p></th><th><p>说明</p></th></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">gridSize</code></p></td><td><p><code class=\"inline-code\">Number</code></p></td><td><p>聚合计算时网格的像素大小，默认60</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">minClusterSize</code></p></td><td><p><code class=\"inline-code\">Number</code></p></td><td><p>聚合的最小数量。默认值为2，即小于2个点则不能成为一个聚合</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">maxZoom</code></p></td><td><p><code class=\"inline-code\">Number</code></p></td><td><p>最大的聚合级别，大于该级别就不进行相应的聚合。默认值为18，即小于18级的级别均进行聚合，18及以上级别不进行聚合</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">averageCenter</code></p></td><td><p><code class=\"inline-code\">Boolean</code></p></td><td><p>聚合点的图标位置是否是所有聚合内点的中心点。默认为否，即聚合点的图标位置位于聚合内的第一个点处</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">styles</code></p></td><td><p><code class=\"inline-code\">Array&lt;Object&gt;</code></p></td><td><p>自定义聚合后的点标记图标的样式，根据数组元素顺序设置1-10,11-100,101-1000…聚合样式</p><p>当用户设置聚合样式少于实际叠加的点数，未设置部分按照系统默认样式显示</p><p>单个图标样式包括以下几个属性：</p><p>1. {string}url：图标显示图片的url地址（必选）</p><p>2. {AMap.Size}size：图标显示图片的大小（必选）</p><p>3. {AMap.Pixel} offset：图标定位在地图上的位置相对于图标左上角的偏移值。默认为(0,0),不偏移（可选）</p><p>4. {AMap.Pixel} imageOffset：图片相对于可视区域的偏移值，此功能的作用等同CSS中的background-position属性。默认为(0,0)，不偏移（可选）</p><p>5. {String} textColor：文字的颜色，默认为\"#000000\"（可选）</p><p>6. {Number} textSize：文字的大小，默认为10（可选）</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">zoomOnClick</code></p></td><td><p><code class=\"inline-code\">Boolean</code></p></td><td><p>点击聚合点时，是否散开，默认值为：true</p></td></tr></tbody></table>\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","source":"_posts/高德地图 Javascript API 入门（八）.md","raw":"---\ntitle: 高德地图 Javascript API 入门（八）\ndate: 2017-03-07 21:57:02\ntags: [GIS,API,JS]\n---\n\n\n高德地图 Javascript API 入门（八）\n===\n\n点聚合插件\n---\n\n用于地图上加载大量点标记，提高地图浏览性能。点聚合支持用户自定义点标记\n\n#### 加载地图\n\n```js\n// 加载地图\nvar map=new AMap.Map(\"container\",{\n    resizeEnable:true,\n    center:[116.397428, 39.90923],\n    zoom:11\n});\n```\n#### 生成点标记\n\n```js\n// 生成点标记\nvar markers=[];\nvar marker=null;\nfor (var i=0;i<100;i++) {\n    marker=new AMap.Marker({\n        position:[116.39+0.001*Math.random()*i, 39.90-0.001*Math.random()*i],\n        icon: \"http://amappc.cn-hangzhou.oss-pub.aliyun-inc.com/lbs/static/img/marker.png\"\n    });\n    marker.setMap(map);\n    markers.push(marker);\n}\n```\n\n#### 载入点聚合插件\n\n- 默认样式\n\n```js\nmap.plugin([\"AMap.MarkerClusterer\"],function () {\n    var cluster=new AMap.MarkerClusterer(map,markers);\n});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap801.JPG)\n\n- 自定义样式\n\n\n```js\n// 聚合样式\nvar sts=[{\n    url:\"http://a.amap.com/lbs/static/img/1102-1.png\",\n    size:new AMap.Size(32,32),\n    offset:new AMap.Pixel(-16,-30),\n    imageOffset:new AMap.Pixel(0,0)\n},{\n    url:\"http://a.amap.com/lbs/static/img/2.png\",\n    size:new AMap.Size(32,32),\n    offset:new AMap.Pixel(-16,-30)\n},{\n    url:\"http://lbs.amap.com/wp-content/uploads/2014/06/3.png\",\n    size:new AMap.Size(32,32),\n    offset:new AMap.Pixel(-16,-30),\n    textColor:\"#f00\",\n    textSize:30\n}];\n// 载入插件\nmap.plugin([\"AMap.MarkerClusterer\"],function () {\n    var cluster=new AMap.MarkerClusterer(map,markers,{\n        styles:sts\n    });\n});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap802.JPG)\n\n\n#### MarkerClustererOptions\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>MarkerClustererOptions</p></th><th><p>类型</p></th><th><p>说明</p></th></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">gridSize</code></p></td><td><p><code class=\"inline-code\">Number</code></p></td><td><p>聚合计算时网格的像素大小，默认60</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">minClusterSize</code></p></td><td><p><code class=\"inline-code\">Number</code></p></td><td><p>聚合的最小数量。默认值为2，即小于2个点则不能成为一个聚合</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">maxZoom</code></p></td><td><p><code class=\"inline-code\">Number</code></p></td><td><p>最大的聚合级别，大于该级别就不进行相应的聚合。默认值为18，即小于18级的级别均进行聚合，18及以上级别不进行聚合</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">averageCenter</code></p></td><td><p><code class=\"inline-code\">Boolean</code></p></td><td><p>聚合点的图标位置是否是所有聚合内点的中心点。默认为否，即聚合点的图标位置位于聚合内的第一个点处</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">styles</code></p></td><td><p><code class=\"inline-code\">Array&lt;Object&gt;</code></p></td><td><p>自定义聚合后的点标记图标的样式，根据数组元素顺序设置1-10,11-100,101-1000…聚合样式</p><p>当用户设置聚合样式少于实际叠加的点数，未设置部分按照系统默认样式显示</p><p>单个图标样式包括以下几个属性：</p><p>1. {string}url：图标显示图片的url地址（必选）</p><p>2. {AMap.Size}size：图标显示图片的大小（必选）</p><p>3. {AMap.Pixel} offset：图标定位在地图上的位置相对于图标左上角的偏移值。默认为(0,0),不偏移（可选）</p><p>4. {AMap.Pixel} imageOffset：图片相对于可视区域的偏移值，此功能的作用等同CSS中的background-position属性。默认为(0,0)，不偏移（可选）</p><p>5. {String} textColor：文字的颜色，默认为\"#000000\"（可选）</p><p>6. {Number} textSize：文字的大小，默认为10（可选）</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">zoomOnClick</code></p></td><td><p><code class=\"inline-code\">Boolean</code></p></td><td><p>点击聚合点时，是否散开，默认值为：true</p></td></tr></tbody></table>\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","slug":"高德地图 Javascript API 入门（八）","published":1,"updated":"2019-04-25T09:00:20.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauld001laeyyq4x8yuev","content":"<h1 id=\"高德地图-Javascript-API-入门（八）\"><a href=\"#高德地图-Javascript-API-入门（八）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（八）\"></a>高德地图 Javascript API 入门（八）</h1><h2 id=\"点聚合插件\"><a href=\"#点聚合插件\" class=\"headerlink\" title=\"点聚合插件\"></a>点聚合插件</h2><p>用于地图上加载大量点标记，提高地图浏览性能。点聚合支持用户自定义点标记</p>\n<h4 id=\"加载地图\"><a href=\"#加载地图\" class=\"headerlink\" title=\"加载地图\"></a>加载地图</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载地图</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map=<span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">\"container\"</span>,&#123;</span><br><span class=\"line\">    resizeEnable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    center:[<span class=\"number\">116.397428</span>, <span class=\"number\">39.90923</span>],</span><br><span class=\"line\">    zoom:<span class=\"number\">11</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成点标记\"><a href=\"#生成点标记\" class=\"headerlink\" title=\"生成点标记\"></a>生成点标记</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成点标记</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> markers=[];</span><br><span class=\"line\"><span class=\"keyword\">var</span> marker=<span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++) &#123;</span><br><span class=\"line\">    marker=<span class=\"keyword\">new</span> AMap.Marker(&#123;</span><br><span class=\"line\">        position:[<span class=\"number\">116.39</span>+<span class=\"number\">0.001</span>*<span class=\"built_in\">Math</span>.random()*i, <span class=\"number\">39.90</span><span class=\"number\">-0.001</span>*<span class=\"built_in\">Math</span>.random()*i],</span><br><span class=\"line\">        icon: <span class=\"string\">\"http://amappc.cn-hangzhou.oss-pub.aliyun-inc.com/lbs/static/img/marker.png\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    marker.setMap(map);</span><br><span class=\"line\">    markers.push(marker);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"载入点聚合插件\"><a href=\"#载入点聚合插件\" class=\"headerlink\" title=\"载入点聚合插件\"></a>载入点聚合插件</h4><ul>\n<li>默认样式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MarkerClusterer\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cluster=<span class=\"keyword\">new</span> AMap.MarkerClusterer(map,markers);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap801.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<ul>\n<li>自定义样式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 聚合样式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sts=[&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"http://a.amap.com/lbs/static/img/1102-1.png\"</span>,</span><br><span class=\"line\">    size:<span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">32</span>,<span class=\"number\">32</span>),</span><br><span class=\"line\">    offset:<span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">-16</span>,<span class=\"number\">-30</span>),</span><br><span class=\"line\">    imageOffset:<span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"http://a.amap.com/lbs/static/img/2.png\"</span>,</span><br><span class=\"line\">    size:<span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">32</span>,<span class=\"number\">32</span>),</span><br><span class=\"line\">    offset:<span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">-16</span>,<span class=\"number\">-30</span>)</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"http://lbs.amap.com/wp-content/uploads/2014/06/3.png\"</span>,</span><br><span class=\"line\">    size:<span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">32</span>,<span class=\"number\">32</span>),</span><br><span class=\"line\">    offset:<span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">-16</span>,<span class=\"number\">-30</span>),</span><br><span class=\"line\">    textColor:<span class=\"string\">\"#f00\"</span>,</span><br><span class=\"line\">    textSize:<span class=\"number\">30</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"><span class=\"comment\">// 载入插件</span></span><br><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MarkerClusterer\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cluster=<span class=\"keyword\">new</span> AMap.MarkerClusterer(map,markers,&#123;</span><br><span class=\"line\">        styles:sts</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap802.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"MarkerClustererOptions\"><a href=\"#MarkerClustererOptions\" class=\"headerlink\" title=\"MarkerClustererOptions\"></a>MarkerClustererOptions</h4><table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>MarkerClustererOptions</p></th><th><p>类型</p></th><th><p>说明</p></th></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">gridSize</code></p></td><td><p><code class=\"inline-code\">Number</code></p></td><td><p>聚合计算时网格的像素大小，默认60</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">minClusterSize</code></p></td><td><p><code class=\"inline-code\">Number</code></p></td><td><p>聚合的最小数量。默认值为2，即小于2个点则不能成为一个聚合</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">maxZoom</code></p></td><td><p><code class=\"inline-code\">Number</code></p></td><td><p>最大的聚合级别，大于该级别就不进行相应的聚合。默认值为18，即小于18级的级别均进行聚合，18及以上级别不进行聚合</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">averageCenter</code></p></td><td><p><code class=\"inline-code\">Boolean</code></p></td><td><p>聚合点的图标位置是否是所有聚合内点的中心点。默认为否，即聚合点的图标位置位于聚合内的第一个点处</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">styles</code></p></td><td><p><code class=\"inline-code\">Array&lt;Object&gt;</code></p></td><td><p>自定义聚合后的点标记图标的样式，根据数组元素顺序设置1-10,11-100,101-1000…聚合样式</p><p>当用户设置聚合样式少于实际叠加的点数，未设置部分按照系统默认样式显示</p><p>单个图标样式包括以下几个属性：</p><p>1. {string}url：图标显示图片的url地址（必选）</p><p>2. {AMap.Size}size：图标显示图片的大小（必选）</p><p>3. {AMap.Pixel} offset：图标定位在地图上的位置相对于图标左上角的偏移值。默认为(0,0),不偏移（可选）</p><p>4. {AMap.Pixel} imageOffset：图片相对于可视区域的偏移值，此功能的作用等同CSS中的background-position属性。默认为(0,0)，不偏移（可选）</p><p>5. {String} textColor：文字的颜色，默认为”#000000”（可选）</p><p>6. {Number} textSize：文字的大小，默认为10（可选）</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">zoomOnClick</code></p></td><td><p><code class=\"inline-code\">Boolean</code></p></td><td><p>点击聚合点时，是否散开，默认值为：true</p></td></tr></tbody></table>\n\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"高德地图-Javascript-API-入门（八）\"><a href=\"#高德地图-Javascript-API-入门（八）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（八）\"></a>高德地图 Javascript API 入门（八）</h1><h2 id=\"点聚合插件\"><a href=\"#点聚合插件\" class=\"headerlink\" title=\"点聚合插件\"></a>点聚合插件</h2><p>用于地图上加载大量点标记，提高地图浏览性能。点聚合支持用户自定义点标记</p>\n<h4 id=\"加载地图\"><a href=\"#加载地图\" class=\"headerlink\" title=\"加载地图\"></a>加载地图</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载地图</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map=<span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">\"container\"</span>,&#123;</span><br><span class=\"line\">    resizeEnable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    center:[<span class=\"number\">116.397428</span>, <span class=\"number\">39.90923</span>],</span><br><span class=\"line\">    zoom:<span class=\"number\">11</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成点标记\"><a href=\"#生成点标记\" class=\"headerlink\" title=\"生成点标记\"></a>生成点标记</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成点标记</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> markers=[];</span><br><span class=\"line\"><span class=\"keyword\">var</span> marker=<span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++) &#123;</span><br><span class=\"line\">    marker=<span class=\"keyword\">new</span> AMap.Marker(&#123;</span><br><span class=\"line\">        position:[<span class=\"number\">116.39</span>+<span class=\"number\">0.001</span>*<span class=\"built_in\">Math</span>.random()*i, <span class=\"number\">39.90</span><span class=\"number\">-0.001</span>*<span class=\"built_in\">Math</span>.random()*i],</span><br><span class=\"line\">        icon: <span class=\"string\">\"http://amappc.cn-hangzhou.oss-pub.aliyun-inc.com/lbs/static/img/marker.png\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    marker.setMap(map);</span><br><span class=\"line\">    markers.push(marker);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"载入点聚合插件\"><a href=\"#载入点聚合插件\" class=\"headerlink\" title=\"载入点聚合插件\"></a>载入点聚合插件</h4><ul>\n<li>默认样式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MarkerClusterer\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cluster=<span class=\"keyword\">new</span> AMap.MarkerClusterer(map,markers);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap801.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<ul>\n<li>自定义样式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 聚合样式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sts=[&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"http://a.amap.com/lbs/static/img/1102-1.png\"</span>,</span><br><span class=\"line\">    size:<span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">32</span>,<span class=\"number\">32</span>),</span><br><span class=\"line\">    offset:<span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">-16</span>,<span class=\"number\">-30</span>),</span><br><span class=\"line\">    imageOffset:<span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"http://a.amap.com/lbs/static/img/2.png\"</span>,</span><br><span class=\"line\">    size:<span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">32</span>,<span class=\"number\">32</span>),</span><br><span class=\"line\">    offset:<span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">-16</span>,<span class=\"number\">-30</span>)</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"http://lbs.amap.com/wp-content/uploads/2014/06/3.png\"</span>,</span><br><span class=\"line\">    size:<span class=\"keyword\">new</span> AMap.Size(<span class=\"number\">32</span>,<span class=\"number\">32</span>),</span><br><span class=\"line\">    offset:<span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">-16</span>,<span class=\"number\">-30</span>),</span><br><span class=\"line\">    textColor:<span class=\"string\">\"#f00\"</span>,</span><br><span class=\"line\">    textSize:<span class=\"number\">30</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"><span class=\"comment\">// 载入插件</span></span><br><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.MarkerClusterer\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cluster=<span class=\"keyword\">new</span> AMap.MarkerClusterer(map,markers,&#123;</span><br><span class=\"line\">        styles:sts</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap802.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"MarkerClustererOptions\"><a href=\"#MarkerClustererOptions\" class=\"headerlink\" title=\"MarkerClustererOptions\"></a>MarkerClustererOptions</h4><table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th><p>MarkerClustererOptions</p></th><th><p>类型</p></th><th><p>说明</p></th></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">gridSize</code></p></td><td><p><code class=\"inline-code\">Number</code></p></td><td><p>聚合计算时网格的像素大小，默认60</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">minClusterSize</code></p></td><td><p><code class=\"inline-code\">Number</code></p></td><td><p>聚合的最小数量。默认值为2，即小于2个点则不能成为一个聚合</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">maxZoom</code></p></td><td><p><code class=\"inline-code\">Number</code></p></td><td><p>最大的聚合级别，大于该级别就不进行相应的聚合。默认值为18，即小于18级的级别均进行聚合，18及以上级别不进行聚合</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">averageCenter</code></p></td><td><p><code class=\"inline-code\">Boolean</code></p></td><td><p>聚合点的图标位置是否是所有聚合内点的中心点。默认为否，即聚合点的图标位置位于聚合内的第一个点处</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">styles</code></p></td><td><p><code class=\"inline-code\">Array&lt;Object&gt;</code></p></td><td><p>自定义聚合后的点标记图标的样式，根据数组元素顺序设置1-10,11-100,101-1000…聚合样式</p><p>当用户设置聚合样式少于实际叠加的点数，未设置部分按照系统默认样式显示</p><p>单个图标样式包括以下几个属性：</p><p>1. {string}url：图标显示图片的url地址（必选）</p><p>2. {AMap.Size}size：图标显示图片的大小（必选）</p><p>3. {AMap.Pixel} offset：图标定位在地图上的位置相对于图标左上角的偏移值。默认为(0,0),不偏移（可选）</p><p>4. {AMap.Pixel} imageOffset：图片相对于可视区域的偏移值，此功能的作用等同CSS中的background-position属性。默认为(0,0)，不偏移（可选）</p><p>5. {String} textColor：文字的颜色，默认为”#000000”（可选）</p><p>6. {Number} textSize：文字的大小，默认为10（可选）</p></td></tr><tr><td style=\"white-space: nowrap;\"><p><code class=\"inline-code\">zoomOnClick</code></p></td><td><p><code class=\"inline-code\">Boolean</code></p></td><td><p>点击聚合点时，是否散开，默认值为：true</p></td></tr></tbody></table>\n\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n"},{"title":"浅析js中的位运算及应用","date":"2018-09-23T12:47:47.000Z","_content":"\n\n# 浅析js中的位运算及应用\n\n## Example\n\n```js\n// 关于2的倍数的乘法除法\n4>>1 // 4/Math.pow(2,1) === 2\n2<<2 // 2*Math.pow(2,2) === 8\n\n// 取整\n3.14|0 // 3\n3.14^0 // 3\n3.14&3 // 3\n~~3.14 // 3\n3.14>>0 // Math.floor(3/Math.pow(2,0)) === 3\n3.14<<0 // Math.floor(3*Math.pow(2,0)) === 3\n\n// 不借助第三个变量下交换两数\nlet a=1,\n    b=2;\na^=b;\nb^=a;\na^=b;\n// a === 2,b === 1\n```\n## Concept\n\n### 位运算符\n`|` 或 只要有一个为1，就为1   \n`&` 与  只有都是1的情况，才为1 \n`^` 异或  相同为0，不同为1  \n`~` 否  取反\n`<<` 左移 向左移动指定位数，尾部补0   \n`>>` 右移 向右移动指定位数，首部补0   \n`>>>` 带符号右移\n\n## Convert\n\nDemical\n\n规则 逢十进一  \n基数 10  \n数码 0-9  \n位权 10^n-1\n\n举例\n\n```js\n// 转10进制\n100D === 1*10^2+0*10^1+0*10^0\n```\n------\n\nBinary\n\n规则 逢二进一  \n基数 2  \n数码 0-1  \n位权 2^n-1\n\n举例\n\n```js\n// 转10进制\n100B === 1*2^2+0*2^1+0*2^0\n```\n------\n\nOctal\n\n规则 逢八进一  \n基数 8 \n数码 0-7  \n位权 8^n-1\n\n举例\n\n```js\n// 转10进制\n100O === 1*8^2+0*8^1+0*8^0\n```\n------\n\nHex\n\n规则 逢十六进一  \n基数 16  \n数码 0-9,a-f  \n位权 16^n-1\n\n举例\n\n```js\n// 转10进制\n100H === 1*16^2+0*16^1+0*16^0\n```\n------\n\nDecaimal convert to others\n\n短除法\n\n![短除法](https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D220/sign=5db6d89b81cb39dbc5c06054e01709a7/728da9773912b31b302371588618367adab4e170.jpg)\n\n```\n6D -> 110B\n9D -> 11O\n17D -> 11H\n```","source":"_posts/浅析js中的位运算及应用.md","raw":"---\ntitle: 浅析js中的位运算及应用\ndate: 2018-09-23 20:47:47\ntags:\n---\n\n\n# 浅析js中的位运算及应用\n\n## Example\n\n```js\n// 关于2的倍数的乘法除法\n4>>1 // 4/Math.pow(2,1) === 2\n2<<2 // 2*Math.pow(2,2) === 8\n\n// 取整\n3.14|0 // 3\n3.14^0 // 3\n3.14&3 // 3\n~~3.14 // 3\n3.14>>0 // Math.floor(3/Math.pow(2,0)) === 3\n3.14<<0 // Math.floor(3*Math.pow(2,0)) === 3\n\n// 不借助第三个变量下交换两数\nlet a=1,\n    b=2;\na^=b;\nb^=a;\na^=b;\n// a === 2,b === 1\n```\n## Concept\n\n### 位运算符\n`|` 或 只要有一个为1，就为1   \n`&` 与  只有都是1的情况，才为1 \n`^` 异或  相同为0，不同为1  \n`~` 否  取反\n`<<` 左移 向左移动指定位数，尾部补0   \n`>>` 右移 向右移动指定位数，首部补0   \n`>>>` 带符号右移\n\n## Convert\n\nDemical\n\n规则 逢十进一  \n基数 10  \n数码 0-9  \n位权 10^n-1\n\n举例\n\n```js\n// 转10进制\n100D === 1*10^2+0*10^1+0*10^0\n```\n------\n\nBinary\n\n规则 逢二进一  \n基数 2  \n数码 0-1  \n位权 2^n-1\n\n举例\n\n```js\n// 转10进制\n100B === 1*2^2+0*2^1+0*2^0\n```\n------\n\nOctal\n\n规则 逢八进一  \n基数 8 \n数码 0-7  \n位权 8^n-1\n\n举例\n\n```js\n// 转10进制\n100O === 1*8^2+0*8^1+0*8^0\n```\n------\n\nHex\n\n规则 逢十六进一  \n基数 16  \n数码 0-9,a-f  \n位权 16^n-1\n\n举例\n\n```js\n// 转10进制\n100H === 1*16^2+0*16^1+0*16^0\n```\n------\n\nDecaimal convert to others\n\n短除法\n\n![短除法](https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D220/sign=5db6d89b81cb39dbc5c06054e01709a7/728da9773912b31b302371588618367adab4e170.jpg)\n\n```\n6D -> 110B\n9D -> 11O\n17D -> 11H\n```","slug":"浅析js中的位运算及应用","published":1,"updated":"2019-04-25T09:01:02.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaulf001naeyyt1kicblk","content":"<h1 id=\"浅析js中的位运算及应用\"><a href=\"#浅析js中的位运算及应用\" class=\"headerlink\" title=\"浅析js中的位运算及应用\"></a>浅析js中的位运算及应用</h1><h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 关于2的倍数的乘法除法</span></span><br><span class=\"line\"><span class=\"number\">4</span>&gt;&gt;<span class=\"number\">1</span> <span class=\"comment\">// 4/Math.pow(2,1) === 2</span></span><br><span class=\"line\"><span class=\"number\">2</span>&lt;&lt;<span class=\"number\">2</span> <span class=\"comment\">// 2*Math.pow(2,2) === 8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取整</span></span><br><span class=\"line\"><span class=\"number\">3.14</span>|<span class=\"number\">0</span> <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"number\">3.14</span>^<span class=\"number\">0</span> <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"number\">3.14</span>&amp;<span class=\"number\">3</span> <span class=\"comment\">// 3</span></span><br><span class=\"line\">~~<span class=\"number\">3.14</span> <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"number\">3.14</span>&gt;&gt;<span class=\"number\">0</span> <span class=\"comment\">// Math.floor(3/Math.pow(2,0)) === 3</span></span><br><span class=\"line\"><span class=\"number\">3.14</span>&lt;&lt;<span class=\"number\">0</span> <span class=\"comment\">// Math.floor(3*Math.pow(2,0)) === 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不借助第三个变量下交换两数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"number\">1</span>,</span><br><span class=\"line\">    b=<span class=\"number\">2</span>;</span><br><span class=\"line\">a^=b;</span><br><span class=\"line\">b^=a;</span><br><span class=\"line\">a^=b;</span><br><span class=\"line\"><span class=\"comment\">// a === 2,b === 1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Concept\"><a href=\"#Concept\" class=\"headerlink\" title=\"Concept\"></a>Concept</h2><h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p><code>|</code> 或 只要有一个为1，就为1<br><code>&amp;</code> 与  只有都是1的情况，才为1<br><code>^</code> 异或  相同为0，不同为1<br><code>~</code> 否  取反<br><code>&lt;&lt;</code> 左移 向左移动指定位数，尾部补0<br><code>&gt;&gt;</code> 右移 向右移动指定位数，首部补0<br><code>&gt;&gt;&gt;</code> 带符号右移</p>\n<h2 id=\"Convert\"><a href=\"#Convert\" class=\"headerlink\" title=\"Convert\"></a>Convert</h2><p>Demical</p>\n<p>规则 逢十进一<br>基数 10<br>数码 0-9<br>位权 10^n-1</p>\n<p>举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转10进制</span></span><br><span class=\"line\"><span class=\"number\">100</span>D === <span class=\"number\">1</span>*<span class=\"number\">10</span>^<span class=\"number\">2</span>+<span class=\"number\">0</span>*<span class=\"number\">10</span>^<span class=\"number\">1</span>+<span class=\"number\">0</span>*<span class=\"number\">10</span>^<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>Binary</p>\n<p>规则 逢二进一<br>基数 2<br>数码 0-1<br>位权 2^n-1</p>\n<p>举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转10进制</span></span><br><span class=\"line\"><span class=\"number\">100</span>B === <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">2</span>+<span class=\"number\">0</span>*<span class=\"number\">2</span>^<span class=\"number\">1</span>+<span class=\"number\">0</span>*<span class=\"number\">2</span>^<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>Octal</p>\n<p>规则 逢八进一<br>基数 8<br>数码 0-7<br>位权 8^n-1</p>\n<p>举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转10进制</span></span><br><span class=\"line\"><span class=\"number\">100</span>O === <span class=\"number\">1</span>*<span class=\"number\">8</span>^<span class=\"number\">2</span>+<span class=\"number\">0</span>*<span class=\"number\">8</span>^<span class=\"number\">1</span>+<span class=\"number\">0</span>*<span class=\"number\">8</span>^<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>Hex</p>\n<p>规则 逢十六进一<br>基数 16<br>数码 0-9,a-f<br>位权 16^n-1</p>\n<p>举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转10进制</span></span><br><span class=\"line\"><span class=\"number\">100</span>H === <span class=\"number\">1</span>*<span class=\"number\">16</span>^<span class=\"number\">2</span>+<span class=\"number\">0</span>*<span class=\"number\">16</span>^<span class=\"number\">1</span>+<span class=\"number\">0</span>*<span class=\"number\">16</span>^<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>Decaimal convert to others</p>\n<p>短除法</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D220/sign=5db6d89b81cb39dbc5c06054e01709a7/728da9773912b31b302371588618367adab4e170.jpg\" alt=\"短除法\" title=\"\">\n                </div>\n                <div class=\"image-caption\">短除法</div>\n            </figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6D -&gt; 110B</span><br><span class=\"line\">9D -&gt; 11O</span><br><span class=\"line\">17D -&gt; 11H</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"浅析js中的位运算及应用\"><a href=\"#浅析js中的位运算及应用\" class=\"headerlink\" title=\"浅析js中的位运算及应用\"></a>浅析js中的位运算及应用</h1><h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 关于2的倍数的乘法除法</span></span><br><span class=\"line\"><span class=\"number\">4</span>&gt;&gt;<span class=\"number\">1</span> <span class=\"comment\">// 4/Math.pow(2,1) === 2</span></span><br><span class=\"line\"><span class=\"number\">2</span>&lt;&lt;<span class=\"number\">2</span> <span class=\"comment\">// 2*Math.pow(2,2) === 8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取整</span></span><br><span class=\"line\"><span class=\"number\">3.14</span>|<span class=\"number\">0</span> <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"number\">3.14</span>^<span class=\"number\">0</span> <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"number\">3.14</span>&amp;<span class=\"number\">3</span> <span class=\"comment\">// 3</span></span><br><span class=\"line\">~~<span class=\"number\">3.14</span> <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"number\">3.14</span>&gt;&gt;<span class=\"number\">0</span> <span class=\"comment\">// Math.floor(3/Math.pow(2,0)) === 3</span></span><br><span class=\"line\"><span class=\"number\">3.14</span>&lt;&lt;<span class=\"number\">0</span> <span class=\"comment\">// Math.floor(3*Math.pow(2,0)) === 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不借助第三个变量下交换两数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"number\">1</span>,</span><br><span class=\"line\">    b=<span class=\"number\">2</span>;</span><br><span class=\"line\">a^=b;</span><br><span class=\"line\">b^=a;</span><br><span class=\"line\">a^=b;</span><br><span class=\"line\"><span class=\"comment\">// a === 2,b === 1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Concept\"><a href=\"#Concept\" class=\"headerlink\" title=\"Concept\"></a>Concept</h2><h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p><code>|</code> 或 只要有一个为1，就为1<br><code>&amp;</code> 与  只有都是1的情况，才为1<br><code>^</code> 异或  相同为0，不同为1<br><code>~</code> 否  取反<br><code>&lt;&lt;</code> 左移 向左移动指定位数，尾部补0<br><code>&gt;&gt;</code> 右移 向右移动指定位数，首部补0<br><code>&gt;&gt;&gt;</code> 带符号右移</p>\n<h2 id=\"Convert\"><a href=\"#Convert\" class=\"headerlink\" title=\"Convert\"></a>Convert</h2><p>Demical</p>\n<p>规则 逢十进一<br>基数 10<br>数码 0-9<br>位权 10^n-1</p>\n<p>举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转10进制</span></span><br><span class=\"line\"><span class=\"number\">100</span>D === <span class=\"number\">1</span>*<span class=\"number\">10</span>^<span class=\"number\">2</span>+<span class=\"number\">0</span>*<span class=\"number\">10</span>^<span class=\"number\">1</span>+<span class=\"number\">0</span>*<span class=\"number\">10</span>^<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>Binary</p>\n<p>规则 逢二进一<br>基数 2<br>数码 0-1<br>位权 2^n-1</p>\n<p>举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转10进制</span></span><br><span class=\"line\"><span class=\"number\">100</span>B === <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">2</span>+<span class=\"number\">0</span>*<span class=\"number\">2</span>^<span class=\"number\">1</span>+<span class=\"number\">0</span>*<span class=\"number\">2</span>^<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>Octal</p>\n<p>规则 逢八进一<br>基数 8<br>数码 0-7<br>位权 8^n-1</p>\n<p>举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转10进制</span></span><br><span class=\"line\"><span class=\"number\">100</span>O === <span class=\"number\">1</span>*<span class=\"number\">8</span>^<span class=\"number\">2</span>+<span class=\"number\">0</span>*<span class=\"number\">8</span>^<span class=\"number\">1</span>+<span class=\"number\">0</span>*<span class=\"number\">8</span>^<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>Hex</p>\n<p>规则 逢十六进一<br>基数 16<br>数码 0-9,a-f<br>位权 16^n-1</p>\n<p>举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转10进制</span></span><br><span class=\"line\"><span class=\"number\">100</span>H === <span class=\"number\">1</span>*<span class=\"number\">16</span>^<span class=\"number\">2</span>+<span class=\"number\">0</span>*<span class=\"number\">16</span>^<span class=\"number\">1</span>+<span class=\"number\">0</span>*<span class=\"number\">16</span>^<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>Decaimal convert to others</p>\n<p>短除法</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D220/sign=5db6d89b81cb39dbc5c06054e01709a7/728da9773912b31b302371588618367adab4e170.jpg\" alt=\"短除法\" title=\"\">\n                </div>\n                <div class=\"image-caption\">短除法</div>\n            </figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6D -&gt; 110B</span><br><span class=\"line\">9D -&gt; 11O</span><br><span class=\"line\">17D -&gt; 11H</span><br></pre></td></tr></table></figure>"},{"title":"axios 入门","date":"2017-10-12T01:00:50.000Z","_content":"\n# axios 入门\n\n#### 请忽略大图，不只是Vue，其他js均可用\n\n![001](https://devdojo.com/media/images/June2017/vue-js-and-ajax-requests.jpg?fm=jpg&q=70&s=587cf6e4e2ed983ae163ebc0ebef71a8)\n\n\n\n#### Editor: Yangfan 2017-08-17\n\n#### Intro: 本文档参考axios的官方文档和网上的axios使用教程所写，后续还会不断完善，鄙人水平有限，还望批评指正\n\n\n---\n\n**强烈建议查看完整文档，链接如下**\n\n英文原文档： [https://github.com/mzabriskie/axios](https://github.com/mzabriskie/axios)   \n\n中文文档：     \n[https://www.awesomes.cn/repo/mzabriskie/axios](https://www.awesomes.cn/repo/mzabriskie/axios)   \n[https://segmentfault.com/a/1190000008470355](https://segmentfault.com/a/1190000008470355)    \n\n\n---\n\n\n\n## 什么是axios\n\n引用axios的介绍：\n\n> Promise based HTTP client for the browser and node.js\n\n\n\n\naxios是一个基于ES6的Promise的网络请求库，是一个ajax库。\n\n\n可以实现：\n\n- 在浏览器里建立XHR\n\n- 通过nodejs进行http请求\n\n甚至可以实现：\n\n- 转换或者拦截请求数据或响应数据\n\n- 支持Promise的API\n\n- 可以取消请求\n\n- 自动转换JSON\n\n- 可以防御XSRF攻击！\n\n浏览器支持也没什么问题，IE这种本时代异端都能支持到8+，这问题是不大了。（VUE支持到9+！）\n\n![Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) |\n--- | --- | --- | --- | --- | --- |\nLatest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | 8+ ✔ |\n\n[![Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/axios.svg)](https://saucelabs.com/u/axios)\n\n\n## 怎么用\n\n### 方法一  npm安装\n\n1. npm下载\n\n```\nnpm install axios\n\n```\n2. webpack之类的打包工具导入\n\n```js\n\nimport axios from 'axios'\n\n// or\n\nvar axios=require('axios');\n\n\n\n//===============Vue===================\n// Vue全局引用及使用\n\nimport axios from 'axios'\nVue.prototype.$http = axios\n\nthis.$http.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n```\n\n\n### 方法二  script标签引入\n\n```html\n\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n\n```\n\n## 用法及DEMO\n\n### 简单的demo\n\n**一个简单的HTTP GET请求**\n\n```js\n\n// 法一 请求参数写到url中\n\naxios.get('http://getRes.php?id=123456&name=Yangfan').then(function (response) {\n  // TODO\n  // 返回HTTP请求成功的数据\n}).catch(function (error) {\n  // TODO\n  // 返回HTTP请求失败的失败信息\n});\n\n// 法二 请求参数写到axios配置参数中\n\naxios.get('http://getRes.php'，{\n  params:{\n    id:123456,\n    name:\"Yangfan\"\n  }\n}).then(function (response) {\n  // TODO\n  // 返回HTTP请求成功的数据\n}).catch(function (error) {\n  // TODO\n  // 返回HTTP请求失败的失败信息\n});\n\n\n```\n\n**一个简单的HTTP POST 请求**\n\n```js\n\naxios.post('http://getRes.php',{\n  id:123456,\n  name:\"Yangfan\"\n}).then(function (response) {\n  // TODO\n  // 返回HTTP请求成功的数据\n}).catch(function (error) {\n  // TODO\n  // 返回HTTP请求失败的失败信息\n});\n\n```\n\n**自定义请求配置**\n\n```js\n\n// 配置\nvar config={\n  method: 'GET',  // 请求方法                                           \n  url: 'http://getRes.php',  // 请求url                          \n  headers: { \n    token: 'ftv1443qby6bdfa41t90sfvq89hg3h54u989m9imog79g4'   // 请求头                                              \n  },\n  data: {         // 需要传递的数据                                 \n    id: 123456,\n    name: 'Yangfan'\n  }\n};\n\naxios(config).then(function (response) {\n  // TODO\n  // 返回HTTP请求成功的数据\n}).catch(function (error) {\n  // TODO\n  // 返回HTTP请求失败的失败信息\n});\n\n```\n\n\n## 完整配置\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>参数</th>\n\t\t\t<th>类型</th>\n\t\t\t<th>注解</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>url</td>\n\t\t\t<td>String</td>\n\t\t\t<td>`url`是服务器链接，用来请求</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>method</td>\n\t\t\t<td>String</td>\n\t\t\t<td>`method`是发起请求时的请求方法</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>baseURL</td>\n\t\t\t<td>String</td>\n\t\t\t<td>`baseURL`如果`url`不是绝对地址，那么将会加在其前面。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>transformRequest</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`transformRequest`允许请求的数据在传到服务器之前进行转化。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>transformResponse</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`transformResponse`允许返回的数据传入then/catch之前进行处理</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>headers</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`headers`是自定义的要被发送的头信息</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>params</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`params`是请求连接中的请求参数，必须是一个纯对象，或者URLSearchParams对象</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>paramsSerializer</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`paramsSerializer`是一个可选的函数，是用来序列化参数</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>data</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`data`是请求提需要设置的数据\n    <br />只适用于应用的'PUT','POST','PATCH'，请求方法\n    <br />当没有设置`transformRequest`时，必须是以下其中之一的类型（不可重复？）：\n    <br />-string,plain object,ArrayBuffer,ArrayBufferView,URLSearchParams\n    <br />-仅浏览器：FormData,File,Blob\n    <br />-仅Node：Stream</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>timeout</td>\n\t\t\t<td>Number</td>\n\t\t\t<td>`timeout`定义请求的时间，单位是毫秒。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>withCredentials</td>\n\t\t\t<td>Boolean</td>\n\t\t\t<td>`withCredentials`表明是否跨网站访问协议，</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>adapter</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`adapter`适配器，允许自定义处理请求，这会使测试更简单。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>auth</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`auth`表明HTTP基础的认证应该被使用，并且提供证书。\n    <br />这个会设置一个`authorization` 头（header），并且覆盖你在header设置的Authorization头信息。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>responseType</td>\n\t\t\t<td>String</td>\n\t\t\t<td>`responsetype`表明服务器返回的数据类型，这些类型的设置应该是\n    <br />'arraybuffer','blob','document','json','text',stream'</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>xsrfCookieName</td>\n\t\t\t<td>String</td>\n\t\t\t<td>`xsrfCookieName`是cookie名，用作xsrf token值</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>xsrfHeaderName</td>\n\t\t\t<td>String</td>\n\t\t\t<td>`xsrfHeaderName` 是http头（header）的名字，并且该头携带xsrf的值</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>onUploadProgress</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`onUploadProgress`允许处理上传过程的事件</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>onDownloadProgress</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`onDownloadProgress`允许处理下载过程的事件</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>maxContentLength</td>\n\t\t\t<td>Number</td>\n\t\t\t<td>`maxContentLength` 定义http返回内容的最大容量</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>validateStatus</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`validateStatus` 定义promise的resolve和reject。\n    <br />http返回状态码，如果`validateStatus`返回true（或者设置成null/undefined），promise将会接受；其他的promise将会拒绝。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>maxRedirects</td>\n\t\t\t<td>Number</td>\n\t\t\t<td>`maxRedirects`定义了node.js中要重定向的最大数量。\n  <br />如果设置为0，则不会重定向。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>httpAgent</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`httpAgent` 和 `httpsAgent`当产生一个http或者https请求时分别定义一个自定义的代理，在nodejs中。\n    <br />这个允许设置一些选选个，像是`keepAlive`--这个在默认中是没有开启的。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>httpsAgent</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`httpAgent` 和 `httpsAgent`当产生一个http或者https请求时分别定义一个自定义的代理，在nodejs中。\n    <br />这个允许设置一些选选个，像是`keepAlive`--这个在默认中是没有开启的。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>proxy</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`proxy`定义服务器的主机名字和端口号。\n    <br />`auth`表明HTTP基本认证应该跟`proxy`相连接，并且提供证书。\n    <br />这个将设置一个'Proxy-Authorization'头(header)，覆盖原先自定义的。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>cancelToken</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`cancelTaken` 定义一个取消，能够用来取消请求</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n\n## 返回结果\n\n```js\n\n{\n  // 服务器返回的数据                                        \n  data: {},\n\n  // 服务器返回的状态码                              \n  status: 200,\n\n  // 服务器返回的状态信息                                                                     \n  statusText: 'OK',\n\n  // 服务器返回的响应头信息                      \n  headers: {},\n\n  // `config`是提供给`axios`的请求的配置\n  config: {}\n}\n\n```\n","source":"_posts/axios-入门.md","raw":"---\ntitle: axios 入门\ndate: 2017-10-12 9:00:50\ntags:\n---\n\n# axios 入门\n\n#### 请忽略大图，不只是Vue，其他js均可用\n\n![001](https://devdojo.com/media/images/June2017/vue-js-and-ajax-requests.jpg?fm=jpg&q=70&s=587cf6e4e2ed983ae163ebc0ebef71a8)\n\n\n\n#### Editor: Yangfan 2017-08-17\n\n#### Intro: 本文档参考axios的官方文档和网上的axios使用教程所写，后续还会不断完善，鄙人水平有限，还望批评指正\n\n\n---\n\n**强烈建议查看完整文档，链接如下**\n\n英文原文档： [https://github.com/mzabriskie/axios](https://github.com/mzabriskie/axios)   \n\n中文文档：     \n[https://www.awesomes.cn/repo/mzabriskie/axios](https://www.awesomes.cn/repo/mzabriskie/axios)   \n[https://segmentfault.com/a/1190000008470355](https://segmentfault.com/a/1190000008470355)    \n\n\n---\n\n\n\n## 什么是axios\n\n引用axios的介绍：\n\n> Promise based HTTP client for the browser and node.js\n\n\n\n\naxios是一个基于ES6的Promise的网络请求库，是一个ajax库。\n\n\n可以实现：\n\n- 在浏览器里建立XHR\n\n- 通过nodejs进行http请求\n\n甚至可以实现：\n\n- 转换或者拦截请求数据或响应数据\n\n- 支持Promise的API\n\n- 可以取消请求\n\n- 自动转换JSON\n\n- 可以防御XSRF攻击！\n\n浏览器支持也没什么问题，IE这种本时代异端都能支持到8+，这问题是不大了。（VUE支持到9+！）\n\n![Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) |\n--- | --- | --- | --- | --- | --- |\nLatest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | 8+ ✔ |\n\n[![Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/axios.svg)](https://saucelabs.com/u/axios)\n\n\n## 怎么用\n\n### 方法一  npm安装\n\n1. npm下载\n\n```\nnpm install axios\n\n```\n2. webpack之类的打包工具导入\n\n```js\n\nimport axios from 'axios'\n\n// or\n\nvar axios=require('axios');\n\n\n\n//===============Vue===================\n// Vue全局引用及使用\n\nimport axios from 'axios'\nVue.prototype.$http = axios\n\nthis.$http.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n```\n\n\n### 方法二  script标签引入\n\n```html\n\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n\n```\n\n## 用法及DEMO\n\n### 简单的demo\n\n**一个简单的HTTP GET请求**\n\n```js\n\n// 法一 请求参数写到url中\n\naxios.get('http://getRes.php?id=123456&name=Yangfan').then(function (response) {\n  // TODO\n  // 返回HTTP请求成功的数据\n}).catch(function (error) {\n  // TODO\n  // 返回HTTP请求失败的失败信息\n});\n\n// 法二 请求参数写到axios配置参数中\n\naxios.get('http://getRes.php'，{\n  params:{\n    id:123456,\n    name:\"Yangfan\"\n  }\n}).then(function (response) {\n  // TODO\n  // 返回HTTP请求成功的数据\n}).catch(function (error) {\n  // TODO\n  // 返回HTTP请求失败的失败信息\n});\n\n\n```\n\n**一个简单的HTTP POST 请求**\n\n```js\n\naxios.post('http://getRes.php',{\n  id:123456,\n  name:\"Yangfan\"\n}).then(function (response) {\n  // TODO\n  // 返回HTTP请求成功的数据\n}).catch(function (error) {\n  // TODO\n  // 返回HTTP请求失败的失败信息\n});\n\n```\n\n**自定义请求配置**\n\n```js\n\n// 配置\nvar config={\n  method: 'GET',  // 请求方法                                           \n  url: 'http://getRes.php',  // 请求url                          \n  headers: { \n    token: 'ftv1443qby6bdfa41t90sfvq89hg3h54u989m9imog79g4'   // 请求头                                              \n  },\n  data: {         // 需要传递的数据                                 \n    id: 123456,\n    name: 'Yangfan'\n  }\n};\n\naxios(config).then(function (response) {\n  // TODO\n  // 返回HTTP请求成功的数据\n}).catch(function (error) {\n  // TODO\n  // 返回HTTP请求失败的失败信息\n});\n\n```\n\n\n## 完整配置\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>参数</th>\n\t\t\t<th>类型</th>\n\t\t\t<th>注解</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>url</td>\n\t\t\t<td>String</td>\n\t\t\t<td>`url`是服务器链接，用来请求</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>method</td>\n\t\t\t<td>String</td>\n\t\t\t<td>`method`是发起请求时的请求方法</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>baseURL</td>\n\t\t\t<td>String</td>\n\t\t\t<td>`baseURL`如果`url`不是绝对地址，那么将会加在其前面。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>transformRequest</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`transformRequest`允许请求的数据在传到服务器之前进行转化。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>transformResponse</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`transformResponse`允许返回的数据传入then/catch之前进行处理</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>headers</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`headers`是自定义的要被发送的头信息</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>params</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`params`是请求连接中的请求参数，必须是一个纯对象，或者URLSearchParams对象</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>paramsSerializer</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`paramsSerializer`是一个可选的函数，是用来序列化参数</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>data</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`data`是请求提需要设置的数据\n    <br />只适用于应用的'PUT','POST','PATCH'，请求方法\n    <br />当没有设置`transformRequest`时，必须是以下其中之一的类型（不可重复？）：\n    <br />-string,plain object,ArrayBuffer,ArrayBufferView,URLSearchParams\n    <br />-仅浏览器：FormData,File,Blob\n    <br />-仅Node：Stream</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>timeout</td>\n\t\t\t<td>Number</td>\n\t\t\t<td>`timeout`定义请求的时间，单位是毫秒。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>withCredentials</td>\n\t\t\t<td>Boolean</td>\n\t\t\t<td>`withCredentials`表明是否跨网站访问协议，</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>adapter</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`adapter`适配器，允许自定义处理请求，这会使测试更简单。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>auth</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`auth`表明HTTP基础的认证应该被使用，并且提供证书。\n    <br />这个会设置一个`authorization` 头（header），并且覆盖你在header设置的Authorization头信息。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>responseType</td>\n\t\t\t<td>String</td>\n\t\t\t<td>`responsetype`表明服务器返回的数据类型，这些类型的设置应该是\n    <br />'arraybuffer','blob','document','json','text',stream'</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>xsrfCookieName</td>\n\t\t\t<td>String</td>\n\t\t\t<td>`xsrfCookieName`是cookie名，用作xsrf token值</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>xsrfHeaderName</td>\n\t\t\t<td>String</td>\n\t\t\t<td>`xsrfHeaderName` 是http头（header）的名字，并且该头携带xsrf的值</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>onUploadProgress</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`onUploadProgress`允许处理上传过程的事件</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>onDownloadProgress</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`onDownloadProgress`允许处理下载过程的事件</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>maxContentLength</td>\n\t\t\t<td>Number</td>\n\t\t\t<td>`maxContentLength` 定义http返回内容的最大容量</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>validateStatus</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`validateStatus` 定义promise的resolve和reject。\n    <br />http返回状态码，如果`validateStatus`返回true（或者设置成null/undefined），promise将会接受；其他的promise将会拒绝。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>maxRedirects</td>\n\t\t\t<td>Number</td>\n\t\t\t<td>`maxRedirects`定义了node.js中要重定向的最大数量。\n  <br />如果设置为0，则不会重定向。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>httpAgent</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`httpAgent` 和 `httpsAgent`当产生一个http或者https请求时分别定义一个自定义的代理，在nodejs中。\n    <br />这个允许设置一些选选个，像是`keepAlive`--这个在默认中是没有开启的。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>httpsAgent</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`httpAgent` 和 `httpsAgent`当产生一个http或者https请求时分别定义一个自定义的代理，在nodejs中。\n    <br />这个允许设置一些选选个，像是`keepAlive`--这个在默认中是没有开启的。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>proxy</td>\n\t\t\t<td>Object</td>\n\t\t\t<td>`proxy`定义服务器的主机名字和端口号。\n    <br />`auth`表明HTTP基本认证应该跟`proxy`相连接，并且提供证书。\n    <br />这个将设置一个'Proxy-Authorization'头(header)，覆盖原先自定义的。</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>cancelToken</td>\n\t\t\t<td>Function</td>\n\t\t\t<td>`cancelTaken` 定义一个取消，能够用来取消请求</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n\n## 返回结果\n\n```js\n\n{\n  // 服务器返回的数据                                        \n  data: {},\n\n  // 服务器返回的状态码                              \n  status: 200,\n\n  // 服务器返回的状态信息                                                                     \n  statusText: 'OK',\n\n  // 服务器返回的响应头信息                      \n  headers: {},\n\n  // `config`是提供给`axios`的请求的配置\n  config: {}\n}\n\n```\n","slug":"axios-入门","published":1,"updated":"2019-04-25T08:59:38.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaulh001paeyyf2rr54m1","content":"<h1 id=\"axios-入门\"><a href=\"#axios-入门\" class=\"headerlink\" title=\"axios 入门\"></a>axios 入门</h1><h4 id=\"请忽略大图，不只是Vue，其他js均可用\"><a href=\"#请忽略大图，不只是Vue，其他js均可用\" class=\"headerlink\" title=\"请忽略大图，不只是Vue，其他js均可用\"></a>请忽略大图，不只是Vue，其他js均可用</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://devdojo.com/media/images/June2017/vue-js-and-ajax-requests.jpg?fm=jpg&q=70&s=587cf6e4e2ed983ae163ebc0ebef71a8\" alt=\"001\" title=\"\">\n                </div>\n                <div class=\"image-caption\">001</div>\n            </figure>\n<h4 id=\"Editor-Yangfan-2017-08-17\"><a href=\"#Editor-Yangfan-2017-08-17\" class=\"headerlink\" title=\"Editor: Yangfan 2017-08-17\"></a>Editor: Yangfan 2017-08-17</h4><h4 id=\"Intro-本文档参考axios的官方文档和网上的axios使用教程所写，后续还会不断完善，鄙人水平有限，还望批评指正\"><a href=\"#Intro-本文档参考axios的官方文档和网上的axios使用教程所写，后续还会不断完善，鄙人水平有限，还望批评指正\" class=\"headerlink\" title=\"Intro: 本文档参考axios的官方文档和网上的axios使用教程所写，后续还会不断完善，鄙人水平有限，还望批评指正\"></a>Intro: 本文档参考axios的官方文档和网上的axios使用教程所写，后续还会不断完善，鄙人水平有限，还望批评指正</h4><hr>\n<p><strong>强烈建议查看完整文档，链接如下</strong></p>\n<p>英文原文档： <a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"noopener\">https://github.com/mzabriskie/axios</a>   </p>\n<p>中文文档：<br><a href=\"https://www.awesomes.cn/repo/mzabriskie/axios\" target=\"_blank\" rel=\"noopener\">https://www.awesomes.cn/repo/mzabriskie/axios</a><br><a href=\"https://segmentfault.com/a/1190000008470355\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000008470355</a>    </p>\n<hr>\n<h2 id=\"什么是axios\"><a href=\"#什么是axios\" class=\"headerlink\" title=\"什么是axios\"></a>什么是axios</h2><p>引用axios的介绍：</p>\n<blockquote>\n<p>Promise based HTTP client for the browser and node.js</p>\n</blockquote>\n<p>axios是一个基于ES6的Promise的网络请求库，是一个ajax库。</p>\n<p>可以实现：</p>\n<ul>\n<li><p>在浏览器里建立XHR</p>\n</li>\n<li><p>通过nodejs进行http请求</p>\n</li>\n</ul>\n<p>甚至可以实现：</p>\n<ul>\n<li><p>转换或者拦截请求数据或响应数据</p>\n</li>\n<li><p>支持Promise的API</p>\n</li>\n<li><p>可以取消请求</p>\n</li>\n<li><p>自动转换JSON</p>\n</li>\n<li><p>可以防御XSRF攻击！</p>\n</li>\n</ul>\n<p>浏览器支持也没什么问题，IE这种本时代异端都能支持到8+，这问题是不大了。（VUE支持到9+！）</p>\n<table>\n<thead>\n<tr>\n<th><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png\" alt=\"Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE</div>\n            </figure></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Latest ✔</td>\n<td>Latest ✔</td>\n<td>Latest ✔</td>\n<td>Latest ✔</td>\n<td>Latest ✔</td>\n<td>8+ ✔</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://saucelabs.com/u/axios\" alt=\"Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/axios.svg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/axios.svg)</div>\n            </figure></p>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><h3 id=\"方法一-npm安装\"><a href=\"#方法一-npm安装\" class=\"headerlink\" title=\"方法一  npm安装\"></a>方法一  npm安装</h3><ol>\n<li>npm下载</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install axios</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>webpack之类的打包工具导入</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> axios=<span class=\"built_in\">require</span>(<span class=\"string\">'axios'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//===============Vue===================</span></span><br><span class=\"line\"><span class=\"comment\">// Vue全局引用及使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\">Vue.prototype.$http = axios</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$http.get(<span class=\"string\">'/user?ID=12345'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二-script标签引入\"><a href=\"#方法二-script标签引入\" class=\"headerlink\" title=\"方法二  script标签引入\"></a>方法二  script标签引入</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/axios/dist/axios.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"用法及DEMO\"><a href=\"#用法及DEMO\" class=\"headerlink\" title=\"用法及DEMO\"></a>用法及DEMO</h2><h3 id=\"简单的demo\"><a href=\"#简单的demo\" class=\"headerlink\" title=\"简单的demo\"></a>简单的demo</h3><p><strong>一个简单的HTTP GET请求</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 法一 请求参数写到url中</span></span><br><span class=\"line\"></span><br><span class=\"line\">axios.get(<span class=\"string\">'http://getRes.php?id=123456&amp;name=Yangfan'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求成功的数据</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求失败的失败信息</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 法二 请求参数写到axios配置参数中</span></span><br><span class=\"line\"></span><br><span class=\"line\">axios.get(<span class=\"string\">'http://getRes.php'</span>，&#123;</span><br><span class=\"line\">  params:&#123;</span><br><span class=\"line\">    id:<span class=\"number\">123456</span>,</span><br><span class=\"line\">    name:<span class=\"string\">\"Yangfan\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求成功的数据</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求失败的失败信息</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>一个简单的HTTP POST 请求</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">axios.post(<span class=\"string\">'http://getRes.php'</span>,&#123;</span><br><span class=\"line\">  id:<span class=\"number\">123456</span>,</span><br><span class=\"line\">  name:<span class=\"string\">\"Yangfan\"</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求成功的数据</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求失败的失败信息</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>自定义请求配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> config=&#123;</span><br><span class=\"line\">  method: <span class=\"string\">'GET'</span>,  <span class=\"comment\">// 请求方法                                           </span></span><br><span class=\"line\">  url: <span class=\"string\">'http://getRes.php'</span>,  <span class=\"comment\">// 请求url                          </span></span><br><span class=\"line\">  headers: &#123; </span><br><span class=\"line\">    token: <span class=\"string\">'ftv1443qby6bdfa41t90sfvq89hg3h54u989m9imog79g4'</span>   <span class=\"comment\">// 请求头                                              </span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data: &#123;         <span class=\"comment\">// 需要传递的数据                                 </span></span><br><span class=\"line\">    id: <span class=\"number\">123456</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'Yangfan'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">axios(config).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求成功的数据</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求失败的失败信息</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整配置\"><a href=\"#完整配置\" class=\"headerlink\" title=\"完整配置\"></a>完整配置</h2><table><br>    <thead><br>        <tr><br>            <th>参数</th><br>            <th>类型</th><br>            <th>注解</th><br>        </tr><br>    </thead><br>    <tbody><br>        <tr><br>            <td>url</td><br>            <td>String</td><br>            <td><code>url</code>是服务器链接，用来请求</td><br>        </tr><br>        <tr><br>            <td>method</td><br>            <td>String</td><br>            <td><code>method</code>是发起请求时的请求方法</td><br>        </tr><br>        <tr><br>            <td>baseURL</td><br>            <td>String</td><br>            <td><code>baseURL</code>如果<code>url</code>不是绝对地址，那么将会加在其前面。</td><br>        </tr><br>        <tr><br>            <td>transformRequest</td><br>            <td>Function</td><br>            <td><code>transformRequest</code>允许请求的数据在传到服务器之前进行转化。</td><br>        </tr><br>        <tr><br>            <td>transformResponse</td><br>            <td>Function</td><br>            <td><code>transformResponse</code>允许返回的数据传入then/catch之前进行处理</td><br>        </tr><br>        <tr><br>            <td>headers</td><br>            <td>Object</td><br>            <td><code>headers</code>是自定义的要被发送的头信息</td><br>        </tr><br>        <tr><br>            <td>params</td><br>            <td>Object</td><br>            <td><code>params</code>是请求连接中的请求参数，必须是一个纯对象，或者URLSearchParams对象</td><br>        </tr><br>        <tr><br>            <td>paramsSerializer</td><br>            <td>Function</td><br>            <td><code>paramsSerializer</code>是一个可选的函数，是用来序列化参数</td><br>        </tr><br>        <tr><br>            <td>data</td><br>            <td>Object</td><br>            <td><code>data</code>是请求提需要设置的数据<br>    <br>只适用于应用的’PUT’,’POST’,’PATCH’，请求方法<br>    <br>当没有设置<code>transformRequest</code>时，必须是以下其中之一的类型（不可重复？）：<br>    <br>-string,plain object,ArrayBuffer,ArrayBufferView,URLSearchParams<br>    <br>-仅浏览器：FormData,File,Blob<br>    <br>-仅Node：Stream</td><br>        </tr><br>        <tr><br>            <td>timeout</td><br>            <td>Number</td><br>            <td><code>timeout</code>定义请求的时间，单位是毫秒。</td><br>        </tr><br>        <tr><br>            <td>withCredentials</td><br>            <td>Boolean</td><br>            <td><code>withCredentials</code>表明是否跨网站访问协议，</td><br>        </tr><br>        <tr><br>            <td>adapter</td><br>            <td>Function</td><br>            <td><code>adapter</code>适配器，允许自定义处理请求，这会使测试更简单。</td><br>        </tr><br>        <tr><br>            <td>auth</td><br>            <td>Object</td><br>            <td><code>auth</code>表明HTTP基础的认证应该被使用，并且提供证书。<br>    <br>这个会设置一个<code>authorization</code> 头（header），并且覆盖你在header设置的Authorization头信息。</td><br>        </tr><br>        <tr><br>            <td>responseType</td><br>            <td>String</td><br>            <td><code>responsetype</code>表明服务器返回的数据类型，这些类型的设置应该是<br>    <br>‘arraybuffer’,’blob’,’document’,’json’,’text’,stream’</td><br>        </tr><br>        <tr><br>            <td>xsrfCookieName</td><br>            <td>String</td><br>            <td><code>xsrfCookieName</code>是cookie名，用作xsrf token值</td><br>        </tr><br>        <tr><br>            <td>xsrfHeaderName</td><br>            <td>String</td><br>            <td><code>xsrfHeaderName</code> 是http头（header）的名字，并且该头携带xsrf的值</td><br>        </tr><br>        <tr><br>            <td>onUploadProgress</td><br>            <td>Function</td><br>            <td><code>onUploadProgress</code>允许处理上传过程的事件</td><br>        </tr><br>        <tr><br>            <td>onDownloadProgress</td><br>            <td>Function</td><br>            <td><code>onDownloadProgress</code>允许处理下载过程的事件</td><br>        </tr><br>        <tr><br>            <td>maxContentLength</td><br>            <td>Number</td><br>            <td><code>maxContentLength</code> 定义http返回内容的最大容量</td><br>        </tr><br>        <tr><br>            <td>validateStatus</td><br>            <td>Function</td><br>            <td><code>validateStatus</code> 定义promise的resolve和reject。<br>    <br>http返回状态码，如果<code>validateStatus</code>返回true（或者设置成null/undefined），promise将会接受；其他的promise将会拒绝。</td><br>        </tr><br>        <tr><br>            <td>maxRedirects</td><br>            <td>Number</td><br>            <td><code>maxRedirects</code>定义了node.js中要重定向的最大数量。<br>  <br>如果设置为0，则不会重定向。</td><br>        </tr><br>        <tr><br>            <td>httpAgent</td><br>            <td>Object</td><br>            <td><code>httpAgent</code> 和 <code>httpsAgent</code>当产生一个http或者https请求时分别定义一个自定义的代理，在nodejs中。<br>    <br>这个允许设置一些选选个，像是<code>keepAlive</code>–这个在默认中是没有开启的。</td><br>        </tr><br>        <tr><br>            <td>httpsAgent</td><br>            <td>Object</td><br>            <td><code>httpAgent</code> 和 <code>httpsAgent</code>当产生一个http或者https请求时分别定义一个自定义的代理，在nodejs中。<br>    <br>这个允许设置一些选选个，像是<code>keepAlive</code>–这个在默认中是没有开启的。</td><br>        </tr><br>        <tr><br>            <td>proxy</td><br>            <td>Object</td><br>            <td><code>proxy</code>定义服务器的主机名字和端口号。<br>    <br><code>auth</code>表明HTTP基本认证应该跟<code>proxy</code>相连接，并且提供证书。<br>    <br>这个将设置一个’Proxy-Authorization’头(header)，覆盖原先自定义的。</td><br>        </tr><br>        <tr><br>            <td>cancelToken</td><br>            <td>Function</td><br>            <td><code>cancelTaken</code> 定义一个取消，能够用来取消请求</td><br>        </tr><br>    </tbody><br></table>\n\n\n<h2 id=\"返回结果\"><a href=\"#返回结果\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 服务器返回的数据                                        </span></span><br><span class=\"line\">  data: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 服务器返回的状态码                              </span></span><br><span class=\"line\">  status: <span class=\"number\">200</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 服务器返回的状态信息                                                                     </span></span><br><span class=\"line\">  statusText: <span class=\"string\">'OK'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 服务器返回的响应头信息                      </span></span><br><span class=\"line\">  headers: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `config`是提供给`axios`的请求的配置</span></span><br><span class=\"line\">  config: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"axios-入门\"><a href=\"#axios-入门\" class=\"headerlink\" title=\"axios 入门\"></a>axios 入门</h1><h4 id=\"请忽略大图，不只是Vue，其他js均可用\"><a href=\"#请忽略大图，不只是Vue，其他js均可用\" class=\"headerlink\" title=\"请忽略大图，不只是Vue，其他js均可用\"></a>请忽略大图，不只是Vue，其他js均可用</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://devdojo.com/media/images/June2017/vue-js-and-ajax-requests.jpg?fm=jpg&q=70&s=587cf6e4e2ed983ae163ebc0ebef71a8\" alt=\"001\" title=\"\">\n                </div>\n                <div class=\"image-caption\">001</div>\n            </figure>\n<h4 id=\"Editor-Yangfan-2017-08-17\"><a href=\"#Editor-Yangfan-2017-08-17\" class=\"headerlink\" title=\"Editor: Yangfan 2017-08-17\"></a>Editor: Yangfan 2017-08-17</h4><h4 id=\"Intro-本文档参考axios的官方文档和网上的axios使用教程所写，后续还会不断完善，鄙人水平有限，还望批评指正\"><a href=\"#Intro-本文档参考axios的官方文档和网上的axios使用教程所写，后续还会不断完善，鄙人水平有限，还望批评指正\" class=\"headerlink\" title=\"Intro: 本文档参考axios的官方文档和网上的axios使用教程所写，后续还会不断完善，鄙人水平有限，还望批评指正\"></a>Intro: 本文档参考axios的官方文档和网上的axios使用教程所写，后续还会不断完善，鄙人水平有限，还望批评指正</h4><hr>\n<p><strong>强烈建议查看完整文档，链接如下</strong></p>\n<p>英文原文档： <a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"noopener\">https://github.com/mzabriskie/axios</a>   </p>\n<p>中文文档：<br><a href=\"https://www.awesomes.cn/repo/mzabriskie/axios\" target=\"_blank\" rel=\"noopener\">https://www.awesomes.cn/repo/mzabriskie/axios</a><br><a href=\"https://segmentfault.com/a/1190000008470355\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000008470355</a>    </p>\n<hr>\n<h2 id=\"什么是axios\"><a href=\"#什么是axios\" class=\"headerlink\" title=\"什么是axios\"></a>什么是axios</h2><p>引用axios的介绍：</p>\n<blockquote>\n<p>Promise based HTTP client for the browser and node.js</p>\n</blockquote>\n<p>axios是一个基于ES6的Promise的网络请求库，是一个ajax库。</p>\n<p>可以实现：</p>\n<ul>\n<li><p>在浏览器里建立XHR</p>\n</li>\n<li><p>通过nodejs进行http请求</p>\n</li>\n</ul>\n<p>甚至可以实现：</p>\n<ul>\n<li><p>转换或者拦截请求数据或响应数据</p>\n</li>\n<li><p>支持Promise的API</p>\n</li>\n<li><p>可以取消请求</p>\n</li>\n<li><p>自动转换JSON</p>\n</li>\n<li><p>可以防御XSRF攻击！</p>\n</li>\n</ul>\n<p>浏览器支持也没什么问题，IE这种本时代异端都能支持到8+，这问题是不大了。（VUE支持到9+！）</p>\n<table>\n<thead>\n<tr>\n<th><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png\" alt=\"Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE</div>\n            </figure></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Latest ✔</td>\n<td>Latest ✔</td>\n<td>Latest ✔</td>\n<td>Latest ✔</td>\n<td>Latest ✔</td>\n<td>8+ ✔</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://saucelabs.com/u/axios\" alt=\"Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/axios.svg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/axios.svg)</div>\n            </figure></p>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><h3 id=\"方法一-npm安装\"><a href=\"#方法一-npm安装\" class=\"headerlink\" title=\"方法一  npm安装\"></a>方法一  npm安装</h3><ol>\n<li>npm下载</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install axios</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>webpack之类的打包工具导入</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> axios=<span class=\"built_in\">require</span>(<span class=\"string\">'axios'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//===============Vue===================</span></span><br><span class=\"line\"><span class=\"comment\">// Vue全局引用及使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\">Vue.prototype.$http = axios</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$http.get(<span class=\"string\">'/user?ID=12345'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二-script标签引入\"><a href=\"#方法二-script标签引入\" class=\"headerlink\" title=\"方法二  script标签引入\"></a>方法二  script标签引入</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/axios/dist/axios.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"用法及DEMO\"><a href=\"#用法及DEMO\" class=\"headerlink\" title=\"用法及DEMO\"></a>用法及DEMO</h2><h3 id=\"简单的demo\"><a href=\"#简单的demo\" class=\"headerlink\" title=\"简单的demo\"></a>简单的demo</h3><p><strong>一个简单的HTTP GET请求</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 法一 请求参数写到url中</span></span><br><span class=\"line\"></span><br><span class=\"line\">axios.get(<span class=\"string\">'http://getRes.php?id=123456&amp;name=Yangfan'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求成功的数据</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求失败的失败信息</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 法二 请求参数写到axios配置参数中</span></span><br><span class=\"line\"></span><br><span class=\"line\">axios.get(<span class=\"string\">'http://getRes.php'</span>，&#123;</span><br><span class=\"line\">  params:&#123;</span><br><span class=\"line\">    id:<span class=\"number\">123456</span>,</span><br><span class=\"line\">    name:<span class=\"string\">\"Yangfan\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求成功的数据</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求失败的失败信息</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>一个简单的HTTP POST 请求</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">axios.post(<span class=\"string\">'http://getRes.php'</span>,&#123;</span><br><span class=\"line\">  id:<span class=\"number\">123456</span>,</span><br><span class=\"line\">  name:<span class=\"string\">\"Yangfan\"</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求成功的数据</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求失败的失败信息</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>自定义请求配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> config=&#123;</span><br><span class=\"line\">  method: <span class=\"string\">'GET'</span>,  <span class=\"comment\">// 请求方法                                           </span></span><br><span class=\"line\">  url: <span class=\"string\">'http://getRes.php'</span>,  <span class=\"comment\">// 请求url                          </span></span><br><span class=\"line\">  headers: &#123; </span><br><span class=\"line\">    token: <span class=\"string\">'ftv1443qby6bdfa41t90sfvq89hg3h54u989m9imog79g4'</span>   <span class=\"comment\">// 请求头                                              </span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data: &#123;         <span class=\"comment\">// 需要传递的数据                                 </span></span><br><span class=\"line\">    id: <span class=\"number\">123456</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'Yangfan'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">axios(config).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求成功的数据</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回HTTP请求失败的失败信息</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整配置\"><a href=\"#完整配置\" class=\"headerlink\" title=\"完整配置\"></a>完整配置</h2><table><br>    <thead><br>        <tr><br>            <th>参数</th><br>            <th>类型</th><br>            <th>注解</th><br>        </tr><br>    </thead><br>    <tbody><br>        <tr><br>            <td>url</td><br>            <td>String</td><br>            <td><code>url</code>是服务器链接，用来请求</td><br>        </tr><br>        <tr><br>            <td>method</td><br>            <td>String</td><br>            <td><code>method</code>是发起请求时的请求方法</td><br>        </tr><br>        <tr><br>            <td>baseURL</td><br>            <td>String</td><br>            <td><code>baseURL</code>如果<code>url</code>不是绝对地址，那么将会加在其前面。</td><br>        </tr><br>        <tr><br>            <td>transformRequest</td><br>            <td>Function</td><br>            <td><code>transformRequest</code>允许请求的数据在传到服务器之前进行转化。</td><br>        </tr><br>        <tr><br>            <td>transformResponse</td><br>            <td>Function</td><br>            <td><code>transformResponse</code>允许返回的数据传入then/catch之前进行处理</td><br>        </tr><br>        <tr><br>            <td>headers</td><br>            <td>Object</td><br>            <td><code>headers</code>是自定义的要被发送的头信息</td><br>        </tr><br>        <tr><br>            <td>params</td><br>            <td>Object</td><br>            <td><code>params</code>是请求连接中的请求参数，必须是一个纯对象，或者URLSearchParams对象</td><br>        </tr><br>        <tr><br>            <td>paramsSerializer</td><br>            <td>Function</td><br>            <td><code>paramsSerializer</code>是一个可选的函数，是用来序列化参数</td><br>        </tr><br>        <tr><br>            <td>data</td><br>            <td>Object</td><br>            <td><code>data</code>是请求提需要设置的数据<br>    <br>只适用于应用的’PUT’,’POST’,’PATCH’，请求方法<br>    <br>当没有设置<code>transformRequest</code>时，必须是以下其中之一的类型（不可重复？）：<br>    <br>-string,plain object,ArrayBuffer,ArrayBufferView,URLSearchParams<br>    <br>-仅浏览器：FormData,File,Blob<br>    <br>-仅Node：Stream</td><br>        </tr><br>        <tr><br>            <td>timeout</td><br>            <td>Number</td><br>            <td><code>timeout</code>定义请求的时间，单位是毫秒。</td><br>        </tr><br>        <tr><br>            <td>withCredentials</td><br>            <td>Boolean</td><br>            <td><code>withCredentials</code>表明是否跨网站访问协议，</td><br>        </tr><br>        <tr><br>            <td>adapter</td><br>            <td>Function</td><br>            <td><code>adapter</code>适配器，允许自定义处理请求，这会使测试更简单。</td><br>        </tr><br>        <tr><br>            <td>auth</td><br>            <td>Object</td><br>            <td><code>auth</code>表明HTTP基础的认证应该被使用，并且提供证书。<br>    <br>这个会设置一个<code>authorization</code> 头（header），并且覆盖你在header设置的Authorization头信息。</td><br>        </tr><br>        <tr><br>            <td>responseType</td><br>            <td>String</td><br>            <td><code>responsetype</code>表明服务器返回的数据类型，这些类型的设置应该是<br>    <br>‘arraybuffer’,’blob’,’document’,’json’,’text’,stream’</td><br>        </tr><br>        <tr><br>            <td>xsrfCookieName</td><br>            <td>String</td><br>            <td><code>xsrfCookieName</code>是cookie名，用作xsrf token值</td><br>        </tr><br>        <tr><br>            <td>xsrfHeaderName</td><br>            <td>String</td><br>            <td><code>xsrfHeaderName</code> 是http头（header）的名字，并且该头携带xsrf的值</td><br>        </tr><br>        <tr><br>            <td>onUploadProgress</td><br>            <td>Function</td><br>            <td><code>onUploadProgress</code>允许处理上传过程的事件</td><br>        </tr><br>        <tr><br>            <td>onDownloadProgress</td><br>            <td>Function</td><br>            <td><code>onDownloadProgress</code>允许处理下载过程的事件</td><br>        </tr><br>        <tr><br>            <td>maxContentLength</td><br>            <td>Number</td><br>            <td><code>maxContentLength</code> 定义http返回内容的最大容量</td><br>        </tr><br>        <tr><br>            <td>validateStatus</td><br>            <td>Function</td><br>            <td><code>validateStatus</code> 定义promise的resolve和reject。<br>    <br>http返回状态码，如果<code>validateStatus</code>返回true（或者设置成null/undefined），promise将会接受；其他的promise将会拒绝。</td><br>        </tr><br>        <tr><br>            <td>maxRedirects</td><br>            <td>Number</td><br>            <td><code>maxRedirects</code>定义了node.js中要重定向的最大数量。<br>  <br>如果设置为0，则不会重定向。</td><br>        </tr><br>        <tr><br>            <td>httpAgent</td><br>            <td>Object</td><br>            <td><code>httpAgent</code> 和 <code>httpsAgent</code>当产生一个http或者https请求时分别定义一个自定义的代理，在nodejs中。<br>    <br>这个允许设置一些选选个，像是<code>keepAlive</code>–这个在默认中是没有开启的。</td><br>        </tr><br>        <tr><br>            <td>httpsAgent</td><br>            <td>Object</td><br>            <td><code>httpAgent</code> 和 <code>httpsAgent</code>当产生一个http或者https请求时分别定义一个自定义的代理，在nodejs中。<br>    <br>这个允许设置一些选选个，像是<code>keepAlive</code>–这个在默认中是没有开启的。</td><br>        </tr><br>        <tr><br>            <td>proxy</td><br>            <td>Object</td><br>            <td><code>proxy</code>定义服务器的主机名字和端口号。<br>    <br><code>auth</code>表明HTTP基本认证应该跟<code>proxy</code>相连接，并且提供证书。<br>    <br>这个将设置一个’Proxy-Authorization’头(header)，覆盖原先自定义的。</td><br>        </tr><br>        <tr><br>            <td>cancelToken</td><br>            <td>Function</td><br>            <td><code>cancelTaken</code> 定义一个取消，能够用来取消请求</td><br>        </tr><br>    </tbody><br></table>\n\n\n<h2 id=\"返回结果\"><a href=\"#返回结果\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 服务器返回的数据                                        </span></span><br><span class=\"line\">  data: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 服务器返回的状态码                              </span></span><br><span class=\"line\">  status: <span class=\"number\">200</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 服务器返回的状态信息                                                                     </span></span><br><span class=\"line\">  statusText: <span class=\"string\">'OK'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 服务器返回的响应头信息                      </span></span><br><span class=\"line\">  headers: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `config`是提供给`axios`的请求的配置</span></span><br><span class=\"line\">  config: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"【译】深入理解 ES2015，第一趴：块作用域 let 和 const","date":"2019-01-15T09:23:17.000Z","_content":"\n## 【译】深入理解 ES2015，第一趴：块作用域 let 和 const\n\n> - 原文地址：http://javascriptissexy.com/understanding-es2015-in-depth-part-1-block-scope-with-let-and-const/\n> - 原文作者：[Dan Wellman](http://javascriptissexy.com/author/dan_wellman/)\n> - Markdown 地址：https://github.com/Yangfan2016/learn-translate/blob/master/2-Understanding-ES2015-In-Depth-Part-1.md\n> - 译者：[Yangfan2016](https://github.com/Yangfan2016)\n---\n\nES2015 最大的特性之一就是有了一个全新的作用域。在这个章节里，我们将开始学习什么是作用域。我们将继续学习如何创建新的作用域类型，以及给我们代码带来的好处\n\n### 快速了解作用域\n\n作用域描述为一个变量，函数，标识符可以被访问的区域。JavaScript 传统上有两种作用域类型：全局作用域和函数作用域，你定义变量的位置会影响其他代码是否可以访问。让我们来看一个简单的例子来阐述作用域的概念。想象一下，你的 JavaScript 文件只包含以下代码：\n\n```js\nvar globalVariable = 'This is global';\n\nfunction globalFunction1() {\n  var innerVariable1 = 'Non-global variable 1';\n}\n\nfunction globalFunction2() {\n  var innerVariable2 = 'Non-global variable 2';\n}\n```\n\n在上面的代码中，我们首先声明了一个变量 `globalVariable`。这个语句不在函数内部，所以会自动存到全局作用域中。浏览器用 `window` 对象创建了一个全局作用域，除了可以用 `globalVariable` 访问，我们还可以通过挂在 `window` 对象上的 `window.globalVariable` 访问。我们可以在文件的任何地方访问这个变量，这两个函数的之前或之后，甚至是在函数的内部（这就是为什么我们说全局变量是 “隐藏的”，我们可以在任何地方正确的访问他们），甚至是在附在同一页面的其他 JavaScript 文件\n\n在全局作用域里，我们定义了两个函数，`globalFunction1` 和 `globalFunction2`，就像全局变量一样，他们是 “可见的” 并且可以在这个文件的任何地方调用，也可以被同一页面的其他 JavaScript 文件调用。然而，当 JavaScript 引擎解析这些函数时，会分别创建他们自己的作用域。因吹斯听，这两个新的函数作用域被嵌套在全局作用域下，成为子作用域。这也就意味着函数内的代码可以访问全局变量，就像是和在函数 “内部的” 定义变量一样\n\n当我们试图访问 JavaScript 里的标识符时，浏览器会首先在当前作用域中查找。如果没有找到，浏览器会在当前作用域的父作用域中查找，并且继续向上查找，直到找到这个变量，或者到达全局作用域为止。如果这个变量在全局作用域里依旧没有找到的话，那么浏览器会抛出一个 `ReferenceError` 错误。这种嵌套的作用域被称作作用域链，而这个检查当前作用域和父作用域的过程被称作变量查找。这种查找只会向上查找作用域链，它永远不会在它的子作用域里查找 \n\n在上面的作用域链查找方向我们得知，例子中的 `innerVariable1` 变量只能在 `globalFunction1` 函数内部被访问，`innerVariable2` 变量只能在 `globalFunction2` 函数内部被访问。`innerVariable1` 变量不能在 `globalFunction2` 函数内部或全局作用域内被访问，`innerVariable2` 变量也不能在 `globalFunction1` 函数内部或全局作用域内被访问\n\n下面的图片是上面代码中作用域的抽象表示：\n\n![js-scopes](https://user-gold-cdn.xitu.io/2019/1/14/1684c6ca914e0347?w=780&h=505&f=png&s=32363)\n\n> #### 全局作用域包含了 `globalVariable` 以及两个内嵌的函数作用域。每个内嵌的函数作用域又包含自己的变量，但是这些变量不能被全局作用域访问。虚线表示的是作用域链的查找方向\n\n让我们来看下另一个简短的代码示例，彻底的了解下到目前为止我们所介绍到的作用域概念。假设 JavaScript 文件只包含如下代码：\n\n```js\nfunction outer() {\n  var variable1;\n\n  function inner() {\n    var variable2;\n  }\n}\n```\n\n在这段代码里，我们在全局作用域里声明了一个叫 `outer` 的函数。因为它是一个函数，所以它创建了一个函数作用域，嵌套在全局作用域下。在这个作用域下，我们又声明了一个叫 `variable1` 的变量和 一个叫 `inner` 的函数。因为 `inner` 也是一个函数，所以一个新的作用域又被创建了，嵌套在 `outer` 函数的作用域下\n\n在 `inner` 函数中，我们既可以访问 `variable2` 也可以访问 `variable1`。当我们在 `inner` 函数中访问 `variable1` 时，浏览器首先会在它的作用域里查找这个变量；当这个变量没有被找到时，会继续向上在父作用域里查找（也就是 `outer` 函数的作用域）。代码里作用域如下图所示：\n\n![js-scopes2](https://user-gold-cdn.xitu.io/2019/1/14/1684c6ca800aacd1?w=635&h=505&f=png&s=31601)\n\n> #### 函数作用域可以嵌套在其他的函数作用域里，但是作用域链查找规则是一样的，因此在 `inner` 作用域下可以访问到  `variable1` 和 `variable2`，但是在 `outer` 作用域下只能访问 `variable1`\n\n这个示例中的作用域链比较长，从 `inner` 函数延伸到 `outer` 函数，直到全局对象 `window`\n\n### JavaScript 的新作用域\n\n在 JavaScript 中，一个块是由一个或多个语句用大括号包裹起来的。诸如 `if`，`for`，`while` 的条件表达式，都是用块基于特定的条件来执行块语句\n\n其他流行的常见的编程语言都有块作用域，JavaScript 作用域中，直到如今却只有全局作用域和函数作用域，因此使我们变得很困惑。ES2015 在 JavaScript 新增了块作用域，对于我们的代码来说有很大的影响，并且对于那些熟悉其他编程语言的开发者来说变得更直观\n\n块作用域意味着一个块可以创建它自己的作用域，而不是简单的存在于它最近到父级函数作用域或全局作用域下。让我们在认识块作用域是如何工作的之前，先来了解下传统上块里的 JavaScript 是如何工作的：\n\n```js\nfunction fn() {\n  var x = 'function scope';\n\n  if (true) {\n    var y = 'not block scope';\n  }\n\n  function innerFn() {\n    console.log(x, y); // function scope not block scope\n  }\n  innerFn();\n}\n```\n\n`var` 语句是不能够创建块作用域的，即使是在块里，因此 `console.log` 语句可以访问到 `x` 和 `y` 变量。 `fn` 函数创建了一个函数作用域而且 `x` 和 `y` 变量都是可以通过作用域内的作用域链访问到 \n\n### 声明提升\n\n理解提升的概念是理解 JavaScript 如何工作的基础。JavaScript 有两个阶段：解析阶段（JavaScript 引擎读取所有的代码）、执行阶段（执行已解析的代码）。大多数的事情都发生在第二阶段；例如，当你使用 `console.log` 语句时，实际的日志消息会在执行阶段打印到控制台\n\n然而，一些重要的事情也会在解析阶段发生，包括变量的内存分配、作用域创建。提升这个术语指的是 JavaScript 引擎在遇到标识符，如变量、函数声明时所发生到事情；当发生声明提升时，它的行为就像是把它定义的字面量提升到当前作用域的顶部。鉴于此，上面到代码示例实际会变成如下情况：\n\n```js\nfunction fn() {\n  var x;\n  var y;\n\n  x = 'function scope';\n\n  if (true) {\n    y = 'not block scope';\n  }\n\n  function innerFn() {\n    console.log(x, y); // function scope not block scope\n  }\n  innerFn();\n}\n```\n\n只有变量到声明会提升到它的作用域的顶部；在这个例子的 `if` 语句中，变量赋值依然发生在我们所赋值的地方。当然，我们到变量并不会移动，而是引擎行为表现如此，因此这样可以更好的帮助我们理解代码\n\n除了变量，函数声明也会被提升。结果就是，从 JavaScript 引擎到角度来看，代码实际上看起来是这样的：\n\n```js\nfunction fn() {\n  var x;\n  var y;\n  function innerFn() {\n    console.log(x, y); // function scope not block scope\n  }\n\n  x = 'function scope';\n\n  if (true) {\n    y = 'not block scope';\n  }\n  innerFn();\n}\n```\n\n`innerFn` 的声明也被提升到了它的作用域的顶部。但是，记住它仅仅是函数声明被提升了，函数调用没有被提升。上面的代码并不会报任何错，因为 `innerFn` 在 `x` 和 `y` 赋值之前并没有被调用   \n\n### 使用 `let`\n\n即使使用了 ES2015，`var` 声明也不会创建块作用域。为了创建块作用域，我们需要在块里使用 `let` 或 `const` 声明。我们一会再看 `const`，首先来看下 `let`\n\n表面上，`let` 和 `var`（我们用它来声明变量）的行为很相似：\n\n```js\nfunction fn() {\n  var variable1;\n  let variable2;\n}\n```\n\n在这个简单的例子中，`var` 和 `let` 声明都做了相同的事情（在 `fn` 创建的作用域下初始化了一个新的变量）。为了创建一个新的块作用域，我们需要在块里使用 `let`：\n\n```js\nfunction fn() {\n  var variable1 = 'function scope';\n\n  if (true) {\n    let variable2 = 'block scope';\n  }\n\n  console.log(variable1, variable2); // Uncaught ReferenceError: variable2 is not defined\n}\nfn();\n```\n\n在这个代码示例中，抛出了一个引用错误（reference error）；让我们来探索下为什么会这样。`fn` 函数创建了一个新作用域，里面声明了变量 `variable1`。然后我们在 `if` 语句的块里，声明了变量 `variable2`。然而，因为我们在块里使用了 `let` 声明，因此一个新的块作用域在 `fn` 的作用域下被创建了\n\n如果 `console.log` 语句也在 `if` 块中的话，那么它就和 `variable2` 在相同的作用域下了，也能够通过作用域链找到 `variable1`。但是因为 `console.log` 在外头，因此它不能访问 `variable2`，所以会抛出一个引用错误\n\n块作用域和函数作用域的行为相同，但是他们是为块创建的，而不是函数\n\n### 暂时性死区\n\n当一个用 `var` 声明的常规变量被创建时，会被提升到它的作用域的顶部，然后并初始化一个 `undefined` 值，这样就允许我们能够在它赋值之前引用一个\b常规变量\n\n```js\nconsole.log(x); // undefined\nvar x = 10;\n```\n\n记住，由于存在声明提升，代码实际看起来是这样的：\n\n```js\nvar x = undefined;\nconsole.log(x); // undefined\nx = 10;\n```\n\n这个行为会阻止抛出引用错误 `ReferenceError`\n\n用 `let` 声明的变量也被提升了，但重要的是，他们并不会自动初始化值 `undefined`，因此意味着下面的代码会产生一个错误：\n\n```js\nconsole.log(x); // Uncaught ReferenceError: x is not defined\nlet x = 10;\n```\n\n这个错误是由暂时性死区（TDZ）引起的。TDZ 存在于作用域初始化到变量声明期间。为了修复这个错误（`ReferenceError`），我们需要在访问它前声明它：\n\n> 译者注：[TDZ](https://gist.github.com/rwaldron/ca35924d59ddc60a6aa165e1e4a3acda)\n\n```js\nlet x;\nconsole.log(x); // undefined\nx = 10;\n```\n\nTDZ 这样设计是为了使开发更容易（试图引用一个还没声明的变量通常视为一个错误，而不是故意为之），因此这个错误可以立即提醒我们\n\n### 使用 `const`\n\n新的 `const` 被用来声明一个不可再次赋值的变量。它和 `let` 的在 TDZ 的行为非常相似，\b但是，`const` 变量必须初始化一个\b值\n\n```js\nconst VAR1 = 'constant';\n```\n\n从现在开始， 变量 `VAR1` 的值将永远是 “constant” 这个字符串。如果我们试图\b再次对它赋值，\b我们会得到一个错误：\n\n> TypeError: Assignment to `constant` variable\n\n如果我们试图创建一个没有初始化的 `const` 变量，我们将看到\b一个语法错误：\n\n> SyntaxError: Missing initializer in `const` declaration\n\n相似地，一个 `const` 变量\b不能被再次声明。如果我们试图再次用 `const` 声明一个相同变量时，我们将得到一个不同类型的语法错误\n\n> SyntaxError: Identifier ‘VAR1′ has already been declared\n\n和其他编程语言一样，常量是被用来保存我们的程序在生命周期里不希望改变的值\n\n记住 `let` 和 `const` \b都是 JavaScript \b的保留词，因此在严格模式下，是不能被用作标识符名称的（变量名，函数名等）。随着 ES2015 越来越普遍，`let` 和 `const` \b优于 `var` \b已形成一个共识，因为变量\b创建的作用域\b更与其他现代编程语言看齐，并且代码的行为也更好预测。\b\n因此，在大多数情况下尽可能的\b避免使用 `var`\n\n### 不可变性\n\n用 `const` 声明的变量不能被再次赋值的，但是 `const` 声明的变量并不是完全不可变的。如果我们用对象或数组初始化了一个 `const` 变量，我们依然可以修改对象的属性和增加删除数组的元素 \n\n### 练习\n\n1. 在 `for` 循环里用 `let` 来初始化计数器变量  \n2. 修复下面 `const` 的错误：\n\n```js\nconst VAR1 = 'constant';\nconst VAR1 = 'constant2';\nconst VAR2;\nVAR2 = 'constant';\n```\n\n> #### 成功是通过不断的练习和知识的积累，而非智力\n\n\n---\n> - 本文仅代表原作者个人观点，译者不发表任何观点\n> - Markdown 文件由译者手动整理，如有勘误，欢迎指正\n> - 译文和原文采用一样协议，侵删","source":"_posts/【译】深入理解-ES2015，第一趴：块作用域-let-和-const.md","raw":"---\ntitle: 【译】深入理解 ES2015，第一趴：块作用域 let 和 const\ndate: 2019-01-15 17:23:17\ntags: [翻译计划]\n---\n\n## 【译】深入理解 ES2015，第一趴：块作用域 let 和 const\n\n> - 原文地址：http://javascriptissexy.com/understanding-es2015-in-depth-part-1-block-scope-with-let-and-const/\n> - 原文作者：[Dan Wellman](http://javascriptissexy.com/author/dan_wellman/)\n> - Markdown 地址：https://github.com/Yangfan2016/learn-translate/blob/master/2-Understanding-ES2015-In-Depth-Part-1.md\n> - 译者：[Yangfan2016](https://github.com/Yangfan2016)\n---\n\nES2015 最大的特性之一就是有了一个全新的作用域。在这个章节里，我们将开始学习什么是作用域。我们将继续学习如何创建新的作用域类型，以及给我们代码带来的好处\n\n### 快速了解作用域\n\n作用域描述为一个变量，函数，标识符可以被访问的区域。JavaScript 传统上有两种作用域类型：全局作用域和函数作用域，你定义变量的位置会影响其他代码是否可以访问。让我们来看一个简单的例子来阐述作用域的概念。想象一下，你的 JavaScript 文件只包含以下代码：\n\n```js\nvar globalVariable = 'This is global';\n\nfunction globalFunction1() {\n  var innerVariable1 = 'Non-global variable 1';\n}\n\nfunction globalFunction2() {\n  var innerVariable2 = 'Non-global variable 2';\n}\n```\n\n在上面的代码中，我们首先声明了一个变量 `globalVariable`。这个语句不在函数内部，所以会自动存到全局作用域中。浏览器用 `window` 对象创建了一个全局作用域，除了可以用 `globalVariable` 访问，我们还可以通过挂在 `window` 对象上的 `window.globalVariable` 访问。我们可以在文件的任何地方访问这个变量，这两个函数的之前或之后，甚至是在函数的内部（这就是为什么我们说全局变量是 “隐藏的”，我们可以在任何地方正确的访问他们），甚至是在附在同一页面的其他 JavaScript 文件\n\n在全局作用域里，我们定义了两个函数，`globalFunction1` 和 `globalFunction2`，就像全局变量一样，他们是 “可见的” 并且可以在这个文件的任何地方调用，也可以被同一页面的其他 JavaScript 文件调用。然而，当 JavaScript 引擎解析这些函数时，会分别创建他们自己的作用域。因吹斯听，这两个新的函数作用域被嵌套在全局作用域下，成为子作用域。这也就意味着函数内的代码可以访问全局变量，就像是和在函数 “内部的” 定义变量一样\n\n当我们试图访问 JavaScript 里的标识符时，浏览器会首先在当前作用域中查找。如果没有找到，浏览器会在当前作用域的父作用域中查找，并且继续向上查找，直到找到这个变量，或者到达全局作用域为止。如果这个变量在全局作用域里依旧没有找到的话，那么浏览器会抛出一个 `ReferenceError` 错误。这种嵌套的作用域被称作作用域链，而这个检查当前作用域和父作用域的过程被称作变量查找。这种查找只会向上查找作用域链，它永远不会在它的子作用域里查找 \n\n在上面的作用域链查找方向我们得知，例子中的 `innerVariable1` 变量只能在 `globalFunction1` 函数内部被访问，`innerVariable2` 变量只能在 `globalFunction2` 函数内部被访问。`innerVariable1` 变量不能在 `globalFunction2` 函数内部或全局作用域内被访问，`innerVariable2` 变量也不能在 `globalFunction1` 函数内部或全局作用域内被访问\n\n下面的图片是上面代码中作用域的抽象表示：\n\n![js-scopes](https://user-gold-cdn.xitu.io/2019/1/14/1684c6ca914e0347?w=780&h=505&f=png&s=32363)\n\n> #### 全局作用域包含了 `globalVariable` 以及两个内嵌的函数作用域。每个内嵌的函数作用域又包含自己的变量，但是这些变量不能被全局作用域访问。虚线表示的是作用域链的查找方向\n\n让我们来看下另一个简短的代码示例，彻底的了解下到目前为止我们所介绍到的作用域概念。假设 JavaScript 文件只包含如下代码：\n\n```js\nfunction outer() {\n  var variable1;\n\n  function inner() {\n    var variable2;\n  }\n}\n```\n\n在这段代码里，我们在全局作用域里声明了一个叫 `outer` 的函数。因为它是一个函数，所以它创建了一个函数作用域，嵌套在全局作用域下。在这个作用域下，我们又声明了一个叫 `variable1` 的变量和 一个叫 `inner` 的函数。因为 `inner` 也是一个函数，所以一个新的作用域又被创建了，嵌套在 `outer` 函数的作用域下\n\n在 `inner` 函数中，我们既可以访问 `variable2` 也可以访问 `variable1`。当我们在 `inner` 函数中访问 `variable1` 时，浏览器首先会在它的作用域里查找这个变量；当这个变量没有被找到时，会继续向上在父作用域里查找（也就是 `outer` 函数的作用域）。代码里作用域如下图所示：\n\n![js-scopes2](https://user-gold-cdn.xitu.io/2019/1/14/1684c6ca800aacd1?w=635&h=505&f=png&s=31601)\n\n> #### 函数作用域可以嵌套在其他的函数作用域里，但是作用域链查找规则是一样的，因此在 `inner` 作用域下可以访问到  `variable1` 和 `variable2`，但是在 `outer` 作用域下只能访问 `variable1`\n\n这个示例中的作用域链比较长，从 `inner` 函数延伸到 `outer` 函数，直到全局对象 `window`\n\n### JavaScript 的新作用域\n\n在 JavaScript 中，一个块是由一个或多个语句用大括号包裹起来的。诸如 `if`，`for`，`while` 的条件表达式，都是用块基于特定的条件来执行块语句\n\n其他流行的常见的编程语言都有块作用域，JavaScript 作用域中，直到如今却只有全局作用域和函数作用域，因此使我们变得很困惑。ES2015 在 JavaScript 新增了块作用域，对于我们的代码来说有很大的影响，并且对于那些熟悉其他编程语言的开发者来说变得更直观\n\n块作用域意味着一个块可以创建它自己的作用域，而不是简单的存在于它最近到父级函数作用域或全局作用域下。让我们在认识块作用域是如何工作的之前，先来了解下传统上块里的 JavaScript 是如何工作的：\n\n```js\nfunction fn() {\n  var x = 'function scope';\n\n  if (true) {\n    var y = 'not block scope';\n  }\n\n  function innerFn() {\n    console.log(x, y); // function scope not block scope\n  }\n  innerFn();\n}\n```\n\n`var` 语句是不能够创建块作用域的，即使是在块里，因此 `console.log` 语句可以访问到 `x` 和 `y` 变量。 `fn` 函数创建了一个函数作用域而且 `x` 和 `y` 变量都是可以通过作用域内的作用域链访问到 \n\n### 声明提升\n\n理解提升的概念是理解 JavaScript 如何工作的基础。JavaScript 有两个阶段：解析阶段（JavaScript 引擎读取所有的代码）、执行阶段（执行已解析的代码）。大多数的事情都发生在第二阶段；例如，当你使用 `console.log` 语句时，实际的日志消息会在执行阶段打印到控制台\n\n然而，一些重要的事情也会在解析阶段发生，包括变量的内存分配、作用域创建。提升这个术语指的是 JavaScript 引擎在遇到标识符，如变量、函数声明时所发生到事情；当发生声明提升时，它的行为就像是把它定义的字面量提升到当前作用域的顶部。鉴于此，上面到代码示例实际会变成如下情况：\n\n```js\nfunction fn() {\n  var x;\n  var y;\n\n  x = 'function scope';\n\n  if (true) {\n    y = 'not block scope';\n  }\n\n  function innerFn() {\n    console.log(x, y); // function scope not block scope\n  }\n  innerFn();\n}\n```\n\n只有变量到声明会提升到它的作用域的顶部；在这个例子的 `if` 语句中，变量赋值依然发生在我们所赋值的地方。当然，我们到变量并不会移动，而是引擎行为表现如此，因此这样可以更好的帮助我们理解代码\n\n除了变量，函数声明也会被提升。结果就是，从 JavaScript 引擎到角度来看，代码实际上看起来是这样的：\n\n```js\nfunction fn() {\n  var x;\n  var y;\n  function innerFn() {\n    console.log(x, y); // function scope not block scope\n  }\n\n  x = 'function scope';\n\n  if (true) {\n    y = 'not block scope';\n  }\n  innerFn();\n}\n```\n\n`innerFn` 的声明也被提升到了它的作用域的顶部。但是，记住它仅仅是函数声明被提升了，函数调用没有被提升。上面的代码并不会报任何错，因为 `innerFn` 在 `x` 和 `y` 赋值之前并没有被调用   \n\n### 使用 `let`\n\n即使使用了 ES2015，`var` 声明也不会创建块作用域。为了创建块作用域，我们需要在块里使用 `let` 或 `const` 声明。我们一会再看 `const`，首先来看下 `let`\n\n表面上，`let` 和 `var`（我们用它来声明变量）的行为很相似：\n\n```js\nfunction fn() {\n  var variable1;\n  let variable2;\n}\n```\n\n在这个简单的例子中，`var` 和 `let` 声明都做了相同的事情（在 `fn` 创建的作用域下初始化了一个新的变量）。为了创建一个新的块作用域，我们需要在块里使用 `let`：\n\n```js\nfunction fn() {\n  var variable1 = 'function scope';\n\n  if (true) {\n    let variable2 = 'block scope';\n  }\n\n  console.log(variable1, variable2); // Uncaught ReferenceError: variable2 is not defined\n}\nfn();\n```\n\n在这个代码示例中，抛出了一个引用错误（reference error）；让我们来探索下为什么会这样。`fn` 函数创建了一个新作用域，里面声明了变量 `variable1`。然后我们在 `if` 语句的块里，声明了变量 `variable2`。然而，因为我们在块里使用了 `let` 声明，因此一个新的块作用域在 `fn` 的作用域下被创建了\n\n如果 `console.log` 语句也在 `if` 块中的话，那么它就和 `variable2` 在相同的作用域下了，也能够通过作用域链找到 `variable1`。但是因为 `console.log` 在外头，因此它不能访问 `variable2`，所以会抛出一个引用错误\n\n块作用域和函数作用域的行为相同，但是他们是为块创建的，而不是函数\n\n### 暂时性死区\n\n当一个用 `var` 声明的常规变量被创建时，会被提升到它的作用域的顶部，然后并初始化一个 `undefined` 值，这样就允许我们能够在它赋值之前引用一个\b常规变量\n\n```js\nconsole.log(x); // undefined\nvar x = 10;\n```\n\n记住，由于存在声明提升，代码实际看起来是这样的：\n\n```js\nvar x = undefined;\nconsole.log(x); // undefined\nx = 10;\n```\n\n这个行为会阻止抛出引用错误 `ReferenceError`\n\n用 `let` 声明的变量也被提升了，但重要的是，他们并不会自动初始化值 `undefined`，因此意味着下面的代码会产生一个错误：\n\n```js\nconsole.log(x); // Uncaught ReferenceError: x is not defined\nlet x = 10;\n```\n\n这个错误是由暂时性死区（TDZ）引起的。TDZ 存在于作用域初始化到变量声明期间。为了修复这个错误（`ReferenceError`），我们需要在访问它前声明它：\n\n> 译者注：[TDZ](https://gist.github.com/rwaldron/ca35924d59ddc60a6aa165e1e4a3acda)\n\n```js\nlet x;\nconsole.log(x); // undefined\nx = 10;\n```\n\nTDZ 这样设计是为了使开发更容易（试图引用一个还没声明的变量通常视为一个错误，而不是故意为之），因此这个错误可以立即提醒我们\n\n### 使用 `const`\n\n新的 `const` 被用来声明一个不可再次赋值的变量。它和 `let` 的在 TDZ 的行为非常相似，\b但是，`const` 变量必须初始化一个\b值\n\n```js\nconst VAR1 = 'constant';\n```\n\n从现在开始， 变量 `VAR1` 的值将永远是 “constant” 这个字符串。如果我们试图\b再次对它赋值，\b我们会得到一个错误：\n\n> TypeError: Assignment to `constant` variable\n\n如果我们试图创建一个没有初始化的 `const` 变量，我们将看到\b一个语法错误：\n\n> SyntaxError: Missing initializer in `const` declaration\n\n相似地，一个 `const` 变量\b不能被再次声明。如果我们试图再次用 `const` 声明一个相同变量时，我们将得到一个不同类型的语法错误\n\n> SyntaxError: Identifier ‘VAR1′ has already been declared\n\n和其他编程语言一样，常量是被用来保存我们的程序在生命周期里不希望改变的值\n\n记住 `let` 和 `const` \b都是 JavaScript \b的保留词，因此在严格模式下，是不能被用作标识符名称的（变量名，函数名等）。随着 ES2015 越来越普遍，`let` 和 `const` \b优于 `var` \b已形成一个共识，因为变量\b创建的作用域\b更与其他现代编程语言看齐，并且代码的行为也更好预测。\b\n因此，在大多数情况下尽可能的\b避免使用 `var`\n\n### 不可变性\n\n用 `const` 声明的变量不能被再次赋值的，但是 `const` 声明的变量并不是完全不可变的。如果我们用对象或数组初始化了一个 `const` 变量，我们依然可以修改对象的属性和增加删除数组的元素 \n\n### 练习\n\n1. 在 `for` 循环里用 `let` 来初始化计数器变量  \n2. 修复下面 `const` 的错误：\n\n```js\nconst VAR1 = 'constant';\nconst VAR1 = 'constant2';\nconst VAR2;\nVAR2 = 'constant';\n```\n\n> #### 成功是通过不断的练习和知识的积累，而非智力\n\n\n---\n> - 本文仅代表原作者个人观点，译者不发表任何观点\n> - Markdown 文件由译者手动整理，如有勘误，欢迎指正\n> - 译文和原文采用一样协议，侵删","slug":"【译】深入理解-ES2015，第一趴：块作用域-let-和-const","published":1,"updated":"2019-04-25T08:24:11.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaulj001raeyyqg29lfks","content":"<h2 id=\"【译】深入理解-ES2015，第一趴：块作用域-let-和-const\"><a href=\"#【译】深入理解-ES2015，第一趴：块作用域-let-和-const\" class=\"headerlink\" title=\"【译】深入理解 ES2015，第一趴：块作用域 let 和 const\"></a>【译】深入理解 ES2015，第一趴：块作用域 let 和 const</h2><blockquote>\n<ul>\n<li>原文地址：<a href=\"http://javascriptissexy.com/understanding-es2015-in-depth-part-1-block-scope-with-let-and-const/\" target=\"_blank\" rel=\"noopener\">http://javascriptissexy.com/understanding-es2015-in-depth-part-1-block-scope-with-let-and-const/</a></li>\n<li>原文作者：<a href=\"http://javascriptissexy.com/author/dan_wellman/\" target=\"_blank\" rel=\"noopener\">Dan Wellman</a></li>\n<li>Markdown 地址：<a href=\"https://github.com/Yangfan2016/learn-translate/blob/master/2-Understanding-ES2015-In-Depth-Part-1.md\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016/learn-translate/blob/master/2-Understanding-ES2015-In-Depth-Part-1.md</a></li>\n<li>译者：<a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">Yangfan2016</a></li>\n</ul>\n</blockquote>\n<hr>\n<p>ES2015 最大的特性之一就是有了一个全新的作用域。在这个章节里，我们将开始学习什么是作用域。我们将继续学习如何创建新的作用域类型，以及给我们代码带来的好处</p>\n<h3 id=\"快速了解作用域\"><a href=\"#快速了解作用域\" class=\"headerlink\" title=\"快速了解作用域\"></a>快速了解作用域</h3><p>作用域描述为一个变量，函数，标识符可以被访问的区域。JavaScript 传统上有两种作用域类型：全局作用域和函数作用域，你定义变量的位置会影响其他代码是否可以访问。让我们来看一个简单的例子来阐述作用域的概念。想象一下，你的 JavaScript 文件只包含以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> globalVariable = <span class=\"string\">'This is global'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">globalFunction1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> innerVariable1 = <span class=\"string\">'Non-global variable 1'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">globalFunction2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> innerVariable2 = <span class=\"string\">'Non-global variable 2'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我们首先声明了一个变量 <code>globalVariable</code>。这个语句不在函数内部，所以会自动存到全局作用域中。浏览器用 <code>window</code> 对象创建了一个全局作用域，除了可以用 <code>globalVariable</code> 访问，我们还可以通过挂在 <code>window</code> 对象上的 <code>window.globalVariable</code> 访问。我们可以在文件的任何地方访问这个变量，这两个函数的之前或之后，甚至是在函数的内部（这就是为什么我们说全局变量是 “隐藏的”，我们可以在任何地方正确的访问他们），甚至是在附在同一页面的其他 JavaScript 文件</p>\n<p>在全局作用域里，我们定义了两个函数，<code>globalFunction1</code> 和 <code>globalFunction2</code>，就像全局变量一样，他们是 “可见的” 并且可以在这个文件的任何地方调用，也可以被同一页面的其他 JavaScript 文件调用。然而，当 JavaScript 引擎解析这些函数时，会分别创建他们自己的作用域。因吹斯听，这两个新的函数作用域被嵌套在全局作用域下，成为子作用域。这也就意味着函数内的代码可以访问全局变量，就像是和在函数 “内部的” 定义变量一样</p>\n<p>当我们试图访问 JavaScript 里的标识符时，浏览器会首先在当前作用域中查找。如果没有找到，浏览器会在当前作用域的父作用域中查找，并且继续向上查找，直到找到这个变量，或者到达全局作用域为止。如果这个变量在全局作用域里依旧没有找到的话，那么浏览器会抛出一个 <code>ReferenceError</code> 错误。这种嵌套的作用域被称作作用域链，而这个检查当前作用域和父作用域的过程被称作变量查找。这种查找只会向上查找作用域链，它永远不会在它的子作用域里查找 </p>\n<p>在上面的作用域链查找方向我们得知，例子中的 <code>innerVariable1</code> 变量只能在 <code>globalFunction1</code> 函数内部被访问，<code>innerVariable2</code> 变量只能在 <code>globalFunction2</code> 函数内部被访问。<code>innerVariable1</code> 变量不能在 <code>globalFunction2</code> 函数内部或全局作用域内被访问，<code>innerVariable2</code> 变量也不能在 <code>globalFunction1</code> 函数内部或全局作用域内被访问</p>\n<p>下面的图片是上面代码中作用域的抽象表示：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/1/14/1684c6ca914e0347?w=780&h=505&f=png&s=32363\" alt=\"js-scopes\" title=\"\">\n                </div>\n                <div class=\"image-caption\">js-scopes</div>\n            </figure>\n<blockquote>\n<h4 id=\"全局作用域包含了-globalVariable-以及两个内嵌的函数作用域。每个内嵌的函数作用域又包含自己的变量，但是这些变量不能被全局作用域访问。虚线表示的是作用域链的查找方向\"><a href=\"#全局作用域包含了-globalVariable-以及两个内嵌的函数作用域。每个内嵌的函数作用域又包含自己的变量，但是这些变量不能被全局作用域访问。虚线表示的是作用域链的查找方向\" class=\"headerlink\" title=\"全局作用域包含了 globalVariable 以及两个内嵌的函数作用域。每个内嵌的函数作用域又包含自己的变量，但是这些变量不能被全局作用域访问。虚线表示的是作用域链的查找方向\"></a>全局作用域包含了 <code>globalVariable</code> 以及两个内嵌的函数作用域。每个内嵌的函数作用域又包含自己的变量，但是这些变量不能被全局作用域访问。虚线表示的是作用域链的查找方向</h4></blockquote>\n<p>让我们来看下另一个简短的代码示例，彻底的了解下到目前为止我们所介绍到的作用域概念。假设 JavaScript 文件只包含如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> variable1;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> variable2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这段代码里，我们在全局作用域里声明了一个叫 <code>outer</code> 的函数。因为它是一个函数，所以它创建了一个函数作用域，嵌套在全局作用域下。在这个作用域下，我们又声明了一个叫 <code>variable1</code> 的变量和 一个叫 <code>inner</code> 的函数。因为 <code>inner</code> 也是一个函数，所以一个新的作用域又被创建了，嵌套在 <code>outer</code> 函数的作用域下</p>\n<p>在 <code>inner</code> 函数中，我们既可以访问 <code>variable2</code> 也可以访问 <code>variable1</code>。当我们在 <code>inner</code> 函数中访问 <code>variable1</code> 时，浏览器首先会在它的作用域里查找这个变量；当这个变量没有被找到时，会继续向上在父作用域里查找（也就是 <code>outer</code> 函数的作用域）。代码里作用域如下图所示：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/1/14/1684c6ca800aacd1?w=635&h=505&f=png&s=31601\" alt=\"js-scopes2\" title=\"\">\n                </div>\n                <div class=\"image-caption\">js-scopes2</div>\n            </figure>\n<blockquote>\n<h4 id=\"函数作用域可以嵌套在其他的函数作用域里，但是作用域链查找规则是一样的，因此在-inner-作用域下可以访问到-variable1-和-variable2，但是在-outer-作用域下只能访问-variable1\"><a href=\"#函数作用域可以嵌套在其他的函数作用域里，但是作用域链查找规则是一样的，因此在-inner-作用域下可以访问到-variable1-和-variable2，但是在-outer-作用域下只能访问-variable1\" class=\"headerlink\" title=\"函数作用域可以嵌套在其他的函数作用域里，但是作用域链查找规则是一样的，因此在 inner 作用域下可以访问到  variable1 和 variable2，但是在 outer 作用域下只能访问 variable1\"></a>函数作用域可以嵌套在其他的函数作用域里，但是作用域链查找规则是一样的，因此在 <code>inner</code> 作用域下可以访问到  <code>variable1</code> 和 <code>variable2</code>，但是在 <code>outer</code> 作用域下只能访问 <code>variable1</code></h4></blockquote>\n<p>这个示例中的作用域链比较长，从 <code>inner</code> 函数延伸到 <code>outer</code> 函数，直到全局对象 <code>window</code></p>\n<h3 id=\"JavaScript-的新作用域\"><a href=\"#JavaScript-的新作用域\" class=\"headerlink\" title=\"JavaScript 的新作用域\"></a>JavaScript 的新作用域</h3><p>在 JavaScript 中，一个块是由一个或多个语句用大括号包裹起来的。诸如 <code>if</code>，<code>for</code>，<code>while</code> 的条件表达式，都是用块基于特定的条件来执行块语句</p>\n<p>其他流行的常见的编程语言都有块作用域，JavaScript 作用域中，直到如今却只有全局作用域和函数作用域，因此使我们变得很困惑。ES2015 在 JavaScript 新增了块作用域，对于我们的代码来说有很大的影响，并且对于那些熟悉其他编程语言的开发者来说变得更直观</p>\n<p>块作用域意味着一个块可以创建它自己的作用域，而不是简单的存在于它最近到父级函数作用域或全局作用域下。让我们在认识块作用域是如何工作的之前，先来了解下传统上块里的 JavaScript 是如何工作的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"string\">'function scope'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"string\">'not block scope'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x, y); <span class=\"comment\">// function scope not block scope</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  innerFn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>var</code> 语句是不能够创建块作用域的，即使是在块里，因此 <code>console.log</code> 语句可以访问到 <code>x</code> 和 <code>y</code> 变量。 <code>fn</code> 函数创建了一个函数作用域而且 <code>x</code> 和 <code>y</code> 变量都是可以通过作用域内的作用域链访问到 </p>\n<h3 id=\"声明提升\"><a href=\"#声明提升\" class=\"headerlink\" title=\"声明提升\"></a>声明提升</h3><p>理解提升的概念是理解 JavaScript 如何工作的基础。JavaScript 有两个阶段：解析阶段（JavaScript 引擎读取所有的代码）、执行阶段（执行已解析的代码）。大多数的事情都发生在第二阶段；例如，当你使用 <code>console.log</code> 语句时，实际的日志消息会在执行阶段打印到控制台</p>\n<p>然而，一些重要的事情也会在解析阶段发生，包括变量的内存分配、作用域创建。提升这个术语指的是 JavaScript 引擎在遇到标识符，如变量、函数声明时所发生到事情；当发生声明提升时，它的行为就像是把它定义的字面量提升到当前作用域的顶部。鉴于此，上面到代码示例实际会变成如下情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\">  x = <span class=\"string\">'function scope'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    y = <span class=\"string\">'not block scope'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x, y); <span class=\"comment\">// function scope not block scope</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  innerFn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只有变量到声明会提升到它的作用域的顶部；在这个例子的 <code>if</code> 语句中，变量赋值依然发生在我们所赋值的地方。当然，我们到变量并不会移动，而是引擎行为表现如此，因此这样可以更好的帮助我们理解代码</p>\n<p>除了变量，函数声明也会被提升。结果就是，从 JavaScript 引擎到角度来看，代码实际上看起来是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x, y); <span class=\"comment\">// function scope not block scope</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  x = <span class=\"string\">'function scope'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    y = <span class=\"string\">'not block scope'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  innerFn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>innerFn</code> 的声明也被提升到了它的作用域的顶部。但是，记住它仅仅是函数声明被提升了，函数调用没有被提升。上面的代码并不会报任何错，因为 <code>innerFn</code> 在 <code>x</code> 和 <code>y</code> 赋值之前并没有被调用   </p>\n<h3 id=\"使用-let\"><a href=\"#使用-let\" class=\"headerlink\" title=\"使用 let\"></a>使用 <code>let</code></h3><p>即使使用了 ES2015，<code>var</code> 声明也不会创建块作用域。为了创建块作用域，我们需要在块里使用 <code>let</code> 或 <code>const</code> 声明。我们一会再看 <code>const</code>，首先来看下 <code>let</code></p>\n<p>表面上，<code>let</code> 和 <code>var</code>（我们用它来声明变量）的行为很相似：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> variable1;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> variable2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个简单的例子中，<code>var</code> 和 <code>let</code> 声明都做了相同的事情（在 <code>fn</code> 创建的作用域下初始化了一个新的变量）。为了创建一个新的块作用域，我们需要在块里使用 <code>let</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> variable1 = <span class=\"string\">'function scope'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> variable2 = <span class=\"string\">'block scope'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(variable1, variable2); <span class=\"comment\">// Uncaught ReferenceError: variable2 is not defined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();</span><br></pre></td></tr></table></figure>\n<p>在这个代码示例中，抛出了一个引用错误（reference error）；让我们来探索下为什么会这样。<code>fn</code> 函数创建了一个新作用域，里面声明了变量 <code>variable1</code>。然后我们在 <code>if</code> 语句的块里，声明了变量 <code>variable2</code>。然而，因为我们在块里使用了 <code>let</code> 声明，因此一个新的块作用域在 <code>fn</code> 的作用域下被创建了</p>\n<p>如果 <code>console.log</code> 语句也在 <code>if</code> 块中的话，那么它就和 <code>variable2</code> 在相同的作用域下了，也能够通过作用域链找到 <code>variable1</code>。但是因为 <code>console.log</code> 在外头，因此它不能访问 <code>variable2</code>，所以会抛出一个引用错误</p>\n<p>块作用域和函数作用域的行为相同，但是他们是为块创建的，而不是函数</p>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><p>当一个用 <code>var</code> 声明的常规变量被创建时，会被提升到它的作用域的顶部，然后并初始化一个 <code>undefined</code> 值，这样就允许我们能够在它赋值之前引用一个\b常规变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>记住，由于存在声明提升，代码实际看起来是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">x = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>这个行为会阻止抛出引用错误 <code>ReferenceError</code></p>\n<p>用 <code>let</code> 声明的变量也被提升了，但重要的是，他们并不会自动初始化值 <code>undefined</code>，因此意味着下面的代码会产生一个错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// Uncaught ReferenceError: x is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>这个错误是由暂时性死区（TDZ）引起的。TDZ 存在于作用域初始化到变量声明期间。为了修复这个错误（<code>ReferenceError</code>），我们需要在访问它前声明它：</p>\n<blockquote>\n<p>译者注：<a href=\"https://gist.github.com/rwaldron/ca35924d59ddc60a6aa165e1e4a3acda\" target=\"_blank\" rel=\"noopener\">TDZ</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">x = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>TDZ 这样设计是为了使开发更容易（试图引用一个还没声明的变量通常视为一个错误，而不是故意为之），因此这个错误可以立即提醒我们</p>\n<h3 id=\"使用-const\"><a href=\"#使用-const\" class=\"headerlink\" title=\"使用 const\"></a>使用 <code>const</code></h3><p>新的 <code>const</code> 被用来声明一个不可再次赋值的变量。它和 <code>let</code> 的在 TDZ 的行为非常相似，\b但是，<code>const</code> 变量必须初始化一个\b值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VAR1 = <span class=\"string\">'constant'</span>;</span><br></pre></td></tr></table></figure>\n<p>从现在开始， 变量 <code>VAR1</code> 的值将永远是 “constant” 这个字符串。如果我们试图\b再次对它赋值，\b我们会得到一个错误：</p>\n<blockquote>\n<p>TypeError: Assignment to <code>constant</code> variable</p>\n</blockquote>\n<p>如果我们试图创建一个没有初始化的 <code>const</code> 变量，我们将看到\b一个语法错误：</p>\n<blockquote>\n<p>SyntaxError: Missing initializer in <code>const</code> declaration</p>\n</blockquote>\n<p>相似地，一个 <code>const</code> 变量\b不能被再次声明。如果我们试图再次用 <code>const</code> 声明一个相同变量时，我们将得到一个不同类型的语法错误</p>\n<blockquote>\n<p>SyntaxError: Identifier ‘VAR1′ has already been declared</p>\n</blockquote>\n<p>和其他编程语言一样，常量是被用来保存我们的程序在生命周期里不希望改变的值</p>\n<p>记住 <code>let</code> 和 <code>const</code> \b都是 JavaScript \b的保留词，因此在严格模式下，是不能被用作标识符名称的（变量名，函数名等）。随着 ES2015 越来越普遍，<code>let</code> 和 <code>const</code> \b优于 <code>var</code> \b已形成一个共识，因为变量\b创建的作用域\b更与其他现代编程语言看齐，并且代码的行为也更好预测。\b<br>因此，在大多数情况下尽可能的\b避免使用 <code>var</code></p>\n<h3 id=\"不可变性\"><a href=\"#不可变性\" class=\"headerlink\" title=\"不可变性\"></a>不可变性</h3><p>用 <code>const</code> 声明的变量不能被再次赋值的，但是 <code>const</code> 声明的变量并不是完全不可变的。如果我们用对象或数组初始化了一个 <code>const</code> 变量，我们依然可以修改对象的属性和增加删除数组的元素 </p>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><ol>\n<li>在 <code>for</code> 循环里用 <code>let</code> 来初始化计数器变量  </li>\n<li>修复下面 <code>const</code> 的错误：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VAR1 = <span class=\"string\">'constant'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> VAR1 = <span class=\"string\">'constant2'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> VAR2;</span><br><span class=\"line\">VAR2 = <span class=\"string\">'constant'</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"成功是通过不断的练习和知识的积累，而非智力\"><a href=\"#成功是通过不断的练习和知识的积累，而非智力\" class=\"headerlink\" title=\"成功是通过不断的练习和知识的积累，而非智力\"></a>成功是通过不断的练习和知识的积累，而非智力</h4></blockquote>\n<hr>\n<blockquote>\n<ul>\n<li>本文仅代表原作者个人观点，译者不发表任何观点</li>\n<li>Markdown 文件由译者手动整理，如有勘误，欢迎指正</li>\n<li>译文和原文采用一样协议，侵删</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"【译】深入理解-ES2015，第一趴：块作用域-let-和-const\"><a href=\"#【译】深入理解-ES2015，第一趴：块作用域-let-和-const\" class=\"headerlink\" title=\"【译】深入理解 ES2015，第一趴：块作用域 let 和 const\"></a>【译】深入理解 ES2015，第一趴：块作用域 let 和 const</h2><blockquote>\n<ul>\n<li>原文地址：<a href=\"http://javascriptissexy.com/understanding-es2015-in-depth-part-1-block-scope-with-let-and-const/\" target=\"_blank\" rel=\"noopener\">http://javascriptissexy.com/understanding-es2015-in-depth-part-1-block-scope-with-let-and-const/</a></li>\n<li>原文作者：<a href=\"http://javascriptissexy.com/author/dan_wellman/\" target=\"_blank\" rel=\"noopener\">Dan Wellman</a></li>\n<li>Markdown 地址：<a href=\"https://github.com/Yangfan2016/learn-translate/blob/master/2-Understanding-ES2015-In-Depth-Part-1.md\" target=\"_blank\" rel=\"noopener\">https://github.com/Yangfan2016/learn-translate/blob/master/2-Understanding-ES2015-In-Depth-Part-1.md</a></li>\n<li>译者：<a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">Yangfan2016</a></li>\n</ul>\n</blockquote>\n<hr>\n<p>ES2015 最大的特性之一就是有了一个全新的作用域。在这个章节里，我们将开始学习什么是作用域。我们将继续学习如何创建新的作用域类型，以及给我们代码带来的好处</p>\n<h3 id=\"快速了解作用域\"><a href=\"#快速了解作用域\" class=\"headerlink\" title=\"快速了解作用域\"></a>快速了解作用域</h3><p>作用域描述为一个变量，函数，标识符可以被访问的区域。JavaScript 传统上有两种作用域类型：全局作用域和函数作用域，你定义变量的位置会影响其他代码是否可以访问。让我们来看一个简单的例子来阐述作用域的概念。想象一下，你的 JavaScript 文件只包含以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> globalVariable = <span class=\"string\">'This is global'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">globalFunction1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> innerVariable1 = <span class=\"string\">'Non-global variable 1'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">globalFunction2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> innerVariable2 = <span class=\"string\">'Non-global variable 2'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我们首先声明了一个变量 <code>globalVariable</code>。这个语句不在函数内部，所以会自动存到全局作用域中。浏览器用 <code>window</code> 对象创建了一个全局作用域，除了可以用 <code>globalVariable</code> 访问，我们还可以通过挂在 <code>window</code> 对象上的 <code>window.globalVariable</code> 访问。我们可以在文件的任何地方访问这个变量，这两个函数的之前或之后，甚至是在函数的内部（这就是为什么我们说全局变量是 “隐藏的”，我们可以在任何地方正确的访问他们），甚至是在附在同一页面的其他 JavaScript 文件</p>\n<p>在全局作用域里，我们定义了两个函数，<code>globalFunction1</code> 和 <code>globalFunction2</code>，就像全局变量一样，他们是 “可见的” 并且可以在这个文件的任何地方调用，也可以被同一页面的其他 JavaScript 文件调用。然而，当 JavaScript 引擎解析这些函数时，会分别创建他们自己的作用域。因吹斯听，这两个新的函数作用域被嵌套在全局作用域下，成为子作用域。这也就意味着函数内的代码可以访问全局变量，就像是和在函数 “内部的” 定义变量一样</p>\n<p>当我们试图访问 JavaScript 里的标识符时，浏览器会首先在当前作用域中查找。如果没有找到，浏览器会在当前作用域的父作用域中查找，并且继续向上查找，直到找到这个变量，或者到达全局作用域为止。如果这个变量在全局作用域里依旧没有找到的话，那么浏览器会抛出一个 <code>ReferenceError</code> 错误。这种嵌套的作用域被称作作用域链，而这个检查当前作用域和父作用域的过程被称作变量查找。这种查找只会向上查找作用域链，它永远不会在它的子作用域里查找 </p>\n<p>在上面的作用域链查找方向我们得知，例子中的 <code>innerVariable1</code> 变量只能在 <code>globalFunction1</code> 函数内部被访问，<code>innerVariable2</code> 变量只能在 <code>globalFunction2</code> 函数内部被访问。<code>innerVariable1</code> 变量不能在 <code>globalFunction2</code> 函数内部或全局作用域内被访问，<code>innerVariable2</code> 变量也不能在 <code>globalFunction1</code> 函数内部或全局作用域内被访问</p>\n<p>下面的图片是上面代码中作用域的抽象表示：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/1/14/1684c6ca914e0347?w=780&h=505&f=png&s=32363\" alt=\"js-scopes\" title=\"\">\n                </div>\n                <div class=\"image-caption\">js-scopes</div>\n            </figure>\n<blockquote>\n<h4 id=\"全局作用域包含了-globalVariable-以及两个内嵌的函数作用域。每个内嵌的函数作用域又包含自己的变量，但是这些变量不能被全局作用域访问。虚线表示的是作用域链的查找方向\"><a href=\"#全局作用域包含了-globalVariable-以及两个内嵌的函数作用域。每个内嵌的函数作用域又包含自己的变量，但是这些变量不能被全局作用域访问。虚线表示的是作用域链的查找方向\" class=\"headerlink\" title=\"全局作用域包含了 globalVariable 以及两个内嵌的函数作用域。每个内嵌的函数作用域又包含自己的变量，但是这些变量不能被全局作用域访问。虚线表示的是作用域链的查找方向\"></a>全局作用域包含了 <code>globalVariable</code> 以及两个内嵌的函数作用域。每个内嵌的函数作用域又包含自己的变量，但是这些变量不能被全局作用域访问。虚线表示的是作用域链的查找方向</h4></blockquote>\n<p>让我们来看下另一个简短的代码示例，彻底的了解下到目前为止我们所介绍到的作用域概念。假设 JavaScript 文件只包含如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> variable1;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> variable2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这段代码里，我们在全局作用域里声明了一个叫 <code>outer</code> 的函数。因为它是一个函数，所以它创建了一个函数作用域，嵌套在全局作用域下。在这个作用域下，我们又声明了一个叫 <code>variable1</code> 的变量和 一个叫 <code>inner</code> 的函数。因为 <code>inner</code> 也是一个函数，所以一个新的作用域又被创建了，嵌套在 <code>outer</code> 函数的作用域下</p>\n<p>在 <code>inner</code> 函数中，我们既可以访问 <code>variable2</code> 也可以访问 <code>variable1</code>。当我们在 <code>inner</code> 函数中访问 <code>variable1</code> 时，浏览器首先会在它的作用域里查找这个变量；当这个变量没有被找到时，会继续向上在父作用域里查找（也就是 <code>outer</code> 函数的作用域）。代码里作用域如下图所示：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/1/14/1684c6ca800aacd1?w=635&h=505&f=png&s=31601\" alt=\"js-scopes2\" title=\"\">\n                </div>\n                <div class=\"image-caption\">js-scopes2</div>\n            </figure>\n<blockquote>\n<h4 id=\"函数作用域可以嵌套在其他的函数作用域里，但是作用域链查找规则是一样的，因此在-inner-作用域下可以访问到-variable1-和-variable2，但是在-outer-作用域下只能访问-variable1\"><a href=\"#函数作用域可以嵌套在其他的函数作用域里，但是作用域链查找规则是一样的，因此在-inner-作用域下可以访问到-variable1-和-variable2，但是在-outer-作用域下只能访问-variable1\" class=\"headerlink\" title=\"函数作用域可以嵌套在其他的函数作用域里，但是作用域链查找规则是一样的，因此在 inner 作用域下可以访问到  variable1 和 variable2，但是在 outer 作用域下只能访问 variable1\"></a>函数作用域可以嵌套在其他的函数作用域里，但是作用域链查找规则是一样的，因此在 <code>inner</code> 作用域下可以访问到  <code>variable1</code> 和 <code>variable2</code>，但是在 <code>outer</code> 作用域下只能访问 <code>variable1</code></h4></blockquote>\n<p>这个示例中的作用域链比较长，从 <code>inner</code> 函数延伸到 <code>outer</code> 函数，直到全局对象 <code>window</code></p>\n<h3 id=\"JavaScript-的新作用域\"><a href=\"#JavaScript-的新作用域\" class=\"headerlink\" title=\"JavaScript 的新作用域\"></a>JavaScript 的新作用域</h3><p>在 JavaScript 中，一个块是由一个或多个语句用大括号包裹起来的。诸如 <code>if</code>，<code>for</code>，<code>while</code> 的条件表达式，都是用块基于特定的条件来执行块语句</p>\n<p>其他流行的常见的编程语言都有块作用域，JavaScript 作用域中，直到如今却只有全局作用域和函数作用域，因此使我们变得很困惑。ES2015 在 JavaScript 新增了块作用域，对于我们的代码来说有很大的影响，并且对于那些熟悉其他编程语言的开发者来说变得更直观</p>\n<p>块作用域意味着一个块可以创建它自己的作用域，而不是简单的存在于它最近到父级函数作用域或全局作用域下。让我们在认识块作用域是如何工作的之前，先来了解下传统上块里的 JavaScript 是如何工作的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"string\">'function scope'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"string\">'not block scope'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x, y); <span class=\"comment\">// function scope not block scope</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  innerFn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>var</code> 语句是不能够创建块作用域的，即使是在块里，因此 <code>console.log</code> 语句可以访问到 <code>x</code> 和 <code>y</code> 变量。 <code>fn</code> 函数创建了一个函数作用域而且 <code>x</code> 和 <code>y</code> 变量都是可以通过作用域内的作用域链访问到 </p>\n<h3 id=\"声明提升\"><a href=\"#声明提升\" class=\"headerlink\" title=\"声明提升\"></a>声明提升</h3><p>理解提升的概念是理解 JavaScript 如何工作的基础。JavaScript 有两个阶段：解析阶段（JavaScript 引擎读取所有的代码）、执行阶段（执行已解析的代码）。大多数的事情都发生在第二阶段；例如，当你使用 <code>console.log</code> 语句时，实际的日志消息会在执行阶段打印到控制台</p>\n<p>然而，一些重要的事情也会在解析阶段发生，包括变量的内存分配、作用域创建。提升这个术语指的是 JavaScript 引擎在遇到标识符，如变量、函数声明时所发生到事情；当发生声明提升时，它的行为就像是把它定义的字面量提升到当前作用域的顶部。鉴于此，上面到代码示例实际会变成如下情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\">  x = <span class=\"string\">'function scope'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    y = <span class=\"string\">'not block scope'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x, y); <span class=\"comment\">// function scope not block scope</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  innerFn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只有变量到声明会提升到它的作用域的顶部；在这个例子的 <code>if</code> 语句中，变量赋值依然发生在我们所赋值的地方。当然，我们到变量并不会移动，而是引擎行为表现如此，因此这样可以更好的帮助我们理解代码</p>\n<p>除了变量，函数声明也会被提升。结果就是，从 JavaScript 引擎到角度来看，代码实际上看起来是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x, y); <span class=\"comment\">// function scope not block scope</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  x = <span class=\"string\">'function scope'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    y = <span class=\"string\">'not block scope'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  innerFn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>innerFn</code> 的声明也被提升到了它的作用域的顶部。但是，记住它仅仅是函数声明被提升了，函数调用没有被提升。上面的代码并不会报任何错，因为 <code>innerFn</code> 在 <code>x</code> 和 <code>y</code> 赋值之前并没有被调用   </p>\n<h3 id=\"使用-let\"><a href=\"#使用-let\" class=\"headerlink\" title=\"使用 let\"></a>使用 <code>let</code></h3><p>即使使用了 ES2015，<code>var</code> 声明也不会创建块作用域。为了创建块作用域，我们需要在块里使用 <code>let</code> 或 <code>const</code> 声明。我们一会再看 <code>const</code>，首先来看下 <code>let</code></p>\n<p>表面上，<code>let</code> 和 <code>var</code>（我们用它来声明变量）的行为很相似：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> variable1;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> variable2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个简单的例子中，<code>var</code> 和 <code>let</code> 声明都做了相同的事情（在 <code>fn</code> 创建的作用域下初始化了一个新的变量）。为了创建一个新的块作用域，我们需要在块里使用 <code>let</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> variable1 = <span class=\"string\">'function scope'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> variable2 = <span class=\"string\">'block scope'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(variable1, variable2); <span class=\"comment\">// Uncaught ReferenceError: variable2 is not defined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();</span><br></pre></td></tr></table></figure>\n<p>在这个代码示例中，抛出了一个引用错误（reference error）；让我们来探索下为什么会这样。<code>fn</code> 函数创建了一个新作用域，里面声明了变量 <code>variable1</code>。然后我们在 <code>if</code> 语句的块里，声明了变量 <code>variable2</code>。然而，因为我们在块里使用了 <code>let</code> 声明，因此一个新的块作用域在 <code>fn</code> 的作用域下被创建了</p>\n<p>如果 <code>console.log</code> 语句也在 <code>if</code> 块中的话，那么它就和 <code>variable2</code> 在相同的作用域下了，也能够通过作用域链找到 <code>variable1</code>。但是因为 <code>console.log</code> 在外头，因此它不能访问 <code>variable2</code>，所以会抛出一个引用错误</p>\n<p>块作用域和函数作用域的行为相同，但是他们是为块创建的，而不是函数</p>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><p>当一个用 <code>var</code> 声明的常规变量被创建时，会被提升到它的作用域的顶部，然后并初始化一个 <code>undefined</code> 值，这样就允许我们能够在它赋值之前引用一个\b常规变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>记住，由于存在声明提升，代码实际看起来是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">x = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>这个行为会阻止抛出引用错误 <code>ReferenceError</code></p>\n<p>用 <code>let</code> 声明的变量也被提升了，但重要的是，他们并不会自动初始化值 <code>undefined</code>，因此意味着下面的代码会产生一个错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// Uncaught ReferenceError: x is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>这个错误是由暂时性死区（TDZ）引起的。TDZ 存在于作用域初始化到变量声明期间。为了修复这个错误（<code>ReferenceError</code>），我们需要在访问它前声明它：</p>\n<blockquote>\n<p>译者注：<a href=\"https://gist.github.com/rwaldron/ca35924d59ddc60a6aa165e1e4a3acda\" target=\"_blank\" rel=\"noopener\">TDZ</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">x = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>TDZ 这样设计是为了使开发更容易（试图引用一个还没声明的变量通常视为一个错误，而不是故意为之），因此这个错误可以立即提醒我们</p>\n<h3 id=\"使用-const\"><a href=\"#使用-const\" class=\"headerlink\" title=\"使用 const\"></a>使用 <code>const</code></h3><p>新的 <code>const</code> 被用来声明一个不可再次赋值的变量。它和 <code>let</code> 的在 TDZ 的行为非常相似，\b但是，<code>const</code> 变量必须初始化一个\b值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VAR1 = <span class=\"string\">'constant'</span>;</span><br></pre></td></tr></table></figure>\n<p>从现在开始， 变量 <code>VAR1</code> 的值将永远是 “constant” 这个字符串。如果我们试图\b再次对它赋值，\b我们会得到一个错误：</p>\n<blockquote>\n<p>TypeError: Assignment to <code>constant</code> variable</p>\n</blockquote>\n<p>如果我们试图创建一个没有初始化的 <code>const</code> 变量，我们将看到\b一个语法错误：</p>\n<blockquote>\n<p>SyntaxError: Missing initializer in <code>const</code> declaration</p>\n</blockquote>\n<p>相似地，一个 <code>const</code> 变量\b不能被再次声明。如果我们试图再次用 <code>const</code> 声明一个相同变量时，我们将得到一个不同类型的语法错误</p>\n<blockquote>\n<p>SyntaxError: Identifier ‘VAR1′ has already been declared</p>\n</blockquote>\n<p>和其他编程语言一样，常量是被用来保存我们的程序在生命周期里不希望改变的值</p>\n<p>记住 <code>let</code> 和 <code>const</code> \b都是 JavaScript \b的保留词，因此在严格模式下，是不能被用作标识符名称的（变量名，函数名等）。随着 ES2015 越来越普遍，<code>let</code> 和 <code>const</code> \b优于 <code>var</code> \b已形成一个共识，因为变量\b创建的作用域\b更与其他现代编程语言看齐，并且代码的行为也更好预测。\b<br>因此，在大多数情况下尽可能的\b避免使用 <code>var</code></p>\n<h3 id=\"不可变性\"><a href=\"#不可变性\" class=\"headerlink\" title=\"不可变性\"></a>不可变性</h3><p>用 <code>const</code> 声明的变量不能被再次赋值的，但是 <code>const</code> 声明的变量并不是完全不可变的。如果我们用对象或数组初始化了一个 <code>const</code> 变量，我们依然可以修改对象的属性和增加删除数组的元素 </p>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><ol>\n<li>在 <code>for</code> 循环里用 <code>let</code> 来初始化计数器变量  </li>\n<li>修复下面 <code>const</code> 的错误：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VAR1 = <span class=\"string\">'constant'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> VAR1 = <span class=\"string\">'constant2'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> VAR2;</span><br><span class=\"line\">VAR2 = <span class=\"string\">'constant'</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"成功是通过不断的练习和知识的积累，而非智力\"><a href=\"#成功是通过不断的练习和知识的积累，而非智力\" class=\"headerlink\" title=\"成功是通过不断的练习和知识的积累，而非智力\"></a>成功是通过不断的练习和知识的积累，而非智力</h4></blockquote>\n<hr>\n<blockquote>\n<ul>\n<li>本文仅代表原作者个人观点，译者不发表任何观点</li>\n<li>Markdown 文件由译者手动整理，如有勘误，欢迎指正</li>\n<li>译文和原文采用一样协议，侵删</li>\n</ul>\n</blockquote>\n"},{"title":"十大经典排序算法-JavaScript篇","date":"2018-08-13T07:28:20.000Z","_content":"\n> 备注 \n- ##### 语法为 ES6    \n- ##### 以下排序默认按升序排序    \n- ##### 测试案例均为自然数  \n\n### 前言\n排序作为十分经典的算法之一。是每一个软件工程师的必备技能，学好排序算法，可以提高软件的运行效率，最重要的是掌握其算法设计思想，才能举一反三应用到实际的实践中，为己所用。\n\n### 排序算法简介\n\n1. 按照数据的大小，排序算法可以分为内部排序和外部排序（数据较大，需要借助外存）\n2. 内部排序，又可以细分为 交换排序、插入排序、选择排序\n\n\n\n### 1. 冒泡排序\n\n#### 简介：两两元素进行比较，较大者放置后头，类似水中的气泡较大者浮在水的上端\n\n#### 性能\n平均时间复杂度 O(n^2)\n\n#### 代码：\n```js\nfunction bubble(arr) {\n    let len = arr.length,\n        i = 0,\n        j = 0;\n    // 循环 n-1 趟\n    for (i = 0; i < len; i++) {\n        // 每趟 需比较 n-i-1 次\n        for (j = 0; j < len - 1 - i; j++) {\n            // 如果后面的元素较大，则交换两者顺序\n            if (arr[j + 1] < arr[j]) {\n                arr[j] = [arr[j + 1], arr[j + 1] = arr[j]][0];\n            }\n        }\n    }\n    return arr;\n}\n```\n\n### 2. 快速排序\n\n#### 简介：取一个元素为基准，把序列分成两部分，小于基准的放到它的左面，大于等于的放到它的右面，然后在把左面和右面的子序列再进行上述的拆分，直到子序列不可再分割（小于2个元素），最终达到整个序列有序\n\n#### 性能\n平均时间复杂度 O(n*logn)\n\n#### 代码\n```js\nfunction quick(arr) {\n    // 不可再分割，直接退出\n    if (arr.length <= 1) return arr;\n    let len = arr.length,\n        middle = len >> 1,\n        pivot = (len--) && arr.splice(middle, 1)[0], // 取中间为基准数，并从数组中移除\n        left = [],\n        right = [],\n        i = 0;\n\n    for (i = 0; i < len; i++) {\n        // 分组 小于基准的放到左边，反之\n        if (arr[i] < pivot) {\n            left.push(arr[i]);\n        } else {\n            right.push(arr[i]);\n        }\n    }\n    return [...quick(left), pivot, ...quick(right)]; // 合并\n}\n```\n\n### 3. 简单选择排序\n\n#### 简介：假设一个有序序列，然后由剩余的元素中选出最小的（最大的）扔到有序序列，直到无序序列元素为空，从而达到整个序列有序\n\n#### 性能\n平均时间复杂度 O(n^2)\n\n#### 代码\n```js\nfunction selection(arr) {\n    let len = arr.length,\n        i = 0,\n        j = 0,\n        min = i;\n    // 循环 n-1 趟\n    for (i = 0; i < len - 1; i++) {\n        min = i; // 假设每趟的第一个数为最小值\n        for (j = i + 1; j < len; j++) {\n            // 如果后面的树大于最小数（min对应的数），则重新对最小值的索引赋值\n            if (arr[j] < arr[min]) {\n                min = j;\n            }\n        }\n        // 将最小数置于该趟排序的第一个位置\n        arr[i] = [arr[min], arr[min] = arr[i]][0];\n    }\n    return arr;\n}\n```\n\n### 4. 堆排序\n\n#### 简介：是简单选择排序的改进版，利用堆结构\n\n#### 性能\n平均时间复杂度 O(n*logn)\n\n#### 代码\n```js\n// 堆排序\nfunction heapSort(arr) {\n    var n = arr.length,\n        i, j;\n\n    // 筛选\n    var sift = (k, m, r) => {\n        var p = k, // 父结点\n            c = p * 2 + 1; // 左结点（默认最大）\n\n        while (c <= m) { // 左结点(c=m)和左右结点(c<m)\n            if (c < m && r[c + 1] > r[c]) c++; // 选出左右结点中的最大者，指向左结点\n            if (r[p] > r[c]) break; // 父结点大于左结点 顺序正确，退出循环\n            else {\n                r[p] = [r[c], r[c] = r[p]][0]; // 将大的一方置于顶部（父结点）\n                p = c; // 向下重新指向父结点\n                c = p * 2 + 1; // 向下重新指向左结点\n            }\n        }\n    };\n\n    // 构建堆\n    for (i = (n / 2 | 0) - 1; i >= 0; i--) { // 从最后一个分支结点开始向上逆序遍历 \n        sift(i, n - 1, arr);\n    }\n    // 排序\n    for (j = n - 1; j >= 0; j--) {\n        arr[0] = [arr[j], arr[j] = arr[0]][0]; // 将最大的结点存于数组的最后一位\n        n--; // 减少数组长度，排除有序序列\n        sift(0, n - 1, arr, true);\n    }\n\n    return arr;\n}\n```\n\n### 5. 直接插入排序\n\n#### 简介：假设数组的一有序序列，从后面的无序序列中，扫描，与有序序列比较，插入到合适位置\n\n#### 性能\n平均时间复杂度 O(n^2)\n\n#### 代码\n```js\nfunction insertion(arr) {\n    let len = arr.length,\n        i = 0,\n        j = 0,\n        temp;\n\n    // [7,6,2,5,4,3,1]\n    // 从第二个元素开始循环\n    for (i = 1; i < len; i++) {\n        temp = arr[i]; // 存储当前元素\n        j = i - 1; // 待插入队列的序号\n        while (j >= 0 && temp < arr[j]) { // 当没有出界 且 当前元素比待插序列元素小时，进行待插序列的元素向后移动一位\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = temp; // 将当前元素插入到待插序列的下一位\n    }\n    return arr;\n}\n\n```\n\n### 6. 希尔排序\n\n#### 简介：一种改进版的插入排序，每次比较的是用增量分割的序列，达到部分有序，随着增量依次递减，序列逐渐达到完全有序\n\n#### 性能\n平均时间复杂度 O(n*logn)\n\n#### 代码\n```js\nfunction shell(arr) {\n    let len = arr.length,\n        i = 0,\n        j = 0,\n        temp,\n        gap = 1;\n    \n    gap = len / 3 | 0; // 计算增量\n\n    while (gap >= 1) { // 增量大于2时，进行简单插入排序\n        for (i = gap; i < len; i++) {\n            temp = arr[i];\n            j = i - gap;\n            while (j >= 0 && temp < arr[j]) {\n                arr[j + gap] = arr[j];\n                j -= gap;\n            }\n            arr[j + gap] = temp;\n        }\n        gap = gap / 3 | 0; // 增量减少\n    }\n\n    return arr;\n}\n```\n\n### 7. 归并排序\n\n#### 简介：利用分治法，将序列分为许多小子序列，然后每个子序列进行排序，然后逐次合并，最后达到整体有序，这里用的是二路归并排序（归并排序中最简单的一种）\n\n#### 性能\n平均时间复杂度 O(n*logn)\n\n#### 代码\n```js\nfunction merge(arr) {\n    return ({\n        sortArr(leftArr, rightArr) { // 排序\n            let res = [];\n            // 合并\n            while (leftArr.length * rightArr.length !== 0) {\n                if (leftArr[0] < rightArr[0]) {\n                    res.push(leftArr.shift());\n                } else {\n                    res.push(rightArr.shift());\n                }\n            }\n            leftArr.length > 0 && (res = [...res, ...leftArr]);\n            rightArr.length > 0 && (res = [...res, ...rightArr]);\n            return res;\n        },\n        mergeArr(brr) { // 合并\n            if (brr.length <= 1) return brr;\n            let len = brr.length,\n                left = [],\n                right = [],\n                middle;\n            middle = len >> 1;\n            // 分组\n            left = brr.slice(0, middle);\n            right = brr.slice(middle);\n            return this.sortArr(this.mergeArr(left), this.mergeArr(right));\n        }\n    }).mergeArr(arr)\n}\n\n```\n\n### 8. 计数排序\n\n#### 简介：利用分配概念，将元素一一映射到桶中，每个桶只存储单一值\n\n#### 性能\n平均时间复杂度 O(n+m)\n\n#### 代码\n```js\nfunction countingSort(arr) {\n    var max = Math.max(...arr),\n        min = Math.min(...arr),\n        len = arr.length,\n        i,\n        bucket = [],\n        result = [];\n\n    // 入桶\n    for (i = 0; i < len; i++) {\n        var item = arr[i];\n        bucket[item] = bucket[item] || 0; // 建立映射表\n        bucket[item]++; // 相同元素对应到同一映射表中，映射表增加1 \n    }\n\n    // 出桶\n    for (i = min; i <= max; i++) {\n        var count = bucket[i]; // 取每个映射表的元素数量\n        while (count > 0) { // 如果数量大于0 ，重复输出该元素 \n            result.push(i);\n            count--;\n        }\n    }\n\n    return result;\n}\n\n```\n\n### 9. 桶排序\n\n#### 简介：利用分配概念，每个桶存储一定范围的数值，然后桶内在进行排序，最后所有桶的元素出桶达到完全有序\n\n#### 性能\n平均时间复杂度 O(n+m)\n\n#### 代码\n```js\nfunction bucketSort(arr, num) {\n    var len = arr.length,\n        max = Math.max(...arr),\n        min = Math.min(...arr),\n        result = [],\n        bucket = [],\n        space,\n        i;\n    // 至少2个桶\n    num = num > 2 ? num : 2;\n    // 计算每个桶的容量\n    space = ((max - min) / num | 0) + 1;\n\n    // 入桶\n    for (i = 0; i < len; i++) {\n        var item = arr[i];\n        var index = (item - min) / space | 0; // 计算元素入桶的位置，要放入哪个桶\n\n        bucket[index] = bucket[index] || [];\n        bucket[index].push(item);\n        if (bucket[index].length > 1) {\n            // 桶里的元素再进行排序（这里使用的是简单插入排序）\n            bucket[index] = insertion(bucket[index]);\n        }\n    }\n\n    // 出桶\n    for (i = 0; i < num; i++) {\n        var list = bucket[i] || [];\n        if (list.length > 0) {\n            result = result.concat(list);\n        }\n    }\n\n    return result;\n}\n```\n### 10. 基数排序\n\n#### 简介：利用分配概念，根据元素的基数来分配桶\n\n- 最低位优先法，简称LSD法：先从最低位开始排序，再对次低位排序，直到对最高位排序后得到一个有序序列\n\n- 最高位优先法，简称MSD法：先从最高位开始排序，再逐个对各分组按次高位进行子排序，循环直到最低位\n\n#### 性能\n平均时间复杂度 O(n*m)\n\n#### 代码\n```js\nfunction radixSort(arr) {\n    var len = arr.length,\n        max = Math.max(...arr),\n        bucket = [],\n        result = [],\n        i,\n        j,\n        k,\n        hight = String(max).length; // 计算最大数的位数\n\n    for (i = 1; i <= hight; i++) { // 其实就是循环hight次的计数排序\n        result = [];\n        bucket = [];\n        // 入桶\n        for (j = 0; j < len; j++) {\n            var item = arr[j] + \"\"; // 这里转换为string 类型，方便取具体位数的值，当然mod10也可以\n            var index = item.length - i < 0 ? 0 : item.substr(item.length - i, 1); // 取第(item.len-i+1)位的数\n            bucket[index] = bucket[index] || []; // 这里就和计数排序一样了\n            bucket[index].push(+item);\n        }\n        // 出桶\n        for (k = 0; k < bucket.length; k++) { \n            if (bucket[k] && bucket[k].length > 0) {\n                result = result.concat(bucket[k]);\n            }\n        }\n\n        arr = result;\n    }\n\n    return result;\n}\n```\n\n\n### 性能比较\n\n![sort](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/sort.png)\n\n\n#### 参考\n\n1. [《十大经典排序算法》](https://github.com/Yangfan2016/JS-Sorting-Algorithm)","source":"_posts/十大经典排序算法-JavaScript篇.md","raw":"---\ntitle: 十大经典排序算法-JavaScript篇\ndate: 2018-08-13 15:28:20\ntags: [算法]\n---\n\n> 备注 \n- ##### 语法为 ES6    \n- ##### 以下排序默认按升序排序    \n- ##### 测试案例均为自然数  \n\n### 前言\n排序作为十分经典的算法之一。是每一个软件工程师的必备技能，学好排序算法，可以提高软件的运行效率，最重要的是掌握其算法设计思想，才能举一反三应用到实际的实践中，为己所用。\n\n### 排序算法简介\n\n1. 按照数据的大小，排序算法可以分为内部排序和外部排序（数据较大，需要借助外存）\n2. 内部排序，又可以细分为 交换排序、插入排序、选择排序\n\n\n\n### 1. 冒泡排序\n\n#### 简介：两两元素进行比较，较大者放置后头，类似水中的气泡较大者浮在水的上端\n\n#### 性能\n平均时间复杂度 O(n^2)\n\n#### 代码：\n```js\nfunction bubble(arr) {\n    let len = arr.length,\n        i = 0,\n        j = 0;\n    // 循环 n-1 趟\n    for (i = 0; i < len; i++) {\n        // 每趟 需比较 n-i-1 次\n        for (j = 0; j < len - 1 - i; j++) {\n            // 如果后面的元素较大，则交换两者顺序\n            if (arr[j + 1] < arr[j]) {\n                arr[j] = [arr[j + 1], arr[j + 1] = arr[j]][0];\n            }\n        }\n    }\n    return arr;\n}\n```\n\n### 2. 快速排序\n\n#### 简介：取一个元素为基准，把序列分成两部分，小于基准的放到它的左面，大于等于的放到它的右面，然后在把左面和右面的子序列再进行上述的拆分，直到子序列不可再分割（小于2个元素），最终达到整个序列有序\n\n#### 性能\n平均时间复杂度 O(n*logn)\n\n#### 代码\n```js\nfunction quick(arr) {\n    // 不可再分割，直接退出\n    if (arr.length <= 1) return arr;\n    let len = arr.length,\n        middle = len >> 1,\n        pivot = (len--) && arr.splice(middle, 1)[0], // 取中间为基准数，并从数组中移除\n        left = [],\n        right = [],\n        i = 0;\n\n    for (i = 0; i < len; i++) {\n        // 分组 小于基准的放到左边，反之\n        if (arr[i] < pivot) {\n            left.push(arr[i]);\n        } else {\n            right.push(arr[i]);\n        }\n    }\n    return [...quick(left), pivot, ...quick(right)]; // 合并\n}\n```\n\n### 3. 简单选择排序\n\n#### 简介：假设一个有序序列，然后由剩余的元素中选出最小的（最大的）扔到有序序列，直到无序序列元素为空，从而达到整个序列有序\n\n#### 性能\n平均时间复杂度 O(n^2)\n\n#### 代码\n```js\nfunction selection(arr) {\n    let len = arr.length,\n        i = 0,\n        j = 0,\n        min = i;\n    // 循环 n-1 趟\n    for (i = 0; i < len - 1; i++) {\n        min = i; // 假设每趟的第一个数为最小值\n        for (j = i + 1; j < len; j++) {\n            // 如果后面的树大于最小数（min对应的数），则重新对最小值的索引赋值\n            if (arr[j] < arr[min]) {\n                min = j;\n            }\n        }\n        // 将最小数置于该趟排序的第一个位置\n        arr[i] = [arr[min], arr[min] = arr[i]][0];\n    }\n    return arr;\n}\n```\n\n### 4. 堆排序\n\n#### 简介：是简单选择排序的改进版，利用堆结构\n\n#### 性能\n平均时间复杂度 O(n*logn)\n\n#### 代码\n```js\n// 堆排序\nfunction heapSort(arr) {\n    var n = arr.length,\n        i, j;\n\n    // 筛选\n    var sift = (k, m, r) => {\n        var p = k, // 父结点\n            c = p * 2 + 1; // 左结点（默认最大）\n\n        while (c <= m) { // 左结点(c=m)和左右结点(c<m)\n            if (c < m && r[c + 1] > r[c]) c++; // 选出左右结点中的最大者，指向左结点\n            if (r[p] > r[c]) break; // 父结点大于左结点 顺序正确，退出循环\n            else {\n                r[p] = [r[c], r[c] = r[p]][0]; // 将大的一方置于顶部（父结点）\n                p = c; // 向下重新指向父结点\n                c = p * 2 + 1; // 向下重新指向左结点\n            }\n        }\n    };\n\n    // 构建堆\n    for (i = (n / 2 | 0) - 1; i >= 0; i--) { // 从最后一个分支结点开始向上逆序遍历 \n        sift(i, n - 1, arr);\n    }\n    // 排序\n    for (j = n - 1; j >= 0; j--) {\n        arr[0] = [arr[j], arr[j] = arr[0]][0]; // 将最大的结点存于数组的最后一位\n        n--; // 减少数组长度，排除有序序列\n        sift(0, n - 1, arr, true);\n    }\n\n    return arr;\n}\n```\n\n### 5. 直接插入排序\n\n#### 简介：假设数组的一有序序列，从后面的无序序列中，扫描，与有序序列比较，插入到合适位置\n\n#### 性能\n平均时间复杂度 O(n^2)\n\n#### 代码\n```js\nfunction insertion(arr) {\n    let len = arr.length,\n        i = 0,\n        j = 0,\n        temp;\n\n    // [7,6,2,5,4,3,1]\n    // 从第二个元素开始循环\n    for (i = 1; i < len; i++) {\n        temp = arr[i]; // 存储当前元素\n        j = i - 1; // 待插入队列的序号\n        while (j >= 0 && temp < arr[j]) { // 当没有出界 且 当前元素比待插序列元素小时，进行待插序列的元素向后移动一位\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = temp; // 将当前元素插入到待插序列的下一位\n    }\n    return arr;\n}\n\n```\n\n### 6. 希尔排序\n\n#### 简介：一种改进版的插入排序，每次比较的是用增量分割的序列，达到部分有序，随着增量依次递减，序列逐渐达到完全有序\n\n#### 性能\n平均时间复杂度 O(n*logn)\n\n#### 代码\n```js\nfunction shell(arr) {\n    let len = arr.length,\n        i = 0,\n        j = 0,\n        temp,\n        gap = 1;\n    \n    gap = len / 3 | 0; // 计算增量\n\n    while (gap >= 1) { // 增量大于2时，进行简单插入排序\n        for (i = gap; i < len; i++) {\n            temp = arr[i];\n            j = i - gap;\n            while (j >= 0 && temp < arr[j]) {\n                arr[j + gap] = arr[j];\n                j -= gap;\n            }\n            arr[j + gap] = temp;\n        }\n        gap = gap / 3 | 0; // 增量减少\n    }\n\n    return arr;\n}\n```\n\n### 7. 归并排序\n\n#### 简介：利用分治法，将序列分为许多小子序列，然后每个子序列进行排序，然后逐次合并，最后达到整体有序，这里用的是二路归并排序（归并排序中最简单的一种）\n\n#### 性能\n平均时间复杂度 O(n*logn)\n\n#### 代码\n```js\nfunction merge(arr) {\n    return ({\n        sortArr(leftArr, rightArr) { // 排序\n            let res = [];\n            // 合并\n            while (leftArr.length * rightArr.length !== 0) {\n                if (leftArr[0] < rightArr[0]) {\n                    res.push(leftArr.shift());\n                } else {\n                    res.push(rightArr.shift());\n                }\n            }\n            leftArr.length > 0 && (res = [...res, ...leftArr]);\n            rightArr.length > 0 && (res = [...res, ...rightArr]);\n            return res;\n        },\n        mergeArr(brr) { // 合并\n            if (brr.length <= 1) return brr;\n            let len = brr.length,\n                left = [],\n                right = [],\n                middle;\n            middle = len >> 1;\n            // 分组\n            left = brr.slice(0, middle);\n            right = brr.slice(middle);\n            return this.sortArr(this.mergeArr(left), this.mergeArr(right));\n        }\n    }).mergeArr(arr)\n}\n\n```\n\n### 8. 计数排序\n\n#### 简介：利用分配概念，将元素一一映射到桶中，每个桶只存储单一值\n\n#### 性能\n平均时间复杂度 O(n+m)\n\n#### 代码\n```js\nfunction countingSort(arr) {\n    var max = Math.max(...arr),\n        min = Math.min(...arr),\n        len = arr.length,\n        i,\n        bucket = [],\n        result = [];\n\n    // 入桶\n    for (i = 0; i < len; i++) {\n        var item = arr[i];\n        bucket[item] = bucket[item] || 0; // 建立映射表\n        bucket[item]++; // 相同元素对应到同一映射表中，映射表增加1 \n    }\n\n    // 出桶\n    for (i = min; i <= max; i++) {\n        var count = bucket[i]; // 取每个映射表的元素数量\n        while (count > 0) { // 如果数量大于0 ，重复输出该元素 \n            result.push(i);\n            count--;\n        }\n    }\n\n    return result;\n}\n\n```\n\n### 9. 桶排序\n\n#### 简介：利用分配概念，每个桶存储一定范围的数值，然后桶内在进行排序，最后所有桶的元素出桶达到完全有序\n\n#### 性能\n平均时间复杂度 O(n+m)\n\n#### 代码\n```js\nfunction bucketSort(arr, num) {\n    var len = arr.length,\n        max = Math.max(...arr),\n        min = Math.min(...arr),\n        result = [],\n        bucket = [],\n        space,\n        i;\n    // 至少2个桶\n    num = num > 2 ? num : 2;\n    // 计算每个桶的容量\n    space = ((max - min) / num | 0) + 1;\n\n    // 入桶\n    for (i = 0; i < len; i++) {\n        var item = arr[i];\n        var index = (item - min) / space | 0; // 计算元素入桶的位置，要放入哪个桶\n\n        bucket[index] = bucket[index] || [];\n        bucket[index].push(item);\n        if (bucket[index].length > 1) {\n            // 桶里的元素再进行排序（这里使用的是简单插入排序）\n            bucket[index] = insertion(bucket[index]);\n        }\n    }\n\n    // 出桶\n    for (i = 0; i < num; i++) {\n        var list = bucket[i] || [];\n        if (list.length > 0) {\n            result = result.concat(list);\n        }\n    }\n\n    return result;\n}\n```\n### 10. 基数排序\n\n#### 简介：利用分配概念，根据元素的基数来分配桶\n\n- 最低位优先法，简称LSD法：先从最低位开始排序，再对次低位排序，直到对最高位排序后得到一个有序序列\n\n- 最高位优先法，简称MSD法：先从最高位开始排序，再逐个对各分组按次高位进行子排序，循环直到最低位\n\n#### 性能\n平均时间复杂度 O(n*m)\n\n#### 代码\n```js\nfunction radixSort(arr) {\n    var len = arr.length,\n        max = Math.max(...arr),\n        bucket = [],\n        result = [],\n        i,\n        j,\n        k,\n        hight = String(max).length; // 计算最大数的位数\n\n    for (i = 1; i <= hight; i++) { // 其实就是循环hight次的计数排序\n        result = [];\n        bucket = [];\n        // 入桶\n        for (j = 0; j < len; j++) {\n            var item = arr[j] + \"\"; // 这里转换为string 类型，方便取具体位数的值，当然mod10也可以\n            var index = item.length - i < 0 ? 0 : item.substr(item.length - i, 1); // 取第(item.len-i+1)位的数\n            bucket[index] = bucket[index] || []; // 这里就和计数排序一样了\n            bucket[index].push(+item);\n        }\n        // 出桶\n        for (k = 0; k < bucket.length; k++) { \n            if (bucket[k] && bucket[k].length > 0) {\n                result = result.concat(bucket[k]);\n            }\n        }\n\n        arr = result;\n    }\n\n    return result;\n}\n```\n\n\n### 性能比较\n\n![sort](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/sort.png)\n\n\n#### 参考\n\n1. [《十大经典排序算法》](https://github.com/Yangfan2016/JS-Sorting-Algorithm)","slug":"十大经典排序算法-JavaScript篇","published":1,"updated":"2019-04-25T09:01:16.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaulm001taeyypyo2zlre","content":"<blockquote>\n<p>备注 </p>\n<ul>\n<li><h5 id=\"语法为-ES6\"><a href=\"#语法为-ES6\" class=\"headerlink\" title=\"语法为 ES6\"></a>语法为 ES6</h5></li>\n<li><h5 id=\"以下排序默认按升序排序\"><a href=\"#以下排序默认按升序排序\" class=\"headerlink\" title=\"以下排序默认按升序排序\"></a>以下排序默认按升序排序</h5></li>\n<li><h5 id=\"测试案例均为自然数\"><a href=\"#测试案例均为自然数\" class=\"headerlink\" title=\"测试案例均为自然数\"></a>测试案例均为自然数</h5></li>\n</ul>\n</blockquote>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>排序作为十分经典的算法之一。是每一个软件工程师的必备技能，学好排序算法，可以提高软件的运行效率，最重要的是掌握其算法设计思想，才能举一反三应用到实际的实践中，为己所用。</p>\n<h3 id=\"排序算法简介\"><a href=\"#排序算法简介\" class=\"headerlink\" title=\"排序算法简介\"></a>排序算法简介</h3><ol>\n<li>按照数据的大小，排序算法可以分为内部排序和外部排序（数据较大，需要借助外存）</li>\n<li>内部排序，又可以细分为 交换排序、插入排序、选择排序</li>\n</ol>\n<h3 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1. 冒泡排序\"></a>1. 冒泡排序</h3><h4 id=\"简介：两两元素进行比较，较大者放置后头，类似水中的气泡较大者浮在水的上端\"><a href=\"#简介：两两元素进行比较，较大者放置后头，类似水中的气泡较大者浮在水的上端\" class=\"headerlink\" title=\"简介：两两元素进行比较，较大者放置后头，类似水中的气泡较大者浮在水的上端\"></a>简介：两两元素进行比较，较大者放置后头，类似水中的气泡较大者浮在水的上端</h4><h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n^2)</p>\n<h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubble</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = arr.length,</span><br><span class=\"line\">        i = <span class=\"number\">0</span>,</span><br><span class=\"line\">        j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 循环 n-1 趟</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每趟 需比较 n-i-1 次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果后面的元素较大，则交换两者顺序</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j + <span class=\"number\">1</span>] &lt; arr[j]) &#123;</span><br><span class=\"line\">                arr[j] = [arr[j + <span class=\"number\">1</span>], arr[j + <span class=\"number\">1</span>] = arr[j]][<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-快速排序\"><a href=\"#2-快速排序\" class=\"headerlink\" title=\"2. 快速排序\"></a>2. 快速排序</h3><h4 id=\"简介：取一个元素为基准，把序列分成两部分，小于基准的放到它的左面，大于等于的放到它的右面，然后在把左面和右面的子序列再进行上述的拆分，直到子序列不可再分割（小于2个元素），最终达到整个序列有序\"><a href=\"#简介：取一个元素为基准，把序列分成两部分，小于基准的放到它的左面，大于等于的放到它的右面，然后在把左面和右面的子序列再进行上述的拆分，直到子序列不可再分割（小于2个元素），最终达到整个序列有序\" class=\"headerlink\" title=\"简介：取一个元素为基准，把序列分成两部分，小于基准的放到它的左面，大于等于的放到它的右面，然后在把左面和右面的子序列再进行上述的拆分，直到子序列不可再分割（小于2个元素），最终达到整个序列有序\"></a>简介：取一个元素为基准，把序列分成两部分，小于基准的放到它的左面，大于等于的放到它的右面，然后在把左面和右面的子序列再进行上述的拆分，直到子序列不可再分割（小于2个元素），最终达到整个序列有序</h4><h4 id=\"性能-1\"><a href=\"#性能-1\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n*logn)</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quick</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不可再分割，直接退出</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = arr.length,</span><br><span class=\"line\">        middle = len &gt;&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">        pivot = (len--) &amp;&amp; arr.splice(middle, <span class=\"number\">1</span>)[<span class=\"number\">0</span>], <span class=\"comment\">// 取中间为基准数，并从数组中移除</span></span><br><span class=\"line\">        left = [],</span><br><span class=\"line\">        right = [],</span><br><span class=\"line\">        i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分组 小于基准的放到左边，反之</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...quick(left), pivot, ...quick(right)]; <span class=\"comment\">// 合并</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-简单选择排序\"><a href=\"#3-简单选择排序\" class=\"headerlink\" title=\"3. 简单选择排序\"></a>3. 简单选择排序</h3><h4 id=\"简介：假设一个有序序列，然后由剩余的元素中选出最小的（最大的）扔到有序序列，直到无序序列元素为空，从而达到整个序列有序\"><a href=\"#简介：假设一个有序序列，然后由剩余的元素中选出最小的（最大的）扔到有序序列，直到无序序列元素为空，从而达到整个序列有序\" class=\"headerlink\" title=\"简介：假设一个有序序列，然后由剩余的元素中选出最小的（最大的）扔到有序序列，直到无序序列元素为空，从而达到整个序列有序\"></a>简介：假设一个有序序列，然后由剩余的元素中选出最小的（最大的）扔到有序序列，直到无序序列元素为空，从而达到整个序列有序</h4><h4 id=\"性能-2\"><a href=\"#性能-2\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n^2)</p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selection</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = arr.length,</span><br><span class=\"line\">        i = <span class=\"number\">0</span>,</span><br><span class=\"line\">        j = <span class=\"number\">0</span>,</span><br><span class=\"line\">        min = i;</span><br><span class=\"line\">    <span class=\"comment\">// 循环 n-1 趟</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        min = i; <span class=\"comment\">// 假设每趟的第一个数为最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果后面的树大于最小数（min对应的数），则重新对最小值的索引赋值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class=\"line\">                min = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将最小数置于该趟排序的第一个位置</span></span><br><span class=\"line\">        arr[i] = [arr[min], arr[min] = arr[i]][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-堆排序\"><a href=\"#4-堆排序\" class=\"headerlink\" title=\"4. 堆排序\"></a>4. 堆排序</h3><h4 id=\"简介：是简单选择排序的改进版，利用堆结构\"><a href=\"#简介：是简单选择排序的改进版，利用堆结构\" class=\"headerlink\" title=\"简介：是简单选择排序的改进版，利用堆结构\"></a>简介：是简单选择排序的改进版，利用堆结构</h4><h4 id=\"性能-3\"><a href=\"#性能-3\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n*logn)</p>\n<h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = arr.length,</span><br><span class=\"line\">        i, j;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 筛选</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sift = <span class=\"function\">(<span class=\"params\">k, m, r</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> p = k, <span class=\"comment\">// 父结点</span></span><br><span class=\"line\">            c = p * <span class=\"number\">2</span> + <span class=\"number\">1</span>; <span class=\"comment\">// 左结点（默认最大）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (c &lt;= m) &#123; <span class=\"comment\">// 左结点(c=m)和左右结点(c&lt;m)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c &lt; m &amp;&amp; r[c + <span class=\"number\">1</span>] &gt; r[c]) c++; <span class=\"comment\">// 选出左右结点中的最大者，指向左结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r[p] &gt; r[c]) <span class=\"keyword\">break</span>; <span class=\"comment\">// 父结点大于左结点 顺序正确，退出循环</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                r[p] = [r[c], r[c] = r[p]][<span class=\"number\">0</span>]; <span class=\"comment\">// 将大的一方置于顶部（父结点）</span></span><br><span class=\"line\">                p = c; <span class=\"comment\">// 向下重新指向父结点</span></span><br><span class=\"line\">                c = p * <span class=\"number\">2</span> + <span class=\"number\">1</span>; <span class=\"comment\">// 向下重新指向左结点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建堆</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = (n / <span class=\"number\">2</span> | <span class=\"number\">0</span>) - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123; <span class=\"comment\">// 从最后一个分支结点开始向上逆序遍历 </span></span><br><span class=\"line\">        sift(i, n - <span class=\"number\">1</span>, arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = n - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">        arr[<span class=\"number\">0</span>] = [arr[j], arr[j] = arr[<span class=\"number\">0</span>]][<span class=\"number\">0</span>]; <span class=\"comment\">// 将最大的结点存于数组的最后一位</span></span><br><span class=\"line\">        n--; <span class=\"comment\">// 减少数组长度，排除有序序列</span></span><br><span class=\"line\">        sift(<span class=\"number\">0</span>, n - <span class=\"number\">1</span>, arr, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-直接插入排序\"><a href=\"#5-直接插入排序\" class=\"headerlink\" title=\"5. 直接插入排序\"></a>5. 直接插入排序</h3><h4 id=\"简介：假设数组的一有序序列，从后面的无序序列中，扫描，与有序序列比较，插入到合适位置\"><a href=\"#简介：假设数组的一有序序列，从后面的无序序列中，扫描，与有序序列比较，插入到合适位置\" class=\"headerlink\" title=\"简介：假设数组的一有序序列，从后面的无序序列中，扫描，与有序序列比较，插入到合适位置\"></a>简介：假设数组的一有序序列，从后面的无序序列中，扫描，与有序序列比较，插入到合适位置</h4><h4 id=\"性能-4\"><a href=\"#性能-4\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n^2)</p>\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertion</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = arr.length,</span><br><span class=\"line\">        i = <span class=\"number\">0</span>,</span><br><span class=\"line\">        j = <span class=\"number\">0</span>,</span><br><span class=\"line\">        temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// [7,6,2,5,4,3,1]</span></span><br><span class=\"line\">    <span class=\"comment\">// 从第二个元素开始循环</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        temp = arr[i]; <span class=\"comment\">// 存储当前元素</span></span><br><span class=\"line\">        j = i - <span class=\"number\">1</span>; <span class=\"comment\">// 待插入队列的序号</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; temp &lt; arr[j]) &#123; <span class=\"comment\">// 当没有出界 且 当前元素比待插序列元素小时，进行待插序列的元素向后移动一位</span></span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = temp; <span class=\"comment\">// 将当前元素插入到待插序列的下一位</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-希尔排序\"><a href=\"#6-希尔排序\" class=\"headerlink\" title=\"6. 希尔排序\"></a>6. 希尔排序</h3><h4 id=\"简介：一种改进版的插入排序，每次比较的是用增量分割的序列，达到部分有序，随着增量依次递减，序列逐渐达到完全有序\"><a href=\"#简介：一种改进版的插入排序，每次比较的是用增量分割的序列，达到部分有序，随着增量依次递减，序列逐渐达到完全有序\" class=\"headerlink\" title=\"简介：一种改进版的插入排序，每次比较的是用增量分割的序列，达到部分有序，随着增量依次递减，序列逐渐达到完全有序\"></a>简介：一种改进版的插入排序，每次比较的是用增量分割的序列，达到部分有序，随着增量依次递减，序列逐渐达到完全有序</h4><h4 id=\"性能-5\"><a href=\"#性能-5\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n*logn)</p>\n<h4 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shell</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = arr.length,</span><br><span class=\"line\">        i = <span class=\"number\">0</span>,</span><br><span class=\"line\">        j = <span class=\"number\">0</span>,</span><br><span class=\"line\">        temp,</span><br><span class=\"line\">        gap = <span class=\"number\">1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    gap = len / <span class=\"number\">3</span> | <span class=\"number\">0</span>; <span class=\"comment\">// 计算增量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (gap &gt;= <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 增量大于2时，进行简单插入排序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = gap; i &lt; len; i++) &#123;</span><br><span class=\"line\">            temp = arr[i];</span><br><span class=\"line\">            j = i - gap;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; temp &lt; arr[j]) &#123;</span><br><span class=\"line\">                arr[j + gap] = arr[j];</span><br><span class=\"line\">                j -= gap;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + gap] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        gap = gap / <span class=\"number\">3</span> | <span class=\"number\">0</span>; <span class=\"comment\">// 增量减少</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-归并排序\"><a href=\"#7-归并排序\" class=\"headerlink\" title=\"7. 归并排序\"></a>7. 归并排序</h3><h4 id=\"简介：利用分治法，将序列分为许多小子序列，然后每个子序列进行排序，然后逐次合并，最后达到整体有序，这里用的是二路归并排序（归并排序中最简单的一种）\"><a href=\"#简介：利用分治法，将序列分为许多小子序列，然后每个子序列进行排序，然后逐次合并，最后达到整体有序，这里用的是二路归并排序（归并排序中最简单的一种）\" class=\"headerlink\" title=\"简介：利用分治法，将序列分为许多小子序列，然后每个子序列进行排序，然后逐次合并，最后达到整体有序，这里用的是二路归并排序（归并排序中最简单的一种）\"></a>简介：利用分治法，将序列分为许多小子序列，然后每个子序列进行排序，然后逐次合并，最后达到整体有序，这里用的是二路归并排序（归并排序中最简单的一种）</h4><h4 id=\"性能-6\"><a href=\"#性能-6\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n*logn)</p>\n<h4 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (&#123;</span><br><span class=\"line\">        sortArr(leftArr, rightArr) &#123; <span class=\"comment\">// 排序</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">            <span class=\"comment\">// 合并</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (leftArr.length * rightArr.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (leftArr[<span class=\"number\">0</span>] &lt; rightArr[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                    res.push(leftArr.shift());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res.push(rightArr.shift());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            leftArr.length &gt; <span class=\"number\">0</span> &amp;&amp; (res = [...res, ...leftArr]);</span><br><span class=\"line\">            rightArr.length &gt; <span class=\"number\">0</span> &amp;&amp; (res = [...res, ...rightArr]);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        mergeArr(brr) &#123; <span class=\"comment\">// 合并</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (brr.length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> brr;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> len = brr.length,</span><br><span class=\"line\">                left = [],</span><br><span class=\"line\">                right = [],</span><br><span class=\"line\">                middle;</span><br><span class=\"line\">            middle = len &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 分组</span></span><br><span class=\"line\">            left = brr.slice(<span class=\"number\">0</span>, middle);</span><br><span class=\"line\">            right = brr.slice(middle);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sortArr(<span class=\"keyword\">this</span>.mergeArr(left), <span class=\"keyword\">this</span>.mergeArr(right));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).mergeArr(arr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-计数排序\"><a href=\"#8-计数排序\" class=\"headerlink\" title=\"8. 计数排序\"></a>8. 计数排序</h3><h4 id=\"简介：利用分配概念，将元素一一映射到桶中，每个桶只存储单一值\"><a href=\"#简介：利用分配概念，将元素一一映射到桶中，每个桶只存储单一值\" class=\"headerlink\" title=\"简介：利用分配概念，将元素一一映射到桶中，每个桶只存储单一值\"></a>简介：利用分配概念，将元素一一映射到桶中，每个桶只存储单一值</h4><h4 id=\"性能-7\"><a href=\"#性能-7\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n+m)</p>\n<h4 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countingSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max(...arr),</span><br><span class=\"line\">        min = <span class=\"built_in\">Math</span>.min(...arr),</span><br><span class=\"line\">        len = arr.length,</span><br><span class=\"line\">        i,</span><br><span class=\"line\">        bucket = [],</span><br><span class=\"line\">        result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 入桶</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = arr[i];</span><br><span class=\"line\">        bucket[item] = bucket[item] || <span class=\"number\">0</span>; <span class=\"comment\">// 建立映射表</span></span><br><span class=\"line\">        bucket[item]++; <span class=\"comment\">// 相同元素对应到同一映射表中，映射表增加1 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 出桶</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = min; i &lt;= max; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = bucket[i]; <span class=\"comment\">// 取每个映射表的元素数量</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 如果数量大于0 ，重复输出该元素 </span></span><br><span class=\"line\">            result.push(i);</span><br><span class=\"line\">            count--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-桶排序\"><a href=\"#9-桶排序\" class=\"headerlink\" title=\"9. 桶排序\"></a>9. 桶排序</h3><h4 id=\"简介：利用分配概念，每个桶存储一定范围的数值，然后桶内在进行排序，最后所有桶的元素出桶达到完全有序\"><a href=\"#简介：利用分配概念，每个桶存储一定范围的数值，然后桶内在进行排序，最后所有桶的元素出桶达到完全有序\" class=\"headerlink\" title=\"简介：利用分配概念，每个桶存储一定范围的数值，然后桶内在进行排序，最后所有桶的元素出桶达到完全有序\"></a>简介：利用分配概念，每个桶存储一定范围的数值，然后桶内在进行排序，最后所有桶的元素出桶达到完全有序</h4><h4 id=\"性能-8\"><a href=\"#性能-8\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n+m)</p>\n<h4 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bucketSort</span>(<span class=\"params\">arr, num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length,</span><br><span class=\"line\">        max = <span class=\"built_in\">Math</span>.max(...arr),</span><br><span class=\"line\">        min = <span class=\"built_in\">Math</span>.min(...arr),</span><br><span class=\"line\">        result = [],</span><br><span class=\"line\">        bucket = [],</span><br><span class=\"line\">        space,</span><br><span class=\"line\">        i;</span><br><span class=\"line\">    <span class=\"comment\">// 至少2个桶</span></span><br><span class=\"line\">    num = num &gt; <span class=\"number\">2</span> ? num : <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 计算每个桶的容量</span></span><br><span class=\"line\">    space = ((max - min) / num | <span class=\"number\">0</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 入桶</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index = (item - min) / space | <span class=\"number\">0</span>; <span class=\"comment\">// 计算元素入桶的位置，要放入哪个桶</span></span><br><span class=\"line\"></span><br><span class=\"line\">        bucket[index] = bucket[index] || [];</span><br><span class=\"line\">        bucket[index].push(item);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bucket[index].length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 桶里的元素再进行排序（这里使用的是简单插入排序）</span></span><br><span class=\"line\">            bucket[index] = insertion(bucket[index]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 出桶</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> list = bucket[i] || [];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result = result.concat(list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-基数排序\"><a href=\"#10-基数排序\" class=\"headerlink\" title=\"10. 基数排序\"></a>10. 基数排序</h3><h4 id=\"简介：利用分配概念，根据元素的基数来分配桶\"><a href=\"#简介：利用分配概念，根据元素的基数来分配桶\" class=\"headerlink\" title=\"简介：利用分配概念，根据元素的基数来分配桶\"></a>简介：利用分配概念，根据元素的基数来分配桶</h4><ul>\n<li><p>最低位优先法，简称LSD法：先从最低位开始排序，再对次低位排序，直到对最高位排序后得到一个有序序列</p>\n</li>\n<li><p>最高位优先法，简称MSD法：先从最高位开始排序，再逐个对各分组按次高位进行子排序，循环直到最低位</p>\n</li>\n</ul>\n<h4 id=\"性能-9\"><a href=\"#性能-9\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n*m)</p>\n<h4 id=\"代码-8\"><a href=\"#代码-8\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">radixSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length,</span><br><span class=\"line\">        max = <span class=\"built_in\">Math</span>.max(...arr),</span><br><span class=\"line\">        bucket = [],</span><br><span class=\"line\">        result = [],</span><br><span class=\"line\">        i,</span><br><span class=\"line\">        j,</span><br><span class=\"line\">        k,</span><br><span class=\"line\">        hight = <span class=\"built_in\">String</span>(max).length; <span class=\"comment\">// 计算最大数的位数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= hight; i++) &#123; <span class=\"comment\">// 其实就是循环hight次的计数排序</span></span><br><span class=\"line\">        result = [];</span><br><span class=\"line\">        bucket = [];</span><br><span class=\"line\">        <span class=\"comment\">// 入桶</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> item = arr[j] + <span class=\"string\">\"\"</span>; <span class=\"comment\">// 这里转换为string 类型，方便取具体位数的值，当然mod10也可以</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> index = item.length - i &lt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : item.substr(item.length - i, <span class=\"number\">1</span>); <span class=\"comment\">// 取第(item.len-i+1)位的数</span></span><br><span class=\"line\">            bucket[index] = bucket[index] || []; <span class=\"comment\">// 这里就和计数排序一样了</span></span><br><span class=\"line\">            bucket[index].push(+item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 出桶</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; bucket.length; k++) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bucket[k] &amp;&amp; bucket[k].length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                result = result.concat(bucket[k]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        arr = result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"性能比较\"><a href=\"#性能比较\" class=\"headerlink\" title=\"性能比较\"></a>性能比较</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/sort.png\" alt=\"sort\" title=\"\">\n                </div>\n                <div class=\"image-caption\">sort</div>\n            </figure>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><ol>\n<li><a href=\"https://github.com/Yangfan2016/JS-Sorting-Algorithm\" target=\"_blank\" rel=\"noopener\">《十大经典排序算法》</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>备注 </p>\n<ul>\n<li><h5 id=\"语法为-ES6\"><a href=\"#语法为-ES6\" class=\"headerlink\" title=\"语法为 ES6\"></a>语法为 ES6</h5></li>\n<li><h5 id=\"以下排序默认按升序排序\"><a href=\"#以下排序默认按升序排序\" class=\"headerlink\" title=\"以下排序默认按升序排序\"></a>以下排序默认按升序排序</h5></li>\n<li><h5 id=\"测试案例均为自然数\"><a href=\"#测试案例均为自然数\" class=\"headerlink\" title=\"测试案例均为自然数\"></a>测试案例均为自然数</h5></li>\n</ul>\n</blockquote>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>排序作为十分经典的算法之一。是每一个软件工程师的必备技能，学好排序算法，可以提高软件的运行效率，最重要的是掌握其算法设计思想，才能举一反三应用到实际的实践中，为己所用。</p>\n<h3 id=\"排序算法简介\"><a href=\"#排序算法简介\" class=\"headerlink\" title=\"排序算法简介\"></a>排序算法简介</h3><ol>\n<li>按照数据的大小，排序算法可以分为内部排序和外部排序（数据较大，需要借助外存）</li>\n<li>内部排序，又可以细分为 交换排序、插入排序、选择排序</li>\n</ol>\n<h3 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1. 冒泡排序\"></a>1. 冒泡排序</h3><h4 id=\"简介：两两元素进行比较，较大者放置后头，类似水中的气泡较大者浮在水的上端\"><a href=\"#简介：两两元素进行比较，较大者放置后头，类似水中的气泡较大者浮在水的上端\" class=\"headerlink\" title=\"简介：两两元素进行比较，较大者放置后头，类似水中的气泡较大者浮在水的上端\"></a>简介：两两元素进行比较，较大者放置后头，类似水中的气泡较大者浮在水的上端</h4><h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n^2)</p>\n<h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubble</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = arr.length,</span><br><span class=\"line\">        i = <span class=\"number\">0</span>,</span><br><span class=\"line\">        j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 循环 n-1 趟</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每趟 需比较 n-i-1 次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果后面的元素较大，则交换两者顺序</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j + <span class=\"number\">1</span>] &lt; arr[j]) &#123;</span><br><span class=\"line\">                arr[j] = [arr[j + <span class=\"number\">1</span>], arr[j + <span class=\"number\">1</span>] = arr[j]][<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-快速排序\"><a href=\"#2-快速排序\" class=\"headerlink\" title=\"2. 快速排序\"></a>2. 快速排序</h3><h4 id=\"简介：取一个元素为基准，把序列分成两部分，小于基准的放到它的左面，大于等于的放到它的右面，然后在把左面和右面的子序列再进行上述的拆分，直到子序列不可再分割（小于2个元素），最终达到整个序列有序\"><a href=\"#简介：取一个元素为基准，把序列分成两部分，小于基准的放到它的左面，大于等于的放到它的右面，然后在把左面和右面的子序列再进行上述的拆分，直到子序列不可再分割（小于2个元素），最终达到整个序列有序\" class=\"headerlink\" title=\"简介：取一个元素为基准，把序列分成两部分，小于基准的放到它的左面，大于等于的放到它的右面，然后在把左面和右面的子序列再进行上述的拆分，直到子序列不可再分割（小于2个元素），最终达到整个序列有序\"></a>简介：取一个元素为基准，把序列分成两部分，小于基准的放到它的左面，大于等于的放到它的右面，然后在把左面和右面的子序列再进行上述的拆分，直到子序列不可再分割（小于2个元素），最终达到整个序列有序</h4><h4 id=\"性能-1\"><a href=\"#性能-1\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n*logn)</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quick</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不可再分割，直接退出</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = arr.length,</span><br><span class=\"line\">        middle = len &gt;&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">        pivot = (len--) &amp;&amp; arr.splice(middle, <span class=\"number\">1</span>)[<span class=\"number\">0</span>], <span class=\"comment\">// 取中间为基准数，并从数组中移除</span></span><br><span class=\"line\">        left = [],</span><br><span class=\"line\">        right = [],</span><br><span class=\"line\">        i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分组 小于基准的放到左边，反之</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...quick(left), pivot, ...quick(right)]; <span class=\"comment\">// 合并</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-简单选择排序\"><a href=\"#3-简单选择排序\" class=\"headerlink\" title=\"3. 简单选择排序\"></a>3. 简单选择排序</h3><h4 id=\"简介：假设一个有序序列，然后由剩余的元素中选出最小的（最大的）扔到有序序列，直到无序序列元素为空，从而达到整个序列有序\"><a href=\"#简介：假设一个有序序列，然后由剩余的元素中选出最小的（最大的）扔到有序序列，直到无序序列元素为空，从而达到整个序列有序\" class=\"headerlink\" title=\"简介：假设一个有序序列，然后由剩余的元素中选出最小的（最大的）扔到有序序列，直到无序序列元素为空，从而达到整个序列有序\"></a>简介：假设一个有序序列，然后由剩余的元素中选出最小的（最大的）扔到有序序列，直到无序序列元素为空，从而达到整个序列有序</h4><h4 id=\"性能-2\"><a href=\"#性能-2\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n^2)</p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selection</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = arr.length,</span><br><span class=\"line\">        i = <span class=\"number\">0</span>,</span><br><span class=\"line\">        j = <span class=\"number\">0</span>,</span><br><span class=\"line\">        min = i;</span><br><span class=\"line\">    <span class=\"comment\">// 循环 n-1 趟</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        min = i; <span class=\"comment\">// 假设每趟的第一个数为最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果后面的树大于最小数（min对应的数），则重新对最小值的索引赋值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class=\"line\">                min = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将最小数置于该趟排序的第一个位置</span></span><br><span class=\"line\">        arr[i] = [arr[min], arr[min] = arr[i]][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-堆排序\"><a href=\"#4-堆排序\" class=\"headerlink\" title=\"4. 堆排序\"></a>4. 堆排序</h3><h4 id=\"简介：是简单选择排序的改进版，利用堆结构\"><a href=\"#简介：是简单选择排序的改进版，利用堆结构\" class=\"headerlink\" title=\"简介：是简单选择排序的改进版，利用堆结构\"></a>简介：是简单选择排序的改进版，利用堆结构</h4><h4 id=\"性能-3\"><a href=\"#性能-3\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n*logn)</p>\n<h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = arr.length,</span><br><span class=\"line\">        i, j;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 筛选</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sift = <span class=\"function\">(<span class=\"params\">k, m, r</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> p = k, <span class=\"comment\">// 父结点</span></span><br><span class=\"line\">            c = p * <span class=\"number\">2</span> + <span class=\"number\">1</span>; <span class=\"comment\">// 左结点（默认最大）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (c &lt;= m) &#123; <span class=\"comment\">// 左结点(c=m)和左右结点(c&lt;m)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c &lt; m &amp;&amp; r[c + <span class=\"number\">1</span>] &gt; r[c]) c++; <span class=\"comment\">// 选出左右结点中的最大者，指向左结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r[p] &gt; r[c]) <span class=\"keyword\">break</span>; <span class=\"comment\">// 父结点大于左结点 顺序正确，退出循环</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                r[p] = [r[c], r[c] = r[p]][<span class=\"number\">0</span>]; <span class=\"comment\">// 将大的一方置于顶部（父结点）</span></span><br><span class=\"line\">                p = c; <span class=\"comment\">// 向下重新指向父结点</span></span><br><span class=\"line\">                c = p * <span class=\"number\">2</span> + <span class=\"number\">1</span>; <span class=\"comment\">// 向下重新指向左结点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建堆</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = (n / <span class=\"number\">2</span> | <span class=\"number\">0</span>) - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123; <span class=\"comment\">// 从最后一个分支结点开始向上逆序遍历 </span></span><br><span class=\"line\">        sift(i, n - <span class=\"number\">1</span>, arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = n - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">        arr[<span class=\"number\">0</span>] = [arr[j], arr[j] = arr[<span class=\"number\">0</span>]][<span class=\"number\">0</span>]; <span class=\"comment\">// 将最大的结点存于数组的最后一位</span></span><br><span class=\"line\">        n--; <span class=\"comment\">// 减少数组长度，排除有序序列</span></span><br><span class=\"line\">        sift(<span class=\"number\">0</span>, n - <span class=\"number\">1</span>, arr, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-直接插入排序\"><a href=\"#5-直接插入排序\" class=\"headerlink\" title=\"5. 直接插入排序\"></a>5. 直接插入排序</h3><h4 id=\"简介：假设数组的一有序序列，从后面的无序序列中，扫描，与有序序列比较，插入到合适位置\"><a href=\"#简介：假设数组的一有序序列，从后面的无序序列中，扫描，与有序序列比较，插入到合适位置\" class=\"headerlink\" title=\"简介：假设数组的一有序序列，从后面的无序序列中，扫描，与有序序列比较，插入到合适位置\"></a>简介：假设数组的一有序序列，从后面的无序序列中，扫描，与有序序列比较，插入到合适位置</h4><h4 id=\"性能-4\"><a href=\"#性能-4\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n^2)</p>\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertion</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = arr.length,</span><br><span class=\"line\">        i = <span class=\"number\">0</span>,</span><br><span class=\"line\">        j = <span class=\"number\">0</span>,</span><br><span class=\"line\">        temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// [7,6,2,5,4,3,1]</span></span><br><span class=\"line\">    <span class=\"comment\">// 从第二个元素开始循环</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        temp = arr[i]; <span class=\"comment\">// 存储当前元素</span></span><br><span class=\"line\">        j = i - <span class=\"number\">1</span>; <span class=\"comment\">// 待插入队列的序号</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; temp &lt; arr[j]) &#123; <span class=\"comment\">// 当没有出界 且 当前元素比待插序列元素小时，进行待插序列的元素向后移动一位</span></span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = temp; <span class=\"comment\">// 将当前元素插入到待插序列的下一位</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-希尔排序\"><a href=\"#6-希尔排序\" class=\"headerlink\" title=\"6. 希尔排序\"></a>6. 希尔排序</h3><h4 id=\"简介：一种改进版的插入排序，每次比较的是用增量分割的序列，达到部分有序，随着增量依次递减，序列逐渐达到完全有序\"><a href=\"#简介：一种改进版的插入排序，每次比较的是用增量分割的序列，达到部分有序，随着增量依次递减，序列逐渐达到完全有序\" class=\"headerlink\" title=\"简介：一种改进版的插入排序，每次比较的是用增量分割的序列，达到部分有序，随着增量依次递减，序列逐渐达到完全有序\"></a>简介：一种改进版的插入排序，每次比较的是用增量分割的序列，达到部分有序，随着增量依次递减，序列逐渐达到完全有序</h4><h4 id=\"性能-5\"><a href=\"#性能-5\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n*logn)</p>\n<h4 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shell</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = arr.length,</span><br><span class=\"line\">        i = <span class=\"number\">0</span>,</span><br><span class=\"line\">        j = <span class=\"number\">0</span>,</span><br><span class=\"line\">        temp,</span><br><span class=\"line\">        gap = <span class=\"number\">1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    gap = len / <span class=\"number\">3</span> | <span class=\"number\">0</span>; <span class=\"comment\">// 计算增量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (gap &gt;= <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 增量大于2时，进行简单插入排序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = gap; i &lt; len; i++) &#123;</span><br><span class=\"line\">            temp = arr[i];</span><br><span class=\"line\">            j = i - gap;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; temp &lt; arr[j]) &#123;</span><br><span class=\"line\">                arr[j + gap] = arr[j];</span><br><span class=\"line\">                j -= gap;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + gap] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        gap = gap / <span class=\"number\">3</span> | <span class=\"number\">0</span>; <span class=\"comment\">// 增量减少</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-归并排序\"><a href=\"#7-归并排序\" class=\"headerlink\" title=\"7. 归并排序\"></a>7. 归并排序</h3><h4 id=\"简介：利用分治法，将序列分为许多小子序列，然后每个子序列进行排序，然后逐次合并，最后达到整体有序，这里用的是二路归并排序（归并排序中最简单的一种）\"><a href=\"#简介：利用分治法，将序列分为许多小子序列，然后每个子序列进行排序，然后逐次合并，最后达到整体有序，这里用的是二路归并排序（归并排序中最简单的一种）\" class=\"headerlink\" title=\"简介：利用分治法，将序列分为许多小子序列，然后每个子序列进行排序，然后逐次合并，最后达到整体有序，这里用的是二路归并排序（归并排序中最简单的一种）\"></a>简介：利用分治法，将序列分为许多小子序列，然后每个子序列进行排序，然后逐次合并，最后达到整体有序，这里用的是二路归并排序（归并排序中最简单的一种）</h4><h4 id=\"性能-6\"><a href=\"#性能-6\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n*logn)</p>\n<h4 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (&#123;</span><br><span class=\"line\">        sortArr(leftArr, rightArr) &#123; <span class=\"comment\">// 排序</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">            <span class=\"comment\">// 合并</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (leftArr.length * rightArr.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (leftArr[<span class=\"number\">0</span>] &lt; rightArr[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                    res.push(leftArr.shift());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res.push(rightArr.shift());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            leftArr.length &gt; <span class=\"number\">0</span> &amp;&amp; (res = [...res, ...leftArr]);</span><br><span class=\"line\">            rightArr.length &gt; <span class=\"number\">0</span> &amp;&amp; (res = [...res, ...rightArr]);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        mergeArr(brr) &#123; <span class=\"comment\">// 合并</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (brr.length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> brr;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> len = brr.length,</span><br><span class=\"line\">                left = [],</span><br><span class=\"line\">                right = [],</span><br><span class=\"line\">                middle;</span><br><span class=\"line\">            middle = len &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 分组</span></span><br><span class=\"line\">            left = brr.slice(<span class=\"number\">0</span>, middle);</span><br><span class=\"line\">            right = brr.slice(middle);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sortArr(<span class=\"keyword\">this</span>.mergeArr(left), <span class=\"keyword\">this</span>.mergeArr(right));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).mergeArr(arr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-计数排序\"><a href=\"#8-计数排序\" class=\"headerlink\" title=\"8. 计数排序\"></a>8. 计数排序</h3><h4 id=\"简介：利用分配概念，将元素一一映射到桶中，每个桶只存储单一值\"><a href=\"#简介：利用分配概念，将元素一一映射到桶中，每个桶只存储单一值\" class=\"headerlink\" title=\"简介：利用分配概念，将元素一一映射到桶中，每个桶只存储单一值\"></a>简介：利用分配概念，将元素一一映射到桶中，每个桶只存储单一值</h4><h4 id=\"性能-7\"><a href=\"#性能-7\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n+m)</p>\n<h4 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countingSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max(...arr),</span><br><span class=\"line\">        min = <span class=\"built_in\">Math</span>.min(...arr),</span><br><span class=\"line\">        len = arr.length,</span><br><span class=\"line\">        i,</span><br><span class=\"line\">        bucket = [],</span><br><span class=\"line\">        result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 入桶</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = arr[i];</span><br><span class=\"line\">        bucket[item] = bucket[item] || <span class=\"number\">0</span>; <span class=\"comment\">// 建立映射表</span></span><br><span class=\"line\">        bucket[item]++; <span class=\"comment\">// 相同元素对应到同一映射表中，映射表增加1 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 出桶</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = min; i &lt;= max; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = bucket[i]; <span class=\"comment\">// 取每个映射表的元素数量</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 如果数量大于0 ，重复输出该元素 </span></span><br><span class=\"line\">            result.push(i);</span><br><span class=\"line\">            count--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-桶排序\"><a href=\"#9-桶排序\" class=\"headerlink\" title=\"9. 桶排序\"></a>9. 桶排序</h3><h4 id=\"简介：利用分配概念，每个桶存储一定范围的数值，然后桶内在进行排序，最后所有桶的元素出桶达到完全有序\"><a href=\"#简介：利用分配概念，每个桶存储一定范围的数值，然后桶内在进行排序，最后所有桶的元素出桶达到完全有序\" class=\"headerlink\" title=\"简介：利用分配概念，每个桶存储一定范围的数值，然后桶内在进行排序，最后所有桶的元素出桶达到完全有序\"></a>简介：利用分配概念，每个桶存储一定范围的数值，然后桶内在进行排序，最后所有桶的元素出桶达到完全有序</h4><h4 id=\"性能-8\"><a href=\"#性能-8\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n+m)</p>\n<h4 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bucketSort</span>(<span class=\"params\">arr, num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length,</span><br><span class=\"line\">        max = <span class=\"built_in\">Math</span>.max(...arr),</span><br><span class=\"line\">        min = <span class=\"built_in\">Math</span>.min(...arr),</span><br><span class=\"line\">        result = [],</span><br><span class=\"line\">        bucket = [],</span><br><span class=\"line\">        space,</span><br><span class=\"line\">        i;</span><br><span class=\"line\">    <span class=\"comment\">// 至少2个桶</span></span><br><span class=\"line\">    num = num &gt; <span class=\"number\">2</span> ? num : <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 计算每个桶的容量</span></span><br><span class=\"line\">    space = ((max - min) / num | <span class=\"number\">0</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 入桶</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index = (item - min) / space | <span class=\"number\">0</span>; <span class=\"comment\">// 计算元素入桶的位置，要放入哪个桶</span></span><br><span class=\"line\"></span><br><span class=\"line\">        bucket[index] = bucket[index] || [];</span><br><span class=\"line\">        bucket[index].push(item);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bucket[index].length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 桶里的元素再进行排序（这里使用的是简单插入排序）</span></span><br><span class=\"line\">            bucket[index] = insertion(bucket[index]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 出桶</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> list = bucket[i] || [];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result = result.concat(list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-基数排序\"><a href=\"#10-基数排序\" class=\"headerlink\" title=\"10. 基数排序\"></a>10. 基数排序</h3><h4 id=\"简介：利用分配概念，根据元素的基数来分配桶\"><a href=\"#简介：利用分配概念，根据元素的基数来分配桶\" class=\"headerlink\" title=\"简介：利用分配概念，根据元素的基数来分配桶\"></a>简介：利用分配概念，根据元素的基数来分配桶</h4><ul>\n<li><p>最低位优先法，简称LSD法：先从最低位开始排序，再对次低位排序，直到对最高位排序后得到一个有序序列</p>\n</li>\n<li><p>最高位优先法，简称MSD法：先从最高位开始排序，再逐个对各分组按次高位进行子排序，循环直到最低位</p>\n</li>\n</ul>\n<h4 id=\"性能-9\"><a href=\"#性能-9\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>平均时间复杂度 O(n*m)</p>\n<h4 id=\"代码-8\"><a href=\"#代码-8\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">radixSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length,</span><br><span class=\"line\">        max = <span class=\"built_in\">Math</span>.max(...arr),</span><br><span class=\"line\">        bucket = [],</span><br><span class=\"line\">        result = [],</span><br><span class=\"line\">        i,</span><br><span class=\"line\">        j,</span><br><span class=\"line\">        k,</span><br><span class=\"line\">        hight = <span class=\"built_in\">String</span>(max).length; <span class=\"comment\">// 计算最大数的位数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= hight; i++) &#123; <span class=\"comment\">// 其实就是循环hight次的计数排序</span></span><br><span class=\"line\">        result = [];</span><br><span class=\"line\">        bucket = [];</span><br><span class=\"line\">        <span class=\"comment\">// 入桶</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> item = arr[j] + <span class=\"string\">\"\"</span>; <span class=\"comment\">// 这里转换为string 类型，方便取具体位数的值，当然mod10也可以</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> index = item.length - i &lt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : item.substr(item.length - i, <span class=\"number\">1</span>); <span class=\"comment\">// 取第(item.len-i+1)位的数</span></span><br><span class=\"line\">            bucket[index] = bucket[index] || []; <span class=\"comment\">// 这里就和计数排序一样了</span></span><br><span class=\"line\">            bucket[index].push(+item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 出桶</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; bucket.length; k++) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bucket[k] &amp;&amp; bucket[k].length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                result = result.concat(bucket[k]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        arr = result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"性能比较\"><a href=\"#性能比较\" class=\"headerlink\" title=\"性能比较\"></a>性能比较</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/sort.png\" alt=\"sort\" title=\"\">\n                </div>\n                <div class=\"image-caption\">sort</div>\n            </figure>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><ol>\n<li><a href=\"https://github.com/Yangfan2016/JS-Sorting-Algorithm\" target=\"_blank\" rel=\"noopener\">《十大经典排序算法》</a></li>\n</ol>\n"},{"title":"[转]如何监听JS变量的变化","date":"2017-09-20T06:04:08.000Z","_content":"\n\n\n# 如何监听JS变量的变化[转]\n\n## 读前必看\n\nObject.defineProperty()  [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\n\n## 如何监听 js 中变量的变化?\n\n我现在有这样一个需求，需要监控js的某个变量的改变，如果该变量发生变化，则触发一些事件，不能使用timeinterval之类的定时去监控的方法，不知道有比较好的解决方案么？\n\n这个问题问的很好。\n\n流行的MVVM的JS库/框架都有共同的特点就是数据绑定，在数据变更后响应式的自动进行相关计算并变更DOM展现。所以这个问题也可以理解为如何实现MVVM库/框架的数据绑定。\n\n常见的数据绑定的实现有脏值检测，基于ES5的getter和setter，以及ES已被废弃的Object.observe，和ES6中添加的Proxy。\n\n## 脏值检测\n\nangular使用的就是脏值检测，原理是比较新值和旧值，当值真的发生改变时再去更改DOM，所以angular中有一个$digest。那么为什么在像ng-click这样的内置指令在触发后会自动变更呢？原理也很简单，在ng-click这样的内置指令中最后追加了$digest。\n\n简易的实现一个脏值检测：\n\n\n```html\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>two-way binding</title>\n    </head>\n    <body onload=\"init()\">\n        <button ng-click=\"inc\">\n            Increase\n        </button>\n        <button ng-click=\"reset\">\n            Reset\n        </button>\n        <span style=\"color:red\" ng-bind=\"counter\"></span>\n        <span style=\"color:blue\" ng-bind=\"counter\"></span>\n        <span style=\"color:green\" ng-bind=\"counter\"></span>\n        <script type=\"text/javascript\">\n            /* 数据模型区开始 */\n            var counter = 0;\n            function inc() {\n                counter++;\n            }\n            function reset() {\n                counter = 0;\n            }\n            /* 数据模型区结束 */\n            /* 绑定关系区开始 */\n            function init() {\n                bind();\n            }\n            function bind() {\n                var list = document.querySelectorAll(\"[ng-click]\");\n                for (var i=0; i<list.length; i++) {\n                    list[i].onclick = (function(index) {\n                        return function() {\n                            window[list[index].getAttribute(\"ng-click\")]();\n                            apply();\n                        };\n                    })(i);\n                }\n            }\n            function apply() {\n                var list = document.querySelectorAll(\"[ng-bind='counter']\");\n                for (var i=0; i<list.length; i++) {\n                    if (list[i].innerHTML != counter) {\n                        list[i].innerHTML = counter;\n                    }\n                }\n            }\n            /* 绑定关系区结束 */\n        </script>\n    </body>\n</html>\n\n```\n\n这样做的坏处是自己变更数据后，是无法自动改变DOM的，必须要想办法触发apply()，所以只能借助ng-click的包装，在ng-click中包含真实的click事件监听并追加脏值检测以判断是否要更新DOM。\n\n另外一个坏处是如果不注意，每次脏值检测会检测大量的数据，而很多数据是没有检测的必要的，容易影响性能。\n\n关于如何实现一个和angular一样的脏值检测，知道原理后还有很多工作要去做，以及如何优化等等。如果有兴趣可以看看民工叔曾经推荐的《Build Your Own Angular.js》，第一章Scope便讲了如何实现angular的作用域和脏值检测。对了，上面的例子也是从民工叔的博客稍加修改来的，建议最后去看下原文，链接在参考资料中。\n\nES5的getter与setter\n在ES5中新增了一个Object.defineProperty，直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。\n\n\n```js\n\nObject.defineProperty(obj, prop, descriptor)\n\n```\n\n其接受的第三个参数可以取get和set并各自对应一个getter和setter方法：\n\n```js\n\nvar a = { zhihu:0 };\nObject.defineProperty(a, 'zhihu', {\n  get: function() {\n    console.log('get：' + zhihu);\n    return zhihu;\n  },\n  set: function(value) {\n    zhihu = value;\n    console.log('set:' + zhihu);\n  }\n});\na.zhihu = 2; // set:2\nconsole.log(a.zhihu); // get：2\n                      // 2\n```\n\n基于ES5的getter和setter可以说几乎完美符合了要求。为什么要说几乎呢？\n\n首先IE8及更低版本IE是无法使用的，而且这个特性是没有polyfill的，无法在不支持的平台实现，\n这也是基于ES5getter和setter的Vue.js不支持IE8及更低版本IE的原因。也许有人会提到avalon，avalon在低版本IE借助vbscript一些黑魔法实现了类似的功能。\n\n除此之外，还有一个问题就是修改数组的length，直接用索引设置元素如items[0] = {}，以及数组的push等变异方法是无法触发setter的。\n如果想要解决这个问题可以参考Vue的做法，在Vue的observer/array.js中，Vue直接修改了数组的原型方法：\n\n```js\n\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\n/**\n * Intercept mutating methods and emit events\n */\n;[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method]\n  def(arrayMethods, method, function mutator () {\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length\n    var args = new Array(i)\n    while (i--) {\n      args[i] = arguments[i]\n    }\n    var result = original.apply(this, args)\n    var ob = this.__ob__\n    var inserted\n    switch (method) {\n      case 'push':\n        inserted = args\n        break\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify()\n    return result\n  })\n})\n\n```\n\n这样重写了原型方法，在执行数组变异方法后依然能够触发视图的更新。\n\n但是这样还是不能解决修改数组的length和直接用索引设置元素如items[0] = {}的问题，想要解决依然可以参考Vue的做法：\n前一个问题可以直接用新的数组代替旧的数组；后一个问题可以为数组拓展一个$set方法，在执行修改后顺便触发视图的更新。\n\n已被废弃的Object.observe\nObject.observe曾在ES7的草案中，并在提议中进展到stage2，最终依然被废弃。\n这里只举一个MDN上的例子：\n\n```js\n\n// 一个数据模型\nvar user = {\n  id: 0,\n  name: 'Brendan Eich',\n  title: 'Mr.'\n};\n// 创建用户的greeting\nfunction updateGreeting() {\n  user.greeting = 'Hello, ' + user.title + ' ' + user.name + '!';\n}\nupdateGreeting();\nObject.observe(user, function(changes) {\n  changes.forEach(function(change) {\n    // 当name或title属性改变时, 更新greeting\n    if (change.name === 'name' || change.name === 'title') {\n      updateGreeting();\n    }\n  });\n});\n\n```\n\n由于是已经废弃了的特性，Chrome虽然曾经支持但也已经废弃了支持，这里不再讲更多，有兴趣可以搜一搜以前的文章，这曾经是一个被看好的特性（Object.observe()带来的数据绑定变革）。\n当然关于它也有一些替代品Polymer/observe-js。\n\nES6带来的Proxy\n人如其名，类似HTTP中的代理：\n\n```js\n\nvar p = new Proxy(target, handler);\ntarget为目标对象，可以是任意类型的对象，比如数组，函数，甚至是另外一个代理对象。\nhandler为处理器对象，包含了一组代理方法，分别控制所生成代理对象的各种行为。\n\n```\n\n举个例子：\n\n```js\n\nlet a = new Proxy({}, {\n  set: function(obj, prop, value) {\n    obj[prop] = value;\n    if (prop === 'zhihu') {\n      console.log(\"set \" + prop + \": \" + obj[prop]);\n    }\n    return true;\n  }\n});\na.zhihu = 100;\n\n```\n\n当然，Proxy的能力远不止此，还可以实现代理转发等等。\n\n但是要注意的是目前浏览器中只有Firefox18支持这个特性，而babel官方也表明不支持这个特性：\n\n> Unsupported feature   \nDue to the limitations of ES5, Proxies cannot be transpiled or polyfilled.\n\n\n目前已经有babel插件可以实现，但是据说实现的比较复杂。\n如果是Node的话升级到目前的最新版本应该就可以使用了，上面的例子测试环境为Node v6.4.0。\n\n\n原文：[https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/](https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/)\n","source":"_posts/转-如何监听JS变量的变化.md","raw":"---\ntitle: '[转]如何监听JS变量的变化'\ndate: 2017-09-20 14:04:08\ntags:\n---\n\n\n\n# 如何监听JS变量的变化[转]\n\n## 读前必看\n\nObject.defineProperty()  [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\n\n## 如何监听 js 中变量的变化?\n\n我现在有这样一个需求，需要监控js的某个变量的改变，如果该变量发生变化，则触发一些事件，不能使用timeinterval之类的定时去监控的方法，不知道有比较好的解决方案么？\n\n这个问题问的很好。\n\n流行的MVVM的JS库/框架都有共同的特点就是数据绑定，在数据变更后响应式的自动进行相关计算并变更DOM展现。所以这个问题也可以理解为如何实现MVVM库/框架的数据绑定。\n\n常见的数据绑定的实现有脏值检测，基于ES5的getter和setter，以及ES已被废弃的Object.observe，和ES6中添加的Proxy。\n\n## 脏值检测\n\nangular使用的就是脏值检测，原理是比较新值和旧值，当值真的发生改变时再去更改DOM，所以angular中有一个$digest。那么为什么在像ng-click这样的内置指令在触发后会自动变更呢？原理也很简单，在ng-click这样的内置指令中最后追加了$digest。\n\n简易的实现一个脏值检测：\n\n\n```html\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>two-way binding</title>\n    </head>\n    <body onload=\"init()\">\n        <button ng-click=\"inc\">\n            Increase\n        </button>\n        <button ng-click=\"reset\">\n            Reset\n        </button>\n        <span style=\"color:red\" ng-bind=\"counter\"></span>\n        <span style=\"color:blue\" ng-bind=\"counter\"></span>\n        <span style=\"color:green\" ng-bind=\"counter\"></span>\n        <script type=\"text/javascript\">\n            /* 数据模型区开始 */\n            var counter = 0;\n            function inc() {\n                counter++;\n            }\n            function reset() {\n                counter = 0;\n            }\n            /* 数据模型区结束 */\n            /* 绑定关系区开始 */\n            function init() {\n                bind();\n            }\n            function bind() {\n                var list = document.querySelectorAll(\"[ng-click]\");\n                for (var i=0; i<list.length; i++) {\n                    list[i].onclick = (function(index) {\n                        return function() {\n                            window[list[index].getAttribute(\"ng-click\")]();\n                            apply();\n                        };\n                    })(i);\n                }\n            }\n            function apply() {\n                var list = document.querySelectorAll(\"[ng-bind='counter']\");\n                for (var i=0; i<list.length; i++) {\n                    if (list[i].innerHTML != counter) {\n                        list[i].innerHTML = counter;\n                    }\n                }\n            }\n            /* 绑定关系区结束 */\n        </script>\n    </body>\n</html>\n\n```\n\n这样做的坏处是自己变更数据后，是无法自动改变DOM的，必须要想办法触发apply()，所以只能借助ng-click的包装，在ng-click中包含真实的click事件监听并追加脏值检测以判断是否要更新DOM。\n\n另外一个坏处是如果不注意，每次脏值检测会检测大量的数据，而很多数据是没有检测的必要的，容易影响性能。\n\n关于如何实现一个和angular一样的脏值检测，知道原理后还有很多工作要去做，以及如何优化等等。如果有兴趣可以看看民工叔曾经推荐的《Build Your Own Angular.js》，第一章Scope便讲了如何实现angular的作用域和脏值检测。对了，上面的例子也是从民工叔的博客稍加修改来的，建议最后去看下原文，链接在参考资料中。\n\nES5的getter与setter\n在ES5中新增了一个Object.defineProperty，直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。\n\n\n```js\n\nObject.defineProperty(obj, prop, descriptor)\n\n```\n\n其接受的第三个参数可以取get和set并各自对应一个getter和setter方法：\n\n```js\n\nvar a = { zhihu:0 };\nObject.defineProperty(a, 'zhihu', {\n  get: function() {\n    console.log('get：' + zhihu);\n    return zhihu;\n  },\n  set: function(value) {\n    zhihu = value;\n    console.log('set:' + zhihu);\n  }\n});\na.zhihu = 2; // set:2\nconsole.log(a.zhihu); // get：2\n                      // 2\n```\n\n基于ES5的getter和setter可以说几乎完美符合了要求。为什么要说几乎呢？\n\n首先IE8及更低版本IE是无法使用的，而且这个特性是没有polyfill的，无法在不支持的平台实现，\n这也是基于ES5getter和setter的Vue.js不支持IE8及更低版本IE的原因。也许有人会提到avalon，avalon在低版本IE借助vbscript一些黑魔法实现了类似的功能。\n\n除此之外，还有一个问题就是修改数组的length，直接用索引设置元素如items[0] = {}，以及数组的push等变异方法是无法触发setter的。\n如果想要解决这个问题可以参考Vue的做法，在Vue的observer/array.js中，Vue直接修改了数组的原型方法：\n\n```js\n\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\n/**\n * Intercept mutating methods and emit events\n */\n;[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method]\n  def(arrayMethods, method, function mutator () {\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length\n    var args = new Array(i)\n    while (i--) {\n      args[i] = arguments[i]\n    }\n    var result = original.apply(this, args)\n    var ob = this.__ob__\n    var inserted\n    switch (method) {\n      case 'push':\n        inserted = args\n        break\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify()\n    return result\n  })\n})\n\n```\n\n这样重写了原型方法，在执行数组变异方法后依然能够触发视图的更新。\n\n但是这样还是不能解决修改数组的length和直接用索引设置元素如items[0] = {}的问题，想要解决依然可以参考Vue的做法：\n前一个问题可以直接用新的数组代替旧的数组；后一个问题可以为数组拓展一个$set方法，在执行修改后顺便触发视图的更新。\n\n已被废弃的Object.observe\nObject.observe曾在ES7的草案中，并在提议中进展到stage2，最终依然被废弃。\n这里只举一个MDN上的例子：\n\n```js\n\n// 一个数据模型\nvar user = {\n  id: 0,\n  name: 'Brendan Eich',\n  title: 'Mr.'\n};\n// 创建用户的greeting\nfunction updateGreeting() {\n  user.greeting = 'Hello, ' + user.title + ' ' + user.name + '!';\n}\nupdateGreeting();\nObject.observe(user, function(changes) {\n  changes.forEach(function(change) {\n    // 当name或title属性改变时, 更新greeting\n    if (change.name === 'name' || change.name === 'title') {\n      updateGreeting();\n    }\n  });\n});\n\n```\n\n由于是已经废弃了的特性，Chrome虽然曾经支持但也已经废弃了支持，这里不再讲更多，有兴趣可以搜一搜以前的文章，这曾经是一个被看好的特性（Object.observe()带来的数据绑定变革）。\n当然关于它也有一些替代品Polymer/observe-js。\n\nES6带来的Proxy\n人如其名，类似HTTP中的代理：\n\n```js\n\nvar p = new Proxy(target, handler);\ntarget为目标对象，可以是任意类型的对象，比如数组，函数，甚至是另外一个代理对象。\nhandler为处理器对象，包含了一组代理方法，分别控制所生成代理对象的各种行为。\n\n```\n\n举个例子：\n\n```js\n\nlet a = new Proxy({}, {\n  set: function(obj, prop, value) {\n    obj[prop] = value;\n    if (prop === 'zhihu') {\n      console.log(\"set \" + prop + \": \" + obj[prop]);\n    }\n    return true;\n  }\n});\na.zhihu = 100;\n\n```\n\n当然，Proxy的能力远不止此，还可以实现代理转发等等。\n\n但是要注意的是目前浏览器中只有Firefox18支持这个特性，而babel官方也表明不支持这个特性：\n\n> Unsupported feature   \nDue to the limitations of ES5, Proxies cannot be transpiled or polyfilled.\n\n\n目前已经有babel插件可以实现，但是据说实现的比较复杂。\n如果是Node的话升级到目前的最新版本应该就可以使用了，上面的例子测试环境为Node v6.4.0。\n\n\n原文：[https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/](https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/)\n","slug":"转-如何监听JS变量的变化","published":1,"updated":"2019-04-25T09:00:39.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauln001vaeyy63tb559j","content":"<h1 id=\"如何监听JS变量的变化-转\"><a href=\"#如何监听JS变量的变化-转\" class=\"headerlink\" title=\"如何监听JS变量的变化[转]\"></a>如何监听JS变量的变化[转]</h1><h2 id=\"读前必看\"><a href=\"#读前必看\" class=\"headerlink\" title=\"读前必看\"></a>读前必看</h2><p>Object.defineProperty()  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a></p>\n<h2 id=\"如何监听-js-中变量的变化\"><a href=\"#如何监听-js-中变量的变化\" class=\"headerlink\" title=\"如何监听 js 中变量的变化?\"></a>如何监听 js 中变量的变化?</h2><p>我现在有这样一个需求，需要监控js的某个变量的改变，如果该变量发生变化，则触发一些事件，不能使用timeinterval之类的定时去监控的方法，不知道有比较好的解决方案么？</p>\n<p>这个问题问的很好。</p>\n<p>流行的MVVM的JS库/框架都有共同的特点就是数据绑定，在数据变更后响应式的自动进行相关计算并变更DOM展现。所以这个问题也可以理解为如何实现MVVM库/框架的数据绑定。</p>\n<p>常见的数据绑定的实现有脏值检测，基于ES5的getter和setter，以及ES已被废弃的Object.observe，和ES6中添加的Proxy。</p>\n<h2 id=\"脏值检测\"><a href=\"#脏值检测\" class=\"headerlink\" title=\"脏值检测\"></a>脏值检测</h2><p>angular使用的就是脏值检测，原理是比较新值和旧值，当值真的发生改变时再去更改DOM，所以angular中有一个$digest。那么为什么在像ng-click这样的内置指令在触发后会自动变更呢？原理也很简单，在ng-click这样的内置指令中最后追加了$digest。</p>\n<p>简易的实现一个脏值检测：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>two-way binding<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"init()\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"inc\"</span>&gt;</span></span><br><span class=\"line\">            Increase</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"reset\"</span>&gt;</span></span><br><span class=\"line\">            Reset</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"counter\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:blue\"</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"counter\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:green\"</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"counter\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">/* 数据模型区开始 */</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inc</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                counter++;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reset</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                counter = 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">/* 数据模型区结束 */</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">/* 绑定关系区开始 */</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                bind();</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"[ng-click]\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;list.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    list[i].onclick = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                            <span class=\"built_in\">window</span>[list[index].getAttribute(<span class=\"string\">\"ng-click\"</span>)]();</span></span><br><span class=\"line\"><span class=\"undefined\">                            apply();</span></span><br><span class=\"line\"><span class=\"undefined\">                        &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;)(i);</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apply</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"[ng-bind='counter']\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;list.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">if</span> (list[i].innerHTML != counter) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        list[i].innerHTML = counter;</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">/* 绑定关系区结束 */</span></span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样做的坏处是自己变更数据后，是无法自动改变DOM的，必须要想办法触发apply()，所以只能借助ng-click的包装，在ng-click中包含真实的click事件监听并追加脏值检测以判断是否要更新DOM。</p>\n<p>另外一个坏处是如果不注意，每次脏值检测会检测大量的数据，而很多数据是没有检测的必要的，容易影响性能。</p>\n<p>关于如何实现一个和angular一样的脏值检测，知道原理后还有很多工作要去做，以及如何优化等等。如果有兴趣可以看看民工叔曾经推荐的《Build Your Own Angular.js》，第一章Scope便讲了如何实现angular的作用域和脏值检测。对了，上面的例子也是从民工叔的博客稍加修改来的，建议最后去看下原文，链接在参考资料中。</p>\n<p>ES5的getter与setter<br>在ES5中新增了一个Object.defineProperty，直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure>\n<p>其接受的第三个参数可以取get和set并各自对应一个getter和setter方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">zhihu</span>:<span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(a, <span class=\"string\">'zhihu'</span>, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get：'</span> + zhihu);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> zhihu;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    zhihu = value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'set:'</span> + zhihu);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">a.zhihu = <span class=\"number\">2</span>; <span class=\"comment\">// set:2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.zhihu); <span class=\"comment\">// get：2</span></span><br><span class=\"line\">                      <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>基于ES5的getter和setter可以说几乎完美符合了要求。为什么要说几乎呢？</p>\n<p>首先IE8及更低版本IE是无法使用的，而且这个特性是没有polyfill的，无法在不支持的平台实现，<br>这也是基于ES5getter和setter的Vue.js不支持IE8及更低版本IE的原因。也许有人会提到avalon，avalon在低版本IE借助vbscript一些黑魔法实现了类似的功能。</p>\n<p>除此之外，还有一个问题就是修改数组的length，直接用索引设置元素如items[0] = {}，以及数组的push等变异方法是无法触发setter的。<br>如果想要解决这个问题可以参考Vue的做法，在Vue的observer/array.js中，Vue直接修改了数组的原型方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto)</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Intercept mutating methods and emit events</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">;[</span><br><span class=\"line\">  <span class=\"string\">'push'</span>,</span><br><span class=\"line\">  <span class=\"string\">'pop'</span>,</span><br><span class=\"line\">  <span class=\"string\">'shift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'unshift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'splice'</span>,</span><br><span class=\"line\">  <span class=\"string\">'sort'</span>,</span><br><span class=\"line\">  <span class=\"string\">'reverse'</span></span><br><span class=\"line\">]</span><br><span class=\"line\">.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache original method</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> original = arrayProto[method]</span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// avoid leaking arguments:</span></span><br><span class=\"line\">    <span class=\"comment\">// http://jsperf.com/closure-with-arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"built_in\">arguments</span>.length</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">      args[i] = <span class=\"built_in\">arguments</span>[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = original.apply(<span class=\"keyword\">this</span>, args)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ob = <span class=\"keyword\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"keyword\">var</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'push'</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'unshift'</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'splice'</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样重写了原型方法，在执行数组变异方法后依然能够触发视图的更新。</p>\n<p>但是这样还是不能解决修改数组的length和直接用索引设置元素如items[0] = {}的问题，想要解决依然可以参考Vue的做法：<br>前一个问题可以直接用新的数组代替旧的数组；后一个问题可以为数组拓展一个$set方法，在执行修改后顺便触发视图的更新。</p>\n<p>已被废弃的Object.observe<br>Object.observe曾在ES7的草案中，并在提议中进展到stage2，最终依然被废弃。<br>这里只举一个MDN上的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个数据模型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">0</span>,</span><br><span class=\"line\">  name: <span class=\"string\">'Brendan Eich'</span>,</span><br><span class=\"line\">  title: <span class=\"string\">'Mr.'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 创建用户的greeting</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateGreeting</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  user.greeting = <span class=\"string\">'Hello, '</span> + user.title + <span class=\"string\">' '</span> + user.name + <span class=\"string\">'!'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">updateGreeting();</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.observe(user, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">changes</span>) </span>&#123;</span><br><span class=\"line\">  changes.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">change</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当name或title属性改变时, 更新greeting</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (change.name === <span class=\"string\">'name'</span> || change.name === <span class=\"string\">'title'</span>) &#123;</span><br><span class=\"line\">      updateGreeting();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>由于是已经废弃了的特性，Chrome虽然曾经支持但也已经废弃了支持，这里不再讲更多，有兴趣可以搜一搜以前的文章，这曾经是一个被看好的特性（Object.observe()带来的数据绑定变革）。<br>当然关于它也有一些替代品Polymer/observe-js。</p>\n<p>ES6带来的Proxy<br>人如其名，类似HTTP中的代理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\">target为目标对象，可以是任意类型的对象，比如数组，函数，甚至是另外一个代理对象。</span><br><span class=\"line\">handler为处理器对象，包含了一组代理方法，分别控制所生成代理对象的各种行为。</span><br></pre></td></tr></table></figure>\n<p>举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value</span>) </span>&#123;</span><br><span class=\"line\">    obj[prop] = value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop === <span class=\"string\">'zhihu'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"set \"</span> + prop + <span class=\"string\">\": \"</span> + obj[prop]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">a.zhihu = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<p>当然，Proxy的能力远不止此，还可以实现代理转发等等。</p>\n<p>但是要注意的是目前浏览器中只有Firefox18支持这个特性，而babel官方也表明不支持这个特性：</p>\n<blockquote>\n<p>Unsupported feature<br>Due to the limitations of ES5, Proxies cannot be transpiled or polyfilled.</p>\n</blockquote>\n<p>目前已经有babel插件可以实现，但是据说实现的比较复杂。<br>如果是Node的话升级到目前的最新版本应该就可以使用了，上面的例子测试环境为Node v6.4.0。</p>\n<p>原文：<a href=\"https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/\" target=\"_blank\" rel=\"noopener\">https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"如何监听JS变量的变化-转\"><a href=\"#如何监听JS变量的变化-转\" class=\"headerlink\" title=\"如何监听JS变量的变化[转]\"></a>如何监听JS变量的变化[转]</h1><h2 id=\"读前必看\"><a href=\"#读前必看\" class=\"headerlink\" title=\"读前必看\"></a>读前必看</h2><p>Object.defineProperty()  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a></p>\n<h2 id=\"如何监听-js-中变量的变化\"><a href=\"#如何监听-js-中变量的变化\" class=\"headerlink\" title=\"如何监听 js 中变量的变化?\"></a>如何监听 js 中变量的变化?</h2><p>我现在有这样一个需求，需要监控js的某个变量的改变，如果该变量发生变化，则触发一些事件，不能使用timeinterval之类的定时去监控的方法，不知道有比较好的解决方案么？</p>\n<p>这个问题问的很好。</p>\n<p>流行的MVVM的JS库/框架都有共同的特点就是数据绑定，在数据变更后响应式的自动进行相关计算并变更DOM展现。所以这个问题也可以理解为如何实现MVVM库/框架的数据绑定。</p>\n<p>常见的数据绑定的实现有脏值检测，基于ES5的getter和setter，以及ES已被废弃的Object.observe，和ES6中添加的Proxy。</p>\n<h2 id=\"脏值检测\"><a href=\"#脏值检测\" class=\"headerlink\" title=\"脏值检测\"></a>脏值检测</h2><p>angular使用的就是脏值检测，原理是比较新值和旧值，当值真的发生改变时再去更改DOM，所以angular中有一个$digest。那么为什么在像ng-click这样的内置指令在触发后会自动变更呢？原理也很简单，在ng-click这样的内置指令中最后追加了$digest。</p>\n<p>简易的实现一个脏值检测：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>two-way binding<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"init()\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"inc\"</span>&gt;</span></span><br><span class=\"line\">            Increase</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"reset\"</span>&gt;</span></span><br><span class=\"line\">            Reset</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"counter\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:blue\"</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"counter\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:green\"</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"counter\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">/* 数据模型区开始 */</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inc</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                counter++;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reset</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                counter = 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">/* 数据模型区结束 */</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">/* 绑定关系区开始 */</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                bind();</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"[ng-click]\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;list.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    list[i].onclick = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                            <span class=\"built_in\">window</span>[list[index].getAttribute(<span class=\"string\">\"ng-click\"</span>)]();</span></span><br><span class=\"line\"><span class=\"undefined\">                            apply();</span></span><br><span class=\"line\"><span class=\"undefined\">                        &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;)(i);</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apply</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"[ng-bind='counter']\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;list.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">if</span> (list[i].innerHTML != counter) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        list[i].innerHTML = counter;</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">/* 绑定关系区结束 */</span></span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样做的坏处是自己变更数据后，是无法自动改变DOM的，必须要想办法触发apply()，所以只能借助ng-click的包装，在ng-click中包含真实的click事件监听并追加脏值检测以判断是否要更新DOM。</p>\n<p>另外一个坏处是如果不注意，每次脏值检测会检测大量的数据，而很多数据是没有检测的必要的，容易影响性能。</p>\n<p>关于如何实现一个和angular一样的脏值检测，知道原理后还有很多工作要去做，以及如何优化等等。如果有兴趣可以看看民工叔曾经推荐的《Build Your Own Angular.js》，第一章Scope便讲了如何实现angular的作用域和脏值检测。对了，上面的例子也是从民工叔的博客稍加修改来的，建议最后去看下原文，链接在参考资料中。</p>\n<p>ES5的getter与setter<br>在ES5中新增了一个Object.defineProperty，直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure>\n<p>其接受的第三个参数可以取get和set并各自对应一个getter和setter方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">zhihu</span>:<span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(a, <span class=\"string\">'zhihu'</span>, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get：'</span> + zhihu);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> zhihu;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    zhihu = value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'set:'</span> + zhihu);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">a.zhihu = <span class=\"number\">2</span>; <span class=\"comment\">// set:2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.zhihu); <span class=\"comment\">// get：2</span></span><br><span class=\"line\">                      <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>基于ES5的getter和setter可以说几乎完美符合了要求。为什么要说几乎呢？</p>\n<p>首先IE8及更低版本IE是无法使用的，而且这个特性是没有polyfill的，无法在不支持的平台实现，<br>这也是基于ES5getter和setter的Vue.js不支持IE8及更低版本IE的原因。也许有人会提到avalon，avalon在低版本IE借助vbscript一些黑魔法实现了类似的功能。</p>\n<p>除此之外，还有一个问题就是修改数组的length，直接用索引设置元素如items[0] = {}，以及数组的push等变异方法是无法触发setter的。<br>如果想要解决这个问题可以参考Vue的做法，在Vue的observer/array.js中，Vue直接修改了数组的原型方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto)</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Intercept mutating methods and emit events</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">;[</span><br><span class=\"line\">  <span class=\"string\">'push'</span>,</span><br><span class=\"line\">  <span class=\"string\">'pop'</span>,</span><br><span class=\"line\">  <span class=\"string\">'shift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'unshift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'splice'</span>,</span><br><span class=\"line\">  <span class=\"string\">'sort'</span>,</span><br><span class=\"line\">  <span class=\"string\">'reverse'</span></span><br><span class=\"line\">]</span><br><span class=\"line\">.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache original method</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> original = arrayProto[method]</span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// avoid leaking arguments:</span></span><br><span class=\"line\">    <span class=\"comment\">// http://jsperf.com/closure-with-arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"built_in\">arguments</span>.length</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">      args[i] = <span class=\"built_in\">arguments</span>[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = original.apply(<span class=\"keyword\">this</span>, args)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ob = <span class=\"keyword\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"keyword\">var</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'push'</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'unshift'</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'splice'</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样重写了原型方法，在执行数组变异方法后依然能够触发视图的更新。</p>\n<p>但是这样还是不能解决修改数组的length和直接用索引设置元素如items[0] = {}的问题，想要解决依然可以参考Vue的做法：<br>前一个问题可以直接用新的数组代替旧的数组；后一个问题可以为数组拓展一个$set方法，在执行修改后顺便触发视图的更新。</p>\n<p>已被废弃的Object.observe<br>Object.observe曾在ES7的草案中，并在提议中进展到stage2，最终依然被废弃。<br>这里只举一个MDN上的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个数据模型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">0</span>,</span><br><span class=\"line\">  name: <span class=\"string\">'Brendan Eich'</span>,</span><br><span class=\"line\">  title: <span class=\"string\">'Mr.'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 创建用户的greeting</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateGreeting</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  user.greeting = <span class=\"string\">'Hello, '</span> + user.title + <span class=\"string\">' '</span> + user.name + <span class=\"string\">'!'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">updateGreeting();</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.observe(user, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">changes</span>) </span>&#123;</span><br><span class=\"line\">  changes.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">change</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当name或title属性改变时, 更新greeting</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (change.name === <span class=\"string\">'name'</span> || change.name === <span class=\"string\">'title'</span>) &#123;</span><br><span class=\"line\">      updateGreeting();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>由于是已经废弃了的特性，Chrome虽然曾经支持但也已经废弃了支持，这里不再讲更多，有兴趣可以搜一搜以前的文章，这曾经是一个被看好的特性（Object.observe()带来的数据绑定变革）。<br>当然关于它也有一些替代品Polymer/observe-js。</p>\n<p>ES6带来的Proxy<br>人如其名，类似HTTP中的代理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\">target为目标对象，可以是任意类型的对象，比如数组，函数，甚至是另外一个代理对象。</span><br><span class=\"line\">handler为处理器对象，包含了一组代理方法，分别控制所生成代理对象的各种行为。</span><br></pre></td></tr></table></figure>\n<p>举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value</span>) </span>&#123;</span><br><span class=\"line\">    obj[prop] = value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop === <span class=\"string\">'zhihu'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"set \"</span> + prop + <span class=\"string\">\": \"</span> + obj[prop]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">a.zhihu = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<p>当然，Proxy的能力远不止此，还可以实现代理转发等等。</p>\n<p>但是要注意的是目前浏览器中只有Firefox18支持这个特性，而babel官方也表明不支持这个特性：</p>\n<blockquote>\n<p>Unsupported feature<br>Due to the limitations of ES5, Proxies cannot be transpiled or polyfilled.</p>\n</blockquote>\n<p>目前已经有babel插件可以实现，但是据说实现的比较复杂。<br>如果是Node的话升级到目前的最新版本应该就可以使用了，上面的例子测试环境为Node v6.4.0。</p>\n<p>原文：<a href=\"https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/\" target=\"_blank\" rel=\"noopener\">https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/</a></p>\n"},{"title":"高德地图 Javascript API 入门（六）","date":"2017-02-28T10:03:02.000Z","_content":"\n\n高德地图 Javascript API 入门（六）\n===\n\n\n出行规划\n---\n\n#### 公交路径\n\n公交换乘服务，提供起、终点公交路线规划服务，整合步行方式\n\n- 初始化\n\n```js\n// 加载公交线路插件\nAMap.service(\"AMap.Transfer\",function () {\n    // 实例化Transfer \n    var transfer=new AMap.Transfer({\n        city:\"北京\", // 必须值，搭乘公交所在城市\n        map:map, // 可选值，搜索结果的标注、线路等均会自动添加到此地图上\n        panel:\"panel\", // 可选值，显示搜索列表的容器,\n        extensions:\"all\", // 可选值，详细信息        \n        poliy:AMap.TransferPolicy.LEAST_TIME // 驾驶策略：最省时模式\n    });\n});\n```\n\n- 按关键字搜索\n\n\n```js\n// 关键字搜索\ntransfer.search([{keyword:\"北京西站\"},{keyword:\"天安门\"}],function (status,result) {\n    window.top.data=result;\n});\n```\n\n- 按坐标搜索\n\n\n```js\n// 按坐标搜索\ntransfer.search([116.379028, 39.865042], [116.427281, 39.903719],function (status,result) {\n    window.top.data=result;\n});\n```\n\n预览 \n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap601.JPG)\n\n\n#### 驾车路径\n\n驾车路线规划服务，提供起、终点坐标的驾车导航路线查询功能\n\n- 初始化\n\n```js\n// 加载驾车路径插件\nAMap.service(\"AMap.Driving\",function () {\n\t// 实例化Driving    \n\tvar driving=new AMap.Driving({\n        map:map, // 用来承载 显示路径\n        panel:\"panel\", // 显示搜索列表的容器\n        extensions:\"all\", // 详细信息\n        policy:AMap.DrivingPolicy.REAL_TRAFFIC, // 驾驶策略：合理交通\n        showTraffic:true, // 是否显示路况\n        province:\"晋\", // 判断限行\n        number:\"A88888\", // 判断限行\n        hideMarkers:false, // 隐藏起点、终点的点标注\n        isOutline:true, // 是否显示线路的边框\n        outlineColor:\"#f00\" // 边框颜色\n    });\n});\n```\n\n- 按关键字搜索\n\n```js\n\t// 按关键字搜索\n    driving.search([{keyword:\"北京西站\",city:\"北京\"},{keyword:\"天安门\",city:\"北京\"}],function (status,result) {\n        window.top.data=result;\n    });\n```\n\n- 按坐标搜索\n\n```js\n\t// 按坐标搜索\n\tdriving.search([116.379028, 39.865042], [116.427281, 39.903719],function (status,result) {\n        window.top.data=result;\n    });\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap602.JPG)\n\n\t\n限行结果  \n0 代表限行已规避或未限行，即该路线没有限行路段  \n1 代表限行无法规避，即该线路有限行路段\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap603.JPG)\n\n\n#### 步行路径\n\n步行导航服务，提供起、终点步行路线规划服务\n\n- 初始化\n\n```js\n// 加载步行路径插件\nAMap.service(\"AMap.Walking\",function () {\n    var walking=new AMap.Walking({\n        map:map,\n        panel:\"panel\"\n    });\n});\n```\n\n- 按关键字搜索 \n\n```js\nwalking.search([{keyword:\"方恒国际中心A座\"},{keyword:\"望京站\"}],function (status,result) {\n\twindow.top.data=result;\n});\n```\n\n- 按坐标搜索 \n\n```js\nwalking.search([116.379028, 39.865042],[116.427281, 39.903719],function (status,result) {\n\twindow.top.data=result;\n});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap604.JPG)\n\n\n\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","source":"_posts/高德地图 Javascript API 入门（六）.md","raw":"---\ntitle: 高德地图 Javascript API 入门（六）\ndate: 2017-02-28 18:03:02\ntags: [GIS,API,JS]\n---\n\n\n高德地图 Javascript API 入门（六）\n===\n\n\n出行规划\n---\n\n#### 公交路径\n\n公交换乘服务，提供起、终点公交路线规划服务，整合步行方式\n\n- 初始化\n\n```js\n// 加载公交线路插件\nAMap.service(\"AMap.Transfer\",function () {\n    // 实例化Transfer \n    var transfer=new AMap.Transfer({\n        city:\"北京\", // 必须值，搭乘公交所在城市\n        map:map, // 可选值，搜索结果的标注、线路等均会自动添加到此地图上\n        panel:\"panel\", // 可选值，显示搜索列表的容器,\n        extensions:\"all\", // 可选值，详细信息        \n        poliy:AMap.TransferPolicy.LEAST_TIME // 驾驶策略：最省时模式\n    });\n});\n```\n\n- 按关键字搜索\n\n\n```js\n// 关键字搜索\ntransfer.search([{keyword:\"北京西站\"},{keyword:\"天安门\"}],function (status,result) {\n    window.top.data=result;\n});\n```\n\n- 按坐标搜索\n\n\n```js\n// 按坐标搜索\ntransfer.search([116.379028, 39.865042], [116.427281, 39.903719],function (status,result) {\n    window.top.data=result;\n});\n```\n\n预览 \n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap601.JPG)\n\n\n#### 驾车路径\n\n驾车路线规划服务，提供起、终点坐标的驾车导航路线查询功能\n\n- 初始化\n\n```js\n// 加载驾车路径插件\nAMap.service(\"AMap.Driving\",function () {\n\t// 实例化Driving    \n\tvar driving=new AMap.Driving({\n        map:map, // 用来承载 显示路径\n        panel:\"panel\", // 显示搜索列表的容器\n        extensions:\"all\", // 详细信息\n        policy:AMap.DrivingPolicy.REAL_TRAFFIC, // 驾驶策略：合理交通\n        showTraffic:true, // 是否显示路况\n        province:\"晋\", // 判断限行\n        number:\"A88888\", // 判断限行\n        hideMarkers:false, // 隐藏起点、终点的点标注\n        isOutline:true, // 是否显示线路的边框\n        outlineColor:\"#f00\" // 边框颜色\n    });\n});\n```\n\n- 按关键字搜索\n\n```js\n\t// 按关键字搜索\n    driving.search([{keyword:\"北京西站\",city:\"北京\"},{keyword:\"天安门\",city:\"北京\"}],function (status,result) {\n        window.top.data=result;\n    });\n```\n\n- 按坐标搜索\n\n```js\n\t// 按坐标搜索\n\tdriving.search([116.379028, 39.865042], [116.427281, 39.903719],function (status,result) {\n        window.top.data=result;\n    });\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap602.JPG)\n\n\t\n限行结果  \n0 代表限行已规避或未限行，即该路线没有限行路段  \n1 代表限行无法规避，即该线路有限行路段\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap603.JPG)\n\n\n#### 步行路径\n\n步行导航服务，提供起、终点步行路线规划服务\n\n- 初始化\n\n```js\n// 加载步行路径插件\nAMap.service(\"AMap.Walking\",function () {\n    var walking=new AMap.Walking({\n        map:map,\n        panel:\"panel\"\n    });\n});\n```\n\n- 按关键字搜索 \n\n```js\nwalking.search([{keyword:\"方恒国际中心A座\"},{keyword:\"望京站\"}],function (status,result) {\n\twindow.top.data=result;\n});\n```\n\n- 按坐标搜索 \n\n```js\nwalking.search([116.379028, 39.865042],[116.427281, 39.903719],function (status,result) {\n\twindow.top.data=result;\n});\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap604.JPG)\n\n\n\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","slug":"高德地图 Javascript API 入门（六）","published":1,"updated":"2019-04-25T09:00:16.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaulp001waeyybosivi29","content":"<h1 id=\"高德地图-Javascript-API-入门（六）\"><a href=\"#高德地图-Javascript-API-入门（六）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（六）\"></a>高德地图 Javascript API 入门（六）</h1><h2 id=\"出行规划\"><a href=\"#出行规划\" class=\"headerlink\" title=\"出行规划\"></a>出行规划</h2><h4 id=\"公交路径\"><a href=\"#公交路径\" class=\"headerlink\" title=\"公交路径\"></a>公交路径</h4><p>公交换乘服务，提供起、终点公交路线规划服务，整合步行方式</p>\n<ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载公交线路插件</span></span><br><span class=\"line\">AMap.service(<span class=\"string\">\"AMap.Transfer\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化Transfer </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> transfer=<span class=\"keyword\">new</span> AMap.Transfer(&#123;</span><br><span class=\"line\">        city:<span class=\"string\">\"北京\"</span>, <span class=\"comment\">// 必须值，搭乘公交所在城市</span></span><br><span class=\"line\">        map:map, <span class=\"comment\">// 可选值，搜索结果的标注、线路等均会自动添加到此地图上</span></span><br><span class=\"line\">        panel:<span class=\"string\">\"panel\"</span>, <span class=\"comment\">// 可选值，显示搜索列表的容器,</span></span><br><span class=\"line\">        extensions:<span class=\"string\">\"all\"</span>, <span class=\"comment\">// 可选值，详细信息        </span></span><br><span class=\"line\">        poliy:AMap.TransferPolicy.LEAST_TIME <span class=\"comment\">// 驾驶策略：最省时模式</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按关键字搜索</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 关键字搜索</span></span><br><span class=\"line\">transfer.search([&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">\"北京西站\"</span>&#125;,&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">\"天安门\"</span>&#125;],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按坐标搜索</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按坐标搜索</span></span><br><span class=\"line\">transfer.search([<span class=\"number\">116.379028</span>, <span class=\"number\">39.865042</span>], [<span class=\"number\">116.427281</span>, <span class=\"number\">39.903719</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览 </p>\n<p><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap601.JPG\" alt=\"image\"></p>\n<h4 id=\"驾车路径\"><a href=\"#驾车路径\" class=\"headerlink\" title=\"驾车路径\"></a>驾车路径</h4><p>驾车路线规划服务，提供起、终点坐标的驾车导航路线查询功能</p>\n<ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载驾车路径插件</span></span><br><span class=\"line\">AMap.service(<span class=\"string\">\"AMap.Driving\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 实例化Driving    </span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> driving=<span class=\"keyword\">new</span> AMap.Driving(&#123;</span><br><span class=\"line\">        map:map, <span class=\"comment\">// 用来承载 显示路径</span></span><br><span class=\"line\">        panel:<span class=\"string\">\"panel\"</span>, <span class=\"comment\">// 显示搜索列表的容器</span></span><br><span class=\"line\">        extensions:<span class=\"string\">\"all\"</span>, <span class=\"comment\">// 详细信息</span></span><br><span class=\"line\">        policy:AMap.DrivingPolicy.REAL_TRAFFIC, <span class=\"comment\">// 驾驶策略：合理交通</span></span><br><span class=\"line\">        showTraffic:<span class=\"literal\">true</span>, <span class=\"comment\">// 是否显示路况</span></span><br><span class=\"line\">        province:<span class=\"string\">\"晋\"</span>, <span class=\"comment\">// 判断限行</span></span><br><span class=\"line\">        number:<span class=\"string\">\"A88888\"</span>, <span class=\"comment\">// 判断限行</span></span><br><span class=\"line\">        hideMarkers:<span class=\"literal\">false</span>, <span class=\"comment\">// 隐藏起点、终点的点标注</span></span><br><span class=\"line\">        isOutline:<span class=\"literal\">true</span>, <span class=\"comment\">// 是否显示线路的边框</span></span><br><span class=\"line\">        outlineColor:<span class=\"string\">\"#f00\"</span> <span class=\"comment\">// 边框颜色</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按关键字搜索</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按关键字搜索</span></span><br><span class=\"line\">   driving.search([&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">\"北京西站\"</span>,<span class=\"attr\">city</span>:<span class=\"string\">\"北京\"</span>&#125;,&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">\"天安门\"</span>,<span class=\"attr\">city</span>:<span class=\"string\">\"北京\"</span>&#125;],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按坐标搜索</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按坐标搜索</span></span><br><span class=\"line\">driving.search([<span class=\"number\">116.379028</span>, <span class=\"number\">39.865042</span>], [<span class=\"number\">116.427281</span>, <span class=\"number\">39.903719</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap602.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>限行结果<br>0 代表限行已规避或未限行，即该路线没有限行路段<br>1 代表限行无法规避，即该线路有限行路段</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap603.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"步行路径\"><a href=\"#步行路径\" class=\"headerlink\" title=\"步行路径\"></a>步行路径</h4><p>步行导航服务，提供起、终点步行路线规划服务</p>\n<ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载步行路径插件</span></span><br><span class=\"line\">AMap.service(<span class=\"string\">\"AMap.Walking\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> walking=<span class=\"keyword\">new</span> AMap.Walking(&#123;</span><br><span class=\"line\">        map:map,</span><br><span class=\"line\">        panel:<span class=\"string\">\"panel\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按关键字搜索 </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">walking.search([&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">\"方恒国际中心A座\"</span>&#125;,&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">\"望京站\"</span>&#125;],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按坐标搜索 </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">walking.search([<span class=\"number\">116.379028</span>, <span class=\"number\">39.865042</span>],[<span class=\"number\">116.427281</span>, <span class=\"number\">39.903719</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap604.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"高德地图-Javascript-API-入门（六）\"><a href=\"#高德地图-Javascript-API-入门（六）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（六）\"></a>高德地图 Javascript API 入门（六）</h1><h2 id=\"出行规划\"><a href=\"#出行规划\" class=\"headerlink\" title=\"出行规划\"></a>出行规划</h2><h4 id=\"公交路径\"><a href=\"#公交路径\" class=\"headerlink\" title=\"公交路径\"></a>公交路径</h4><p>公交换乘服务，提供起、终点公交路线规划服务，整合步行方式</p>\n<ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载公交线路插件</span></span><br><span class=\"line\">AMap.service(<span class=\"string\">\"AMap.Transfer\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化Transfer </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> transfer=<span class=\"keyword\">new</span> AMap.Transfer(&#123;</span><br><span class=\"line\">        city:<span class=\"string\">\"北京\"</span>, <span class=\"comment\">// 必须值，搭乘公交所在城市</span></span><br><span class=\"line\">        map:map, <span class=\"comment\">// 可选值，搜索结果的标注、线路等均会自动添加到此地图上</span></span><br><span class=\"line\">        panel:<span class=\"string\">\"panel\"</span>, <span class=\"comment\">// 可选值，显示搜索列表的容器,</span></span><br><span class=\"line\">        extensions:<span class=\"string\">\"all\"</span>, <span class=\"comment\">// 可选值，详细信息        </span></span><br><span class=\"line\">        poliy:AMap.TransferPolicy.LEAST_TIME <span class=\"comment\">// 驾驶策略：最省时模式</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按关键字搜索</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 关键字搜索</span></span><br><span class=\"line\">transfer.search([&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">\"北京西站\"</span>&#125;,&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">\"天安门\"</span>&#125;],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按坐标搜索</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按坐标搜索</span></span><br><span class=\"line\">transfer.search([<span class=\"number\">116.379028</span>, <span class=\"number\">39.865042</span>], [<span class=\"number\">116.427281</span>, <span class=\"number\">39.903719</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览 </p>\n<p><img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap601.JPG\" alt=\"image\"></p>\n<h4 id=\"驾车路径\"><a href=\"#驾车路径\" class=\"headerlink\" title=\"驾车路径\"></a>驾车路径</h4><p>驾车路线规划服务，提供起、终点坐标的驾车导航路线查询功能</p>\n<ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载驾车路径插件</span></span><br><span class=\"line\">AMap.service(<span class=\"string\">\"AMap.Driving\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 实例化Driving    </span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> driving=<span class=\"keyword\">new</span> AMap.Driving(&#123;</span><br><span class=\"line\">        map:map, <span class=\"comment\">// 用来承载 显示路径</span></span><br><span class=\"line\">        panel:<span class=\"string\">\"panel\"</span>, <span class=\"comment\">// 显示搜索列表的容器</span></span><br><span class=\"line\">        extensions:<span class=\"string\">\"all\"</span>, <span class=\"comment\">// 详细信息</span></span><br><span class=\"line\">        policy:AMap.DrivingPolicy.REAL_TRAFFIC, <span class=\"comment\">// 驾驶策略：合理交通</span></span><br><span class=\"line\">        showTraffic:<span class=\"literal\">true</span>, <span class=\"comment\">// 是否显示路况</span></span><br><span class=\"line\">        province:<span class=\"string\">\"晋\"</span>, <span class=\"comment\">// 判断限行</span></span><br><span class=\"line\">        number:<span class=\"string\">\"A88888\"</span>, <span class=\"comment\">// 判断限行</span></span><br><span class=\"line\">        hideMarkers:<span class=\"literal\">false</span>, <span class=\"comment\">// 隐藏起点、终点的点标注</span></span><br><span class=\"line\">        isOutline:<span class=\"literal\">true</span>, <span class=\"comment\">// 是否显示线路的边框</span></span><br><span class=\"line\">        outlineColor:<span class=\"string\">\"#f00\"</span> <span class=\"comment\">// 边框颜色</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按关键字搜索</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按关键字搜索</span></span><br><span class=\"line\">   driving.search([&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">\"北京西站\"</span>,<span class=\"attr\">city</span>:<span class=\"string\">\"北京\"</span>&#125;,&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">\"天安门\"</span>,<span class=\"attr\">city</span>:<span class=\"string\">\"北京\"</span>&#125;],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按坐标搜索</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按坐标搜索</span></span><br><span class=\"line\">driving.search([<span class=\"number\">116.379028</span>, <span class=\"number\">39.865042</span>], [<span class=\"number\">116.427281</span>, <span class=\"number\">39.903719</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap602.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>限行结果<br>0 代表限行已规避或未限行，即该路线没有限行路段<br>1 代表限行无法规避，即该线路有限行路段</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap603.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"步行路径\"><a href=\"#步行路径\" class=\"headerlink\" title=\"步行路径\"></a>步行路径</h4><p>步行导航服务，提供起、终点步行路线规划服务</p>\n<ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载步行路径插件</span></span><br><span class=\"line\">AMap.service(<span class=\"string\">\"AMap.Walking\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> walking=<span class=\"keyword\">new</span> AMap.Walking(&#123;</span><br><span class=\"line\">        map:map,</span><br><span class=\"line\">        panel:<span class=\"string\">\"panel\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按关键字搜索 </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">walking.search([&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">\"方恒国际中心A座\"</span>&#125;,&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">\"望京站\"</span>&#125;],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按坐标搜索 </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">walking.search([<span class=\"number\">116.379028</span>, <span class=\"number\">39.865042</span>],[<span class=\"number\">116.427281</span>, <span class=\"number\">39.903719</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status,result</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.top.data=result;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap604.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n"},{"title":"高德地图 Javascript API 入门（七）","date":"2017-03-04T13:03:02.000Z","_content":"\n\n高德地图 Javascript API 入门（七）\n===\n\n热力图插件\n---\n\n#### 简单例子\n\n\n```js\n// 显示地图\nvar map=new AMap.Map(\"container\",{\n    resizeEnable:true,\n    center:[116.397428, 39.90923],\n    zoom:11\n});\n// 坐标点\nvar points =[\n\t{\"lng\":116.191031,\"lat\":39.988585,\"count\":100},\n    {\"lng\":116.389275,\"lat\":39.925818,\"count\":60},\n    {\"lng\":116.287444,\"lat\":39.810742,\"count\":200},\n    {\"lng\":116.481707,\"lat\":39.940089,\"count\":30},\n    {\"lng\":116.410588,\"lat\":39.880172,\"count\":200},\n    {\"lng\":116.394816,\"lat\":39.91181,\"count\":10},\n    {\"lng\":116.416002,\"lat\":39.952917,\"count\":150}\n];\n// 加载热力图插件\nmap.plugin([\"AMap.Heatmap\"],function () {\n \tvar heatmap=new AMap.Heatmap(map,{\n    \tradius:50\n\t});\n\theatmap.setDataSet({\n   \t\tdata:points,\n    \tmax:100\n   \t});\n)};\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap701.JPG)\n\n\n#### 参数\n\nAMap.Heatmap\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>构造函数</th><th>说明</th></tr><tr><td><code>AMap.Heatmap(<span class=\"punderline\" title=\"叠加的地图对象，类型为AMap.Map\">map:<a href=\"http://lbs.amap.com/api/javascript-api/reference/map/\">Map</a></span>,<span class=\"punderline\" title=\"参考HeatmapOptions列表中的说明\">opts:<a href=\"#m_HeatmapOptions\">HeatmapOptions</a></span>)</code></td><td>构造一个热力图插件对象，map为要叠加热力图的地图对象，opts属性参考HeatmapOptions列表中的说明。</td></tr></tbody></table>\n\noptions\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>HeatmapOptions</th><th>类型</th><th>说明</th></tr><tr><td style=\"white-space: nowrap;\"><code>radius</code></td><td><code>Number</code></td><td>热力图中单个点的半径，默认：30，单位：pixel</td></tr><tr><td style=\"white-space: nowrap;\"><code>gradient</code></td><td><code>Object</code></td><td>热力图的渐变区间，热力图按照设置的颜色及间隔显示热力图，例：<br>{<br>0.4:'rgb(0, 255, 255)',<br>0.65:'rgb(0, 110, 255)',<br>0.85:'rgb(100, 0, 255)',<br>1.0:'rgb(100, 0, 255)'<br>}<br> 其中 key 表示间隔位置，取值范围： [0,1]，value为颜色值。默认：heatmap.js标准配色方案</td></tr><tr><td style=\"white-space: nowrap;\"><code>opacity</code></td><td><code>Array</code></td><td>热力图透明度数组，取值范围[0,1]，0表示完全透明，1表示不透明，默认：[0,1]</td></tr><tr><td style=\"white-space: nowrap;\"><code>zooms</code></td><td><code>Array</code></td><td>支持的缩放级别范围，取值范围[3-18]，默认：[3,18]</td></tr></tbody></table>\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","source":"_posts/高德地图 Javascript API 入门（七）.md","raw":"---\ntitle: 高德地图 Javascript API 入门（七）\ndate: 2017-03-04 21:03:02\ntags: [GIS,API,JS]\n---\n\n\n高德地图 Javascript API 入门（七）\n===\n\n热力图插件\n---\n\n#### 简单例子\n\n\n```js\n// 显示地图\nvar map=new AMap.Map(\"container\",{\n    resizeEnable:true,\n    center:[116.397428, 39.90923],\n    zoom:11\n});\n// 坐标点\nvar points =[\n\t{\"lng\":116.191031,\"lat\":39.988585,\"count\":100},\n    {\"lng\":116.389275,\"lat\":39.925818,\"count\":60},\n    {\"lng\":116.287444,\"lat\":39.810742,\"count\":200},\n    {\"lng\":116.481707,\"lat\":39.940089,\"count\":30},\n    {\"lng\":116.410588,\"lat\":39.880172,\"count\":200},\n    {\"lng\":116.394816,\"lat\":39.91181,\"count\":10},\n    {\"lng\":116.416002,\"lat\":39.952917,\"count\":150}\n];\n// 加载热力图插件\nmap.plugin([\"AMap.Heatmap\"],function () {\n \tvar heatmap=new AMap.Heatmap(map,{\n    \tradius:50\n\t});\n\theatmap.setDataSet({\n   \t\tdata:points,\n    \tmax:100\n   \t});\n)};\n```\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap701.JPG)\n\n\n#### 参数\n\nAMap.Heatmap\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>构造函数</th><th>说明</th></tr><tr><td><code>AMap.Heatmap(<span class=\"punderline\" title=\"叠加的地图对象，类型为AMap.Map\">map:<a href=\"http://lbs.amap.com/api/javascript-api/reference/map/\">Map</a></span>,<span class=\"punderline\" title=\"参考HeatmapOptions列表中的说明\">opts:<a href=\"#m_HeatmapOptions\">HeatmapOptions</a></span>)</code></td><td>构造一个热力图插件对象，map为要叠加热力图的地图对象，opts属性参考HeatmapOptions列表中的说明。</td></tr></tbody></table>\n\noptions\n\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>HeatmapOptions</th><th>类型</th><th>说明</th></tr><tr><td style=\"white-space: nowrap;\"><code>radius</code></td><td><code>Number</code></td><td>热力图中单个点的半径，默认：30，单位：pixel</td></tr><tr><td style=\"white-space: nowrap;\"><code>gradient</code></td><td><code>Object</code></td><td>热力图的渐变区间，热力图按照设置的颜色及间隔显示热力图，例：<br>{<br>0.4:'rgb(0, 255, 255)',<br>0.65:'rgb(0, 110, 255)',<br>0.85:'rgb(100, 0, 255)',<br>1.0:'rgb(100, 0, 255)'<br>}<br> 其中 key 表示间隔位置，取值范围： [0,1]，value为颜色值。默认：heatmap.js标准配色方案</td></tr><tr><td style=\"white-space: nowrap;\"><code>opacity</code></td><td><code>Array</code></td><td>热力图透明度数组，取值范围[0,1]，0表示完全透明，1表示不透明，默认：[0,1]</td></tr><tr><td style=\"white-space: nowrap;\"><code>zooms</code></td><td><code>Array</code></td><td>支持的缩放级别范围，取值范围[3-18]，默认：[3,18]</td></tr></tbody></table>\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","slug":"高德地图 Javascript API 入门（七）","published":1,"updated":"2019-04-25T09:00:30.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaulq001xaeyyma9ne7k5","content":"<h1 id=\"高德地图-Javascript-API-入门（七）\"><a href=\"#高德地图-Javascript-API-入门（七）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（七）\"></a>高德地图 Javascript API 入门（七）</h1><h2 id=\"热力图插件\"><a href=\"#热力图插件\" class=\"headerlink\" title=\"热力图插件\"></a>热力图插件</h2><h4 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 显示地图</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map=<span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">\"container\"</span>,&#123;</span><br><span class=\"line\">    resizeEnable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    center:[<span class=\"number\">116.397428</span>, <span class=\"number\">39.90923</span>],</span><br><span class=\"line\">    zoom:<span class=\"number\">11</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 坐标点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> points =[</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.191031</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.988585</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.389275</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.925818</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">60</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.287444</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.810742</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">200</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.481707</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.940089</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">30</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.410588</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.880172</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">200</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.394816</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.91181</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">10</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.416002</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.952917</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">150</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 加载热力图插件</span></span><br><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.Heatmap\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">var</span> heatmap=<span class=\"keyword\">new</span> AMap.Heatmap(map,&#123;</span><br><span class=\"line\">    \tradius:<span class=\"number\">50</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\theatmap.setDataSet(&#123;</span><br><span class=\"line\">   \t\tdata:points,</span><br><span class=\"line\">    \tmax:<span class=\"number\">100</span></span><br><span class=\"line\">   \t&#125;);</span><br><span class=\"line\">)&#125;;</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap701.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>AMap.Heatmap</p>\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>构造函数</th><th>说明</th></tr><tr><td><code>AMap.Heatmap(<span class=\"punderline\" title=\"叠加的地图对象，类型为AMap.Map\">map:<a href=\"http://lbs.amap.com/api/javascript-api/reference/map/\" target=\"_blank\" rel=\"noopener\">Map</a></span>,<span class=\"punderline\" title=\"参考HeatmapOptions列表中的说明\">opts:<a href=\"#m_HeatmapOptions\">HeatmapOptions</a></span>)</code></td><td>构造一个热力图插件对象，map为要叠加热力图的地图对象，opts属性参考HeatmapOptions列表中的说明。</td></tr></tbody></table>\n\n<p>options</p>\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>HeatmapOptions</th><th>类型</th><th>说明</th></tr><tr><td style=\"white-space: nowrap;\"><code>radius</code></td><td><code>Number</code></td><td>热力图中单个点的半径，默认：30，单位：pixel</td></tr><tr><td style=\"white-space: nowrap;\"><code>gradient</code></td><td><code>Object</code></td><td>热力图的渐变区间，热力图按照设置的颜色及间隔显示热力图，例：<br>{<br>0.4:’rgb(0, 255, 255)’,<br>0.65:’rgb(0, 110, 255)’,<br>0.85:’rgb(100, 0, 255)’,<br>1.0:’rgb(100, 0, 255)’<br>}<br> 其中 key 表示间隔位置，取值范围： [0,1]，value为颜色值。默认：heatmap.js标准配色方案</td></tr><tr><td style=\"white-space: nowrap;\"><code>opacity</code></td><td><code>Array</code></td><td>热力图透明度数组，取值范围[0,1]，0表示完全透明，1表示不透明，默认：[0,1]</td></tr><tr><td style=\"white-space: nowrap;\"><code>zooms</code></td><td><code>Array</code></td><td>支持的缩放级别范围，取值范围[3-18]，默认：[3,18]</td></tr></tbody></table>\n\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"高德地图-Javascript-API-入门（七）\"><a href=\"#高德地图-Javascript-API-入门（七）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（七）\"></a>高德地图 Javascript API 入门（七）</h1><h2 id=\"热力图插件\"><a href=\"#热力图插件\" class=\"headerlink\" title=\"热力图插件\"></a>热力图插件</h2><h4 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 显示地图</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map=<span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">\"container\"</span>,&#123;</span><br><span class=\"line\">    resizeEnable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    center:[<span class=\"number\">116.397428</span>, <span class=\"number\">39.90923</span>],</span><br><span class=\"line\">    zoom:<span class=\"number\">11</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 坐标点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> points =[</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.191031</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.988585</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.389275</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.925818</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">60</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.287444</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.810742</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">200</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.481707</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.940089</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">30</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.410588</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.880172</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">200</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.394816</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.91181</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">10</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"lng\"</span>:<span class=\"number\">116.416002</span>,<span class=\"string\">\"lat\"</span>:<span class=\"number\">39.952917</span>,<span class=\"string\">\"count\"</span>:<span class=\"number\">150</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 加载热力图插件</span></span><br><span class=\"line\">map.plugin([<span class=\"string\">\"AMap.Heatmap\"</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">var</span> heatmap=<span class=\"keyword\">new</span> AMap.Heatmap(map,&#123;</span><br><span class=\"line\">    \tradius:<span class=\"number\">50</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\theatmap.setDataSet(&#123;</span><br><span class=\"line\">   \t\tdata:points,</span><br><span class=\"line\">    \tmax:<span class=\"number\">100</span></span><br><span class=\"line\">   \t&#125;);</span><br><span class=\"line\">)&#125;;</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap701.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>AMap.Heatmap</p>\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>构造函数</th><th>说明</th></tr><tr><td><code>AMap.Heatmap(<span class=\"punderline\" title=\"叠加的地图对象，类型为AMap.Map\">map:<a href=\"http://lbs.amap.com/api/javascript-api/reference/map/\" target=\"_blank\" rel=\"noopener\">Map</a></span>,<span class=\"punderline\" title=\"参考HeatmapOptions列表中的说明\">opts:<a href=\"#m_HeatmapOptions\">HeatmapOptions</a></span>)</code></td><td>构造一个热力图插件对象，map为要叠加热力图的地图对象，opts属性参考HeatmapOptions列表中的说明。</td></tr></tbody></table>\n\n<p>options</p>\n<table style=\"width:100%;border-collapse:collapse;\"><tbody><tr><th>HeatmapOptions</th><th>类型</th><th>说明</th></tr><tr><td style=\"white-space: nowrap;\"><code>radius</code></td><td><code>Number</code></td><td>热力图中单个点的半径，默认：30，单位：pixel</td></tr><tr><td style=\"white-space: nowrap;\"><code>gradient</code></td><td><code>Object</code></td><td>热力图的渐变区间，热力图按照设置的颜色及间隔显示热力图，例：<br>{<br>0.4:’rgb(0, 255, 255)’,<br>0.65:’rgb(0, 110, 255)’,<br>0.85:’rgb(100, 0, 255)’,<br>1.0:’rgb(100, 0, 255)’<br>}<br> 其中 key 表示间隔位置，取值范围： [0,1]，value为颜色值。默认：heatmap.js标准配色方案</td></tr><tr><td style=\"white-space: nowrap;\"><code>opacity</code></td><td><code>Array</code></td><td>热力图透明度数组，取值范围[0,1]，0表示完全透明，1表示不透明，默认：[0,1]</td></tr><tr><td style=\"white-space: nowrap;\"><code>zooms</code></td><td><code>Array</code></td><td>支持的缩放级别范围，取值范围[3-18]，默认：[3,18]</td></tr></tbody></table>\n\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n"},{"title":"[转]如何监听DOM树改变","date":"2017-11-08T02:06:44.000Z","_content":"\n# 如何监听DOM树改变[转]\n\n## 读前必看\n\nMutationObserver MDN[https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver)     \n\nMutation Observer API   [http://javascript.ruanyifeng.com/dom/mutationobserver.html#toc10](http://javascript.ruanyifeng.com/dom/mutationobserver.html#toc10)\n\n\n## 1 概述\n\nMutation observer 是用于代替 Mutation events 作为观察DOM树结构发生变化时，做出相应处理的API。为什么要使用mutation observer 去代替 mutation events 呢，我们先了解一下mutation events\n\nMutation Events\n\nMutation events 是在 DOM3中定义，用于监听DOM树结构变化的事件\n\n### 它简单的用法如下：\n\n```js\n\ndocument.getElementById('list').addEventListener(\"DOMSubtreeModified\", function(){\n  console.log('列表中子元素被修改');\n}, false);\n\n```\n\n### Mutation 事件列表\n\nDOMAttrModified \nDOMAttributeNameChanged  \nDOMCharacterDataModified  \nDOMElementNameChanged  \nDOMNodeInserted  \nDOMNodeRemoved  \nDOMNodeInsertedIntoDocument \nDOMSubtreeModified  \n\n其中DOMNodeRemoved，DOMNodeInserted 和 DOMSubtreeModified 分别用于 监听元素子项的删除，新增，修改(包括删除和新增），\nDOMAttrModified 是监听元素属性的修改，并且能够提供具体的修改动作。\n\n### Mutation Events遇到的问题\n\n浏览器兼容性问题\nIE9不支持Mutation Events\nWebkit内核不支持DOMAttrModified特性，\nDOMElementNameChanged和DOMAttributeNameChanged 在Firefox上不被支持。  \n性能问题\n\n1. Mutation Events是同步执行的，它的每次调用，都需要从事件队列中取出事件，执行，然后事件队列中移除，期间需要移动队列元素。如果事件触发的较为频繁的话，每一次都需要执行上面的这些步骤，那么浏览器会被拖慢。   \n2. Mutation Events本身是事件，所以捕获是采用的是事件冒泡的形式，如果冒泡捕获期间又触发了其他的MutationEvents的话，很有可能就会导致阻塞Javascript线程，甚至导致浏览器崩溃。\n\n`Mutation Observer`\n\nMutation Observer 是在DOM4中定义的，用于替代 mutation events 的新API，它的不同于events的是，所有监听操作以及相应处理都是在其他脚本执行完成之后异步执行的，并且是所以变动触发之后，将变得记录在数组中，统一进行回调的，也就是说，当你使用observer监听多个DOM变化时，并且这若干个DOM发生了变化，那么observer会将变化记录到变化数组中，等待一起都结束了，然后一次性的从变化数组中执行其对应的回调函数。\n\nMutation Observer 的浏览器兼容范围\n\n\n### 兼容性\n\n\n## 2 方法\n\n### 构造函数\n\n用来实例化一个Mutation观察者对象，其中的参数是一个回调函数，它是会在指定的DOM节点发送变化后，执行的函数，并且会被传入两个参数，一个是变化记录数组(MutationRecord)，另一个是观察者对象本身\n\n```js\n\nnew MutationObserver(function(records, itself){});\n\n```\n\n`observe`\n\n在观察者对象上，注册需要观察的DOM节点，以及相应的参数\n\n```js\n\nvoid observe(Node target, optional MutationObserverInit options)\n\n```\n\n其中的可选参数 MutationObserverInit的属性如下：\n\n`childLIst` 观察目标节点的子节点的新增和删除。  \n`attributes` 观察目标节点的属性节点(新增或删除了某个属性,以及某个属性的属性值发生了变化)。  \n`characterData` 如果目标节点为characterData节点(一种抽象接口,具体可以为文本节点,注释节点,以及处理指令节点)时,也要观察该节点的文本内容是否发生变化  \n`subtree` 观察目标节点的所有后代节点(观察目标节点所包含的整棵DOM树上的上述三种节点变化)  \n`attributeOldValue` 在attributes属性已经设为true的前提下, 将发生变化的属性节点之前的属性值记录下来(记录到下面MutationRecord对象的oldValue属性中)  \n`characterDataOldValue` 在characterData属性已经设为true的前提下,将发生变化characterData节点之前的文本内容记录下来(记录到下面MutationRecord对象的oldValue属性中)  \n`attributeFilter` 一个属性名数组(不需要指定命名空间),只有该数组中包含的属性名发生变化时才会被观察到,其他名称的属性发生变化后会被忽略想要设置那些删选参数的话，\n如果想要使用哪个参数的话，就将其值设定为true  \n\n`disconnect`\n\n暂定在观察者对象上设置的节点的变化监听，直到重新调用observe方法\n\n`takeRecords`\n\n在观察者对象上调用takeRecords 会返回 其观察节点上的变化记录(MutationRecord)数组\n其中MutationRecord数组也会作为，观察者初始化时的回调函数的第一个参数\n其包含的属性如下：\n\n`type` 如果是属性发生变化,则返回attributes.如果是一个CharacterData节点发生变化,则返回characterData,如果是目标节点的某个子节点发生了变化,则返回childList.   \n`target` 返回此次变化影响到的节点,具体返回那种节点类型是根据type值的不同而不同的,如果type为attributes,则返回发生变化的属性节点所在的元素节点,如果type值为characterData,则返回发生变化的这个characterData节点.如果type为childList,则返回发生变化的子节点的父节点.    \n`addedNodes` 返回被添加的节点    \n`removedNodes` 返回被删除的节点  \n`previousSibling` 返回被添加或被删除的节点的前一个兄弟节点   \n`nextSibling` 返回被添加或被删除的节点的后一个兄弟节点   \n`attributeName` 返回变更属性的本地名称  \n`oldValue` 根据type值的不同,返回的值也会不同.如果type为attributes,则返回该属性变化之前的属性值.如果type为characterData,则返回该节点变化之前的文本数据.如果type为childList,则返回null   \n\n## 3 使用实例\n\n```js\n\n// Firefox和Chrome早期版本中带有前缀\nvar MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver\n// 选择目标节点\nvar target = document.querySelector('#some-id'); \n// 创建观察者对象\nvar observer = new MutationObserver(function(mutations) {  \n  mutations.forEach(function(mutation) { \n    console.log(mutation.type); \n  }); \n}); \n// 配置观察选项:\nvar config = { attributes: true, childList: true, characterData: true } \n// 传入目标节点和观察选项\nobserver.observe(target, config); \n// 随后,你还可以停止观察\nobserver.disconnect();\n\n```\n\n原文：[http://www.jianshu.com/p/b5c9e4c7b1e1](http://www.jianshu.com/p/b5c9e4c7b1e1)\n","source":"_posts/转-如何监听DOM树改变.md","raw":"---\ntitle: '[转]如何监听DOM树改变'\ndate: 2017-11-08 10:06:44\ntags:\n---\n\n# 如何监听DOM树改变[转]\n\n## 读前必看\n\nMutationObserver MDN[https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver)     \n\nMutation Observer API   [http://javascript.ruanyifeng.com/dom/mutationobserver.html#toc10](http://javascript.ruanyifeng.com/dom/mutationobserver.html#toc10)\n\n\n## 1 概述\n\nMutation observer 是用于代替 Mutation events 作为观察DOM树结构发生变化时，做出相应处理的API。为什么要使用mutation observer 去代替 mutation events 呢，我们先了解一下mutation events\n\nMutation Events\n\nMutation events 是在 DOM3中定义，用于监听DOM树结构变化的事件\n\n### 它简单的用法如下：\n\n```js\n\ndocument.getElementById('list').addEventListener(\"DOMSubtreeModified\", function(){\n  console.log('列表中子元素被修改');\n}, false);\n\n```\n\n### Mutation 事件列表\n\nDOMAttrModified \nDOMAttributeNameChanged  \nDOMCharacterDataModified  \nDOMElementNameChanged  \nDOMNodeInserted  \nDOMNodeRemoved  \nDOMNodeInsertedIntoDocument \nDOMSubtreeModified  \n\n其中DOMNodeRemoved，DOMNodeInserted 和 DOMSubtreeModified 分别用于 监听元素子项的删除，新增，修改(包括删除和新增），\nDOMAttrModified 是监听元素属性的修改，并且能够提供具体的修改动作。\n\n### Mutation Events遇到的问题\n\n浏览器兼容性问题\nIE9不支持Mutation Events\nWebkit内核不支持DOMAttrModified特性，\nDOMElementNameChanged和DOMAttributeNameChanged 在Firefox上不被支持。  \n性能问题\n\n1. Mutation Events是同步执行的，它的每次调用，都需要从事件队列中取出事件，执行，然后事件队列中移除，期间需要移动队列元素。如果事件触发的较为频繁的话，每一次都需要执行上面的这些步骤，那么浏览器会被拖慢。   \n2. Mutation Events本身是事件，所以捕获是采用的是事件冒泡的形式，如果冒泡捕获期间又触发了其他的MutationEvents的话，很有可能就会导致阻塞Javascript线程，甚至导致浏览器崩溃。\n\n`Mutation Observer`\n\nMutation Observer 是在DOM4中定义的，用于替代 mutation events 的新API，它的不同于events的是，所有监听操作以及相应处理都是在其他脚本执行完成之后异步执行的，并且是所以变动触发之后，将变得记录在数组中，统一进行回调的，也就是说，当你使用observer监听多个DOM变化时，并且这若干个DOM发生了变化，那么observer会将变化记录到变化数组中，等待一起都结束了，然后一次性的从变化数组中执行其对应的回调函数。\n\nMutation Observer 的浏览器兼容范围\n\n\n### 兼容性\n\n\n## 2 方法\n\n### 构造函数\n\n用来实例化一个Mutation观察者对象，其中的参数是一个回调函数，它是会在指定的DOM节点发送变化后，执行的函数，并且会被传入两个参数，一个是变化记录数组(MutationRecord)，另一个是观察者对象本身\n\n```js\n\nnew MutationObserver(function(records, itself){});\n\n```\n\n`observe`\n\n在观察者对象上，注册需要观察的DOM节点，以及相应的参数\n\n```js\n\nvoid observe(Node target, optional MutationObserverInit options)\n\n```\n\n其中的可选参数 MutationObserverInit的属性如下：\n\n`childLIst` 观察目标节点的子节点的新增和删除。  \n`attributes` 观察目标节点的属性节点(新增或删除了某个属性,以及某个属性的属性值发生了变化)。  \n`characterData` 如果目标节点为characterData节点(一种抽象接口,具体可以为文本节点,注释节点,以及处理指令节点)时,也要观察该节点的文本内容是否发生变化  \n`subtree` 观察目标节点的所有后代节点(观察目标节点所包含的整棵DOM树上的上述三种节点变化)  \n`attributeOldValue` 在attributes属性已经设为true的前提下, 将发生变化的属性节点之前的属性值记录下来(记录到下面MutationRecord对象的oldValue属性中)  \n`characterDataOldValue` 在characterData属性已经设为true的前提下,将发生变化characterData节点之前的文本内容记录下来(记录到下面MutationRecord对象的oldValue属性中)  \n`attributeFilter` 一个属性名数组(不需要指定命名空间),只有该数组中包含的属性名发生变化时才会被观察到,其他名称的属性发生变化后会被忽略想要设置那些删选参数的话，\n如果想要使用哪个参数的话，就将其值设定为true  \n\n`disconnect`\n\n暂定在观察者对象上设置的节点的变化监听，直到重新调用observe方法\n\n`takeRecords`\n\n在观察者对象上调用takeRecords 会返回 其观察节点上的变化记录(MutationRecord)数组\n其中MutationRecord数组也会作为，观察者初始化时的回调函数的第一个参数\n其包含的属性如下：\n\n`type` 如果是属性发生变化,则返回attributes.如果是一个CharacterData节点发生变化,则返回characterData,如果是目标节点的某个子节点发生了变化,则返回childList.   \n`target` 返回此次变化影响到的节点,具体返回那种节点类型是根据type值的不同而不同的,如果type为attributes,则返回发生变化的属性节点所在的元素节点,如果type值为characterData,则返回发生变化的这个characterData节点.如果type为childList,则返回发生变化的子节点的父节点.    \n`addedNodes` 返回被添加的节点    \n`removedNodes` 返回被删除的节点  \n`previousSibling` 返回被添加或被删除的节点的前一个兄弟节点   \n`nextSibling` 返回被添加或被删除的节点的后一个兄弟节点   \n`attributeName` 返回变更属性的本地名称  \n`oldValue` 根据type值的不同,返回的值也会不同.如果type为attributes,则返回该属性变化之前的属性值.如果type为characterData,则返回该节点变化之前的文本数据.如果type为childList,则返回null   \n\n## 3 使用实例\n\n```js\n\n// Firefox和Chrome早期版本中带有前缀\nvar MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver\n// 选择目标节点\nvar target = document.querySelector('#some-id'); \n// 创建观察者对象\nvar observer = new MutationObserver(function(mutations) {  \n  mutations.forEach(function(mutation) { \n    console.log(mutation.type); \n  }); \n}); \n// 配置观察选项:\nvar config = { attributes: true, childList: true, characterData: true } \n// 传入目标节点和观察选项\nobserver.observe(target, config); \n// 随后,你还可以停止观察\nobserver.disconnect();\n\n```\n\n原文：[http://www.jianshu.com/p/b5c9e4c7b1e1](http://www.jianshu.com/p/b5c9e4c7b1e1)\n","slug":"转-如何监听DOM树改变","published":1,"updated":"2019-04-25T09:00:43.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfauls0020aeyyz4dp0vby","content":"<h1 id=\"如何监听DOM树改变-转\"><a href=\"#如何监听DOM树改变-转\" class=\"headerlink\" title=\"如何监听DOM树改变[转]\"></a>如何监听DOM树改变[转]</h1><h2 id=\"读前必看\"><a href=\"#读前必看\" class=\"headerlink\" title=\"读前必看\"></a>读前必看</h2><p>MutationObserver MDN<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver</a>     </p>\n<p>Mutation Observer API   <a href=\"http://javascript.ruanyifeng.com/dom/mutationobserver.html#toc10\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/dom/mutationobserver.html#toc10</a></p>\n<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1 概述\"></a>1 概述</h2><p>Mutation observer 是用于代替 Mutation events 作为观察DOM树结构发生变化时，做出相应处理的API。为什么要使用mutation observer 去代替 mutation events 呢，我们先了解一下mutation events</p>\n<p>Mutation Events</p>\n<p>Mutation events 是在 DOM3中定义，用于监听DOM树结构变化的事件</p>\n<h3 id=\"它简单的用法如下：\"><a href=\"#它简单的用法如下：\" class=\"headerlink\" title=\"它简单的用法如下：\"></a>它简单的用法如下：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>).addEventListener(<span class=\"string\">\"DOMSubtreeModified\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'列表中子元素被修改'</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation-事件列表\"><a href=\"#Mutation-事件列表\" class=\"headerlink\" title=\"Mutation 事件列表\"></a>Mutation 事件列表</h3><p>DOMAttrModified<br>DOMAttributeNameChanged<br>DOMCharacterDataModified<br>DOMElementNameChanged<br>DOMNodeInserted<br>DOMNodeRemoved<br>DOMNodeInsertedIntoDocument<br>DOMSubtreeModified  </p>\n<p>其中DOMNodeRemoved，DOMNodeInserted 和 DOMSubtreeModified 分别用于 监听元素子项的删除，新增，修改(包括删除和新增），<br>DOMAttrModified 是监听元素属性的修改，并且能够提供具体的修改动作。</p>\n<h3 id=\"Mutation-Events遇到的问题\"><a href=\"#Mutation-Events遇到的问题\" class=\"headerlink\" title=\"Mutation Events遇到的问题\"></a>Mutation Events遇到的问题</h3><p>浏览器兼容性问题<br>IE9不支持Mutation Events<br>Webkit内核不支持DOMAttrModified特性，<br>DOMElementNameChanged和DOMAttributeNameChanged 在Firefox上不被支持。<br>性能问题</p>\n<ol>\n<li>Mutation Events是同步执行的，它的每次调用，都需要从事件队列中取出事件，执行，然后事件队列中移除，期间需要移动队列元素。如果事件触发的较为频繁的话，每一次都需要执行上面的这些步骤，那么浏览器会被拖慢。   </li>\n<li>Mutation Events本身是事件，所以捕获是采用的是事件冒泡的形式，如果冒泡捕获期间又触发了其他的MutationEvents的话，很有可能就会导致阻塞Javascript线程，甚至导致浏览器崩溃。</li>\n</ol>\n<p><code>Mutation Observer</code></p>\n<p>Mutation Observer 是在DOM4中定义的，用于替代 mutation events 的新API，它的不同于events的是，所有监听操作以及相应处理都是在其他脚本执行完成之后异步执行的，并且是所以变动触发之后，将变得记录在数组中，统一进行回调的，也就是说，当你使用observer监听多个DOM变化时，并且这若干个DOM发生了变化，那么observer会将变化记录到变化数组中，等待一起都结束了，然后一次性的从变化数组中执行其对应的回调函数。</p>\n<p>Mutation Observer 的浏览器兼容范围</p>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><h2 id=\"2-方法\"><a href=\"#2-方法\" class=\"headerlink\" title=\"2 方法\"></a>2 方法</h2><h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>用来实例化一个Mutation观察者对象，其中的参数是一个回调函数，它是会在指定的DOM节点发送变化后，执行的函数，并且会被传入两个参数，一个是变化记录数组(MutationRecord)，另一个是观察者对象本身</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">records, itself</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>observe</code></p>\n<p>在观察者对象上，注册需要观察的DOM节点，以及相应的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> observe(Node target, optional MutationObserverInit options)</span><br></pre></td></tr></table></figure>\n<p>其中的可选参数 MutationObserverInit的属性如下：</p>\n<p><code>childLIst</code> 观察目标节点的子节点的新增和删除。<br><code>attributes</code> 观察目标节点的属性节点(新增或删除了某个属性,以及某个属性的属性值发生了变化)。<br><code>characterData</code> 如果目标节点为characterData节点(一种抽象接口,具体可以为文本节点,注释节点,以及处理指令节点)时,也要观察该节点的文本内容是否发生变化<br><code>subtree</code> 观察目标节点的所有后代节点(观察目标节点所包含的整棵DOM树上的上述三种节点变化)<br><code>attributeOldValue</code> 在attributes属性已经设为true的前提下, 将发生变化的属性节点之前的属性值记录下来(记录到下面MutationRecord对象的oldValue属性中)<br><code>characterDataOldValue</code> 在characterData属性已经设为true的前提下,将发生变化characterData节点之前的文本内容记录下来(记录到下面MutationRecord对象的oldValue属性中)<br><code>attributeFilter</code> 一个属性名数组(不需要指定命名空间),只有该数组中包含的属性名发生变化时才会被观察到,其他名称的属性发生变化后会被忽略想要设置那些删选参数的话，<br>如果想要使用哪个参数的话，就将其值设定为true  </p>\n<p><code>disconnect</code></p>\n<p>暂定在观察者对象上设置的节点的变化监听，直到重新调用observe方法</p>\n<p><code>takeRecords</code></p>\n<p>在观察者对象上调用takeRecords 会返回 其观察节点上的变化记录(MutationRecord)数组<br>其中MutationRecord数组也会作为，观察者初始化时的回调函数的第一个参数<br>其包含的属性如下：</p>\n<p><code>type</code> 如果是属性发生变化,则返回attributes.如果是一个CharacterData节点发生变化,则返回characterData,如果是目标节点的某个子节点发生了变化,则返回childList.<br><code>target</code> 返回此次变化影响到的节点,具体返回那种节点类型是根据type值的不同而不同的,如果type为attributes,则返回发生变化的属性节点所在的元素节点,如果type值为characterData,则返回发生变化的这个characterData节点.如果type为childList,则返回发生变化的子节点的父节点.<br><code>addedNodes</code> 返回被添加的节点<br><code>removedNodes</code> 返回被删除的节点<br><code>previousSibling</code> 返回被添加或被删除的节点的前一个兄弟节点<br><code>nextSibling</code> 返回被添加或被删除的节点的后一个兄弟节点<br><code>attributeName</code> 返回变更属性的本地名称<br><code>oldValue</code> 根据type值的不同,返回的值也会不同.如果type为attributes,则返回该属性变化之前的属性值.如果type为characterData,则返回该节点变化之前的文本数据.如果type为childList,则返回null   </p>\n<h2 id=\"3-使用实例\"><a href=\"#3-使用实例\" class=\"headerlink\" title=\"3 使用实例\"></a>3 使用实例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Firefox和Chrome早期版本中带有前缀</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MutationObserver = <span class=\"built_in\">window</span>.MutationObserver || <span class=\"built_in\">window</span>.WebKitMutationObserver || <span class=\"built_in\">window</span>.MozMutationObserver</span><br><span class=\"line\"><span class=\"comment\">// 选择目标节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#some-id'</span>); </span><br><span class=\"line\"><span class=\"comment\">// 创建观察者对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutations</span>) </span>&#123;  </span><br><span class=\"line\">  mutations.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutation</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(mutation.type); </span><br><span class=\"line\">  &#125;); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"comment\">// 配置观察选项:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> config = &#123; <span class=\"attr\">attributes</span>: <span class=\"literal\">true</span>, <span class=\"attr\">childList</span>: <span class=\"literal\">true</span>, <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span> &#125; </span><br><span class=\"line\"><span class=\"comment\">// 传入目标节点和观察选项</span></span><br><span class=\"line\">observer.observe(target, config); </span><br><span class=\"line\"><span class=\"comment\">// 随后,你还可以停止观察</span></span><br><span class=\"line\">observer.disconnect();</span><br></pre></td></tr></table></figure>\n<p>原文：<a href=\"http://www.jianshu.com/p/b5c9e4c7b1e1\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/b5c9e4c7b1e1</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"如何监听DOM树改变-转\"><a href=\"#如何监听DOM树改变-转\" class=\"headerlink\" title=\"如何监听DOM树改变[转]\"></a>如何监听DOM树改变[转]</h1><h2 id=\"读前必看\"><a href=\"#读前必看\" class=\"headerlink\" title=\"读前必看\"></a>读前必看</h2><p>MutationObserver MDN<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver</a>     </p>\n<p>Mutation Observer API   <a href=\"http://javascript.ruanyifeng.com/dom/mutationobserver.html#toc10\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/dom/mutationobserver.html#toc10</a></p>\n<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1 概述\"></a>1 概述</h2><p>Mutation observer 是用于代替 Mutation events 作为观察DOM树结构发生变化时，做出相应处理的API。为什么要使用mutation observer 去代替 mutation events 呢，我们先了解一下mutation events</p>\n<p>Mutation Events</p>\n<p>Mutation events 是在 DOM3中定义，用于监听DOM树结构变化的事件</p>\n<h3 id=\"它简单的用法如下：\"><a href=\"#它简单的用法如下：\" class=\"headerlink\" title=\"它简单的用法如下：\"></a>它简单的用法如下：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>).addEventListener(<span class=\"string\">\"DOMSubtreeModified\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'列表中子元素被修改'</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation-事件列表\"><a href=\"#Mutation-事件列表\" class=\"headerlink\" title=\"Mutation 事件列表\"></a>Mutation 事件列表</h3><p>DOMAttrModified<br>DOMAttributeNameChanged<br>DOMCharacterDataModified<br>DOMElementNameChanged<br>DOMNodeInserted<br>DOMNodeRemoved<br>DOMNodeInsertedIntoDocument<br>DOMSubtreeModified  </p>\n<p>其中DOMNodeRemoved，DOMNodeInserted 和 DOMSubtreeModified 分别用于 监听元素子项的删除，新增，修改(包括删除和新增），<br>DOMAttrModified 是监听元素属性的修改，并且能够提供具体的修改动作。</p>\n<h3 id=\"Mutation-Events遇到的问题\"><a href=\"#Mutation-Events遇到的问题\" class=\"headerlink\" title=\"Mutation Events遇到的问题\"></a>Mutation Events遇到的问题</h3><p>浏览器兼容性问题<br>IE9不支持Mutation Events<br>Webkit内核不支持DOMAttrModified特性，<br>DOMElementNameChanged和DOMAttributeNameChanged 在Firefox上不被支持。<br>性能问题</p>\n<ol>\n<li>Mutation Events是同步执行的，它的每次调用，都需要从事件队列中取出事件，执行，然后事件队列中移除，期间需要移动队列元素。如果事件触发的较为频繁的话，每一次都需要执行上面的这些步骤，那么浏览器会被拖慢。   </li>\n<li>Mutation Events本身是事件，所以捕获是采用的是事件冒泡的形式，如果冒泡捕获期间又触发了其他的MutationEvents的话，很有可能就会导致阻塞Javascript线程，甚至导致浏览器崩溃。</li>\n</ol>\n<p><code>Mutation Observer</code></p>\n<p>Mutation Observer 是在DOM4中定义的，用于替代 mutation events 的新API，它的不同于events的是，所有监听操作以及相应处理都是在其他脚本执行完成之后异步执行的，并且是所以变动触发之后，将变得记录在数组中，统一进行回调的，也就是说，当你使用observer监听多个DOM变化时，并且这若干个DOM发生了变化，那么observer会将变化记录到变化数组中，等待一起都结束了，然后一次性的从变化数组中执行其对应的回调函数。</p>\n<p>Mutation Observer 的浏览器兼容范围</p>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><h2 id=\"2-方法\"><a href=\"#2-方法\" class=\"headerlink\" title=\"2 方法\"></a>2 方法</h2><h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>用来实例化一个Mutation观察者对象，其中的参数是一个回调函数，它是会在指定的DOM节点发送变化后，执行的函数，并且会被传入两个参数，一个是变化记录数组(MutationRecord)，另一个是观察者对象本身</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">records, itself</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>observe</code></p>\n<p>在观察者对象上，注册需要观察的DOM节点，以及相应的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> observe(Node target, optional MutationObserverInit options)</span><br></pre></td></tr></table></figure>\n<p>其中的可选参数 MutationObserverInit的属性如下：</p>\n<p><code>childLIst</code> 观察目标节点的子节点的新增和删除。<br><code>attributes</code> 观察目标节点的属性节点(新增或删除了某个属性,以及某个属性的属性值发生了变化)。<br><code>characterData</code> 如果目标节点为characterData节点(一种抽象接口,具体可以为文本节点,注释节点,以及处理指令节点)时,也要观察该节点的文本内容是否发生变化<br><code>subtree</code> 观察目标节点的所有后代节点(观察目标节点所包含的整棵DOM树上的上述三种节点变化)<br><code>attributeOldValue</code> 在attributes属性已经设为true的前提下, 将发生变化的属性节点之前的属性值记录下来(记录到下面MutationRecord对象的oldValue属性中)<br><code>characterDataOldValue</code> 在characterData属性已经设为true的前提下,将发生变化characterData节点之前的文本内容记录下来(记录到下面MutationRecord对象的oldValue属性中)<br><code>attributeFilter</code> 一个属性名数组(不需要指定命名空间),只有该数组中包含的属性名发生变化时才会被观察到,其他名称的属性发生变化后会被忽略想要设置那些删选参数的话，<br>如果想要使用哪个参数的话，就将其值设定为true  </p>\n<p><code>disconnect</code></p>\n<p>暂定在观察者对象上设置的节点的变化监听，直到重新调用observe方法</p>\n<p><code>takeRecords</code></p>\n<p>在观察者对象上调用takeRecords 会返回 其观察节点上的变化记录(MutationRecord)数组<br>其中MutationRecord数组也会作为，观察者初始化时的回调函数的第一个参数<br>其包含的属性如下：</p>\n<p><code>type</code> 如果是属性发生变化,则返回attributes.如果是一个CharacterData节点发生变化,则返回characterData,如果是目标节点的某个子节点发生了变化,则返回childList.<br><code>target</code> 返回此次变化影响到的节点,具体返回那种节点类型是根据type值的不同而不同的,如果type为attributes,则返回发生变化的属性节点所在的元素节点,如果type值为characterData,则返回发生变化的这个characterData节点.如果type为childList,则返回发生变化的子节点的父节点.<br><code>addedNodes</code> 返回被添加的节点<br><code>removedNodes</code> 返回被删除的节点<br><code>previousSibling</code> 返回被添加或被删除的节点的前一个兄弟节点<br><code>nextSibling</code> 返回被添加或被删除的节点的后一个兄弟节点<br><code>attributeName</code> 返回变更属性的本地名称<br><code>oldValue</code> 根据type值的不同,返回的值也会不同.如果type为attributes,则返回该属性变化之前的属性值.如果type为characterData,则返回该节点变化之前的文本数据.如果type为childList,则返回null   </p>\n<h2 id=\"3-使用实例\"><a href=\"#3-使用实例\" class=\"headerlink\" title=\"3 使用实例\"></a>3 使用实例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Firefox和Chrome早期版本中带有前缀</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MutationObserver = <span class=\"built_in\">window</span>.MutationObserver || <span class=\"built_in\">window</span>.WebKitMutationObserver || <span class=\"built_in\">window</span>.MozMutationObserver</span><br><span class=\"line\"><span class=\"comment\">// 选择目标节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#some-id'</span>); </span><br><span class=\"line\"><span class=\"comment\">// 创建观察者对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutations</span>) </span>&#123;  </span><br><span class=\"line\">  mutations.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutation</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(mutation.type); </span><br><span class=\"line\">  &#125;); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"comment\">// 配置观察选项:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> config = &#123; <span class=\"attr\">attributes</span>: <span class=\"literal\">true</span>, <span class=\"attr\">childList</span>: <span class=\"literal\">true</span>, <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span> &#125; </span><br><span class=\"line\"><span class=\"comment\">// 传入目标节点和观察选项</span></span><br><span class=\"line\">observer.observe(target, config); </span><br><span class=\"line\"><span class=\"comment\">// 随后,你还可以停止观察</span></span><br><span class=\"line\">observer.disconnect();</span><br></pre></td></tr></table></figure>\n<p>原文：<a href=\"http://www.jianshu.com/p/b5c9e4c7b1e1\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/b5c9e4c7b1e1</a></p>\n"},{"title":"Javascript 继承","date":"2018-09-06T09:19:54.000Z","_content":"\n## 继承\n### 构造函数继承\n\n```js\nfunction Parent() {\n    this.name='parent';\n}\n\nParent.prototype.run=function () {\n    console.log('We can run');\n}\n\nfunction Child() {\n    Parent.call(this);\n}\n\nlet c=new Child();\nc.name; // 'parent'\nc.run(); // undefined\n```\n\n- 缺点  \n1. 无法继承父类原型上的方法\n\n### 原型链实现继承\n\n```js\nfunction Parent() {\n    this.name='parent';\n    this.colors=[\"red\",\"yellow\"];\n}\n\nParent.prototype.run=function () {\n    console.log('We can run');\n}\n\nfunction Child() {\n    \n}\n\nChild.prototype=new Parent();\nChild.prototype.constructor=Child;   \n\nvar c1=new Child();\nvar c2=new Child();\n\nc1.colors; // ['red','yellow']\nc2.colors; // ['red','yellow']\n\nc1.colors.push('green');\n\nc1.colors; // ['red','yellow','green']\nc2.colors; // ['red','yellow','green']\n```\n\n- 缺点  \n1. 子类共用一个父类的实例，造成数据污染  \n1. 创建子类实例时，无法向父类构造函数传参\n\n### 组合式继承\n\n```js\nfunction Parent() {\n    this.name='parent';\n    this.colors=[\"red\",\"yellow\"];\n    console.log(\"I've executed\");\n}\n\nParent.prototype.run=function () {\n    console.log('We can run');\n}\n\nfunction Child() {\n    Parent.call(this);\n}\n\nChild.prototype=new Parent();\nChild.prototype.constructor=Child;\n\nvar c1=new Child(); // \"I've executed\" \"I've executed\"\nvar c2=new Child(); // \"I've executed\" \"I've executed\"\n\nc1.colors; // ['red,yellow']\nc2.colors; // ['red,yellow']\n\nc1.colors.push('green');\n\nc1.colors; // ['red,yellow','green']\nc2.colors; // ['red,yellow']\n```\n\n- 缺点  \n1. 每新建一个子类都会调用两次父类构造器\n\n### 寄生组合式继承\n\n```js\n\nfunction Parent() {\n    this.name='parent';\n    this.colors=[\"red\",\"yellow\"];\n}\n\nParent.prototype.run=function () {\n    console.log('We can run');\n}\n\n\nfunction Child() {\n    Parent.call(this);\n}\nfunction Super() {/* noop */}\nSuper.prototype=Parent.prototype;\nChild.prototype=new Super();\nChild.prototype.constructor=Child;\n\n```\n\n- 特点  \n1. 完美实现继承\n2. 利用寄生函数实现父类构造函数只执行一次，将原型上的方法挂载到寄生函数上，最后将寄生函数的实例作为子类的原型对象\n\n\n### ES6 继承\n\n```js\n\nclass Parent {\n    constructor() {\n        this.name='parent';\n        this.colors=[\"red\",\"yellow\"];\n    }\n    run() {\n        console.log('We can run');\n    }\n}\n\nclass Child extends Parent{\n    constructor() {\n        super();\n        this.name='child';\n    }\n}\n\n```\n\n- 特点\n1. 简单明了 \n1. 只是一种语法糖而已\n\n- 下面是babel将ES6转成ES5继承的实现\n\n### Babel 编译后的ES5代码\n\n```js\n\"use strict\";\n\n// 创建类\nvar _createClass = function() {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\"in descriptor)\n                descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }\n    return function(Constructor, protoProps, staticProps) {\n        // 定义原型对象的属性、方法\n        if (protoProps)\n            defineProperties(Constructor.prototype, protoProps);\n        // 定义类的静态属性、方法\n        if (staticProps)\n            defineProperties(Constructor, staticProps);\n        return Constructor;\n    }\n    ;\n}();\n// 确保子类初始化时调用super\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n// 继承\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    // 利用 Object.crete 创建了一个父类原型对象的新实例，并且修正了构造器指向\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    // 将子类原型链链到父类上\n    if (superClass)\n        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n// 安全检测，确保用 'new' 操作的构造函数\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nvar Parent = function() {\n    function Parent() {\n        _classCallCheck(this, Parent);\n\n        this.name = 'parent';\n        this.colors = [\"red\", \"yellow\"];\n    }\n\n    _createClass(Parent, [{\n        key: \"run\",\n        value: function run() {\n            console.log('We can run');\n        }\n    }]);\n\n    return Parent;\n}();\n\nvar Child = function(_Parent) {\n    _inherits(Child, _Parent);\n\n    function Child() {\n        _classCallCheck(this, Child);\n\n        var _this = _possibleConstructorReturn(this, (Child.__proto__ || Object.getPrototypeOf(Child)).call(this));\n\n        _this.name = 'child';\n        return _this;\n    }\n\n    return Child;\n}(Parent);\n\n\n```\n","source":"_posts/Javascript-类与继承.md","raw":"---\ntitle: Javascript 继承\ndate: 2018-09-06 17:19:54\ntags:\n---\n\n## 继承\n### 构造函数继承\n\n```js\nfunction Parent() {\n    this.name='parent';\n}\n\nParent.prototype.run=function () {\n    console.log('We can run');\n}\n\nfunction Child() {\n    Parent.call(this);\n}\n\nlet c=new Child();\nc.name; // 'parent'\nc.run(); // undefined\n```\n\n- 缺点  \n1. 无法继承父类原型上的方法\n\n### 原型链实现继承\n\n```js\nfunction Parent() {\n    this.name='parent';\n    this.colors=[\"red\",\"yellow\"];\n}\n\nParent.prototype.run=function () {\n    console.log('We can run');\n}\n\nfunction Child() {\n    \n}\n\nChild.prototype=new Parent();\nChild.prototype.constructor=Child;   \n\nvar c1=new Child();\nvar c2=new Child();\n\nc1.colors; // ['red','yellow']\nc2.colors; // ['red','yellow']\n\nc1.colors.push('green');\n\nc1.colors; // ['red','yellow','green']\nc2.colors; // ['red','yellow','green']\n```\n\n- 缺点  \n1. 子类共用一个父类的实例，造成数据污染  \n1. 创建子类实例时，无法向父类构造函数传参\n\n### 组合式继承\n\n```js\nfunction Parent() {\n    this.name='parent';\n    this.colors=[\"red\",\"yellow\"];\n    console.log(\"I've executed\");\n}\n\nParent.prototype.run=function () {\n    console.log('We can run');\n}\n\nfunction Child() {\n    Parent.call(this);\n}\n\nChild.prototype=new Parent();\nChild.prototype.constructor=Child;\n\nvar c1=new Child(); // \"I've executed\" \"I've executed\"\nvar c2=new Child(); // \"I've executed\" \"I've executed\"\n\nc1.colors; // ['red,yellow']\nc2.colors; // ['red,yellow']\n\nc1.colors.push('green');\n\nc1.colors; // ['red,yellow','green']\nc2.colors; // ['red,yellow']\n```\n\n- 缺点  \n1. 每新建一个子类都会调用两次父类构造器\n\n### 寄生组合式继承\n\n```js\n\nfunction Parent() {\n    this.name='parent';\n    this.colors=[\"red\",\"yellow\"];\n}\n\nParent.prototype.run=function () {\n    console.log('We can run');\n}\n\n\nfunction Child() {\n    Parent.call(this);\n}\nfunction Super() {/* noop */}\nSuper.prototype=Parent.prototype;\nChild.prototype=new Super();\nChild.prototype.constructor=Child;\n\n```\n\n- 特点  \n1. 完美实现继承\n2. 利用寄生函数实现父类构造函数只执行一次，将原型上的方法挂载到寄生函数上，最后将寄生函数的实例作为子类的原型对象\n\n\n### ES6 继承\n\n```js\n\nclass Parent {\n    constructor() {\n        this.name='parent';\n        this.colors=[\"red\",\"yellow\"];\n    }\n    run() {\n        console.log('We can run');\n    }\n}\n\nclass Child extends Parent{\n    constructor() {\n        super();\n        this.name='child';\n    }\n}\n\n```\n\n- 特点\n1. 简单明了 \n1. 只是一种语法糖而已\n\n- 下面是babel将ES6转成ES5继承的实现\n\n### Babel 编译后的ES5代码\n\n```js\n\"use strict\";\n\n// 创建类\nvar _createClass = function() {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\"in descriptor)\n                descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }\n    return function(Constructor, protoProps, staticProps) {\n        // 定义原型对象的属性、方法\n        if (protoProps)\n            defineProperties(Constructor.prototype, protoProps);\n        // 定义类的静态属性、方法\n        if (staticProps)\n            defineProperties(Constructor, staticProps);\n        return Constructor;\n    }\n    ;\n}();\n// 确保子类初始化时调用super\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n// 继承\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    // 利用 Object.crete 创建了一个父类原型对象的新实例，并且修正了构造器指向\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    // 将子类原型链链到父类上\n    if (superClass)\n        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n// 安全检测，确保用 'new' 操作的构造函数\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nvar Parent = function() {\n    function Parent() {\n        _classCallCheck(this, Parent);\n\n        this.name = 'parent';\n        this.colors = [\"red\", \"yellow\"];\n    }\n\n    _createClass(Parent, [{\n        key: \"run\",\n        value: function run() {\n            console.log('We can run');\n        }\n    }]);\n\n    return Parent;\n}();\n\nvar Child = function(_Parent) {\n    _inherits(Child, _Parent);\n\n    function Child() {\n        _classCallCheck(this, Child);\n\n        var _this = _possibleConstructorReturn(this, (Child.__proto__ || Object.getPrototypeOf(Child)).call(this));\n\n        _this.name = 'child';\n        return _this;\n    }\n\n    return Child;\n}(Parent);\n\n\n```\n","slug":"Javascript-类与继承","published":1,"updated":"2019-04-25T08:59:38.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaulu0022aeyyk7ddl682","content":"<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><h3 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=<span class=\"string\">'parent'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent.prototype.run=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'We can run'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c=<span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">c.name; <span class=\"comment\">// 'parent'</span></span><br><span class=\"line\">c.run(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点  </li>\n</ul>\n<ol>\n<li>无法继承父类原型上的方法</li>\n</ol>\n<h3 id=\"原型链实现继承\"><a href=\"#原型链实现继承\" class=\"headerlink\" title=\"原型链实现继承\"></a>原型链实现继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=<span class=\"string\">'parent'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.colors=[<span class=\"string\">\"red\"</span>,<span class=\"string\">\"yellow\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent.prototype.run=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'We can run'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype=<span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">Child.prototype.constructor=Child;   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c1=<span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"keyword\">var</span> c2=<span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"></span><br><span class=\"line\">c1.colors; <span class=\"comment\">// ['red','yellow']</span></span><br><span class=\"line\">c2.colors; <span class=\"comment\">// ['red','yellow']</span></span><br><span class=\"line\"></span><br><span class=\"line\">c1.colors.push(<span class=\"string\">'green'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">c1.colors; <span class=\"comment\">// ['red','yellow','green']</span></span><br><span class=\"line\">c2.colors; <span class=\"comment\">// ['red','yellow','green']</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点  </li>\n</ul>\n<ol>\n<li>子类共用一个父类的实例，造成数据污染  </li>\n<li>创建子类实例时，无法向父类构造函数传参</li>\n</ol>\n<h3 id=\"组合式继承\"><a href=\"#组合式继承\" class=\"headerlink\" title=\"组合式继承\"></a>组合式继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=<span class=\"string\">'parent'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.colors=[<span class=\"string\">\"red\"</span>,<span class=\"string\">\"yellow\"</span>];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"I've executed\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent.prototype.run=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'We can run'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype=<span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">Child.prototype.constructor=Child;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c1=<span class=\"keyword\">new</span> Child(); <span class=\"comment\">// \"I've executed\" \"I've executed\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c2=<span class=\"keyword\">new</span> Child(); <span class=\"comment\">// \"I've executed\" \"I've executed\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">c1.colors; <span class=\"comment\">// ['red,yellow']</span></span><br><span class=\"line\">c2.colors; <span class=\"comment\">// ['red,yellow']</span></span><br><span class=\"line\"></span><br><span class=\"line\">c1.colors.push(<span class=\"string\">'green'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">c1.colors; <span class=\"comment\">// ['red,yellow','green']</span></span><br><span class=\"line\">c2.colors; <span class=\"comment\">// ['red,yellow']</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点  </li>\n</ul>\n<ol>\n<li>每新建一个子类都会调用两次父类构造器</li>\n</ol>\n<h3 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=<span class=\"string\">'parent'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.colors=[<span class=\"string\">\"red\"</span>,<span class=\"string\">\"yellow\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent.prototype.run=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'We can run'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* noop */</span>&#125;</span><br><span class=\"line\">Super.prototype=Parent.prototype;</span><br><span class=\"line\">Child.prototype=<span class=\"keyword\">new</span> Super();</span><br><span class=\"line\">Child.prototype.constructor=Child;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>特点  </li>\n</ul>\n<ol>\n<li>完美实现继承</li>\n<li>利用寄生函数实现父类构造函数只执行一次，将原型上的方法挂载到寄生函数上，最后将寄生函数的实例作为子类的原型对象</li>\n</ol>\n<h3 id=\"ES6-继承\"><a href=\"#ES6-继承\" class=\"headerlink\" title=\"ES6 继承\"></a>ES6 继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=<span class=\"string\">'parent'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.colors=[<span class=\"string\">\"red\"</span>,<span class=\"string\">\"yellow\"</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    run() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'We can run'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=<span class=\"string\">'child'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>特点</li>\n</ul>\n<ol>\n<li>简单明了 </li>\n<li>只是一种语法糖而已</li>\n</ol>\n<ul>\n<li>下面是babel将ES6转成ES5继承的实现</li>\n</ul>\n<h3 id=\"Babel-编译后的ES5代码\"><a href=\"#Babel-编译后的ES5代码\" class=\"headerlink\" title=\"Babel 编译后的ES5代码\"></a>Babel 编译后的ES5代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> _createClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineProperties</span>(<span class=\"params\">target, props</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; props.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> descriptor = props[i];</span><br><span class=\"line\">            descriptor.enumerable = descriptor.enumerable || <span class=\"literal\">false</span>;</span><br><span class=\"line\">            descriptor.configurable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"value\"</span><span class=\"keyword\">in</span> descriptor)</span><br><span class=\"line\">                descriptor.writable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">Object</span>.defineProperty(target, descriptor.key, descriptor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Constructor, protoProps, staticProps</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义原型对象的属性、方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protoProps)</span><br><span class=\"line\">            defineProperties(Constructor.prototype, protoProps);</span><br><span class=\"line\">        <span class=\"comment\">// 定义类的静态属性、方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (staticProps)</span><br><span class=\"line\">            defineProperties(Constructor, staticProps);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Constructor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"><span class=\"comment\">// 确保子类初始化时调用super</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_possibleConstructorReturn</span>(<span class=\"params\">self, call</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!self) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ReferenceError</span>(<span class=\"string\">\"this hasn't been initialised - super() hasn't been called\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> call &amp;&amp; (<span class=\"keyword\">typeof</span> call === <span class=\"string\">\"object\"</span> || <span class=\"keyword\">typeof</span> call === <span class=\"string\">\"function\"</span>) ? call : self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_inherits</span>(<span class=\"params\">subClass, superClass</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> superClass !== <span class=\"string\">\"function\"</span> &amp;&amp; superClass !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Super expression must either be null or a function, not \"</span> + <span class=\"keyword\">typeof</span> superClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 利用 Object.crete 创建了一个父类原型对象的新实例，并且修正了构造器指向</span></span><br><span class=\"line\">    subClass.prototype = <span class=\"built_in\">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>: &#123;</span><br><span class=\"line\">            value: subClass,</span><br><span class=\"line\">            enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 将子类原型链链到父类上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (superClass)</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.setPrototypeOf ? <span class=\"built_in\">Object</span>.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 安全检测，确保用 'new' 操作的构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_classCallCheck</span>(<span class=\"params\">instance, Constructor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(instance <span class=\"keyword\">instanceof</span> Constructor)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Cannot call a class as a function\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _classCallCheck(<span class=\"keyword\">this</span>, Parent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"yellow\"</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _createClass(Parent, [&#123;</span><br><span class=\"line\">        key: <span class=\"string\">\"run\"</span>,</span><br><span class=\"line\">        value: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'We can run'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Parent;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_Parent</span>) </span>&#123;</span><br><span class=\"line\">    _inherits(Child, _Parent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _classCallCheck(<span class=\"keyword\">this</span>, Child);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = _possibleConstructorReturn(<span class=\"keyword\">this</span>, (Child.__proto__ || <span class=\"built_in\">Object</span>.getPrototypeOf(Child)).call(<span class=\"keyword\">this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        _this.name = <span class=\"string\">'child'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Child;</span><br><span class=\"line\">&#125;(Parent);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><h3 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=<span class=\"string\">'parent'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent.prototype.run=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'We can run'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c=<span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">c.name; <span class=\"comment\">// 'parent'</span></span><br><span class=\"line\">c.run(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点  </li>\n</ul>\n<ol>\n<li>无法继承父类原型上的方法</li>\n</ol>\n<h3 id=\"原型链实现继承\"><a href=\"#原型链实现继承\" class=\"headerlink\" title=\"原型链实现继承\"></a>原型链实现继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=<span class=\"string\">'parent'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.colors=[<span class=\"string\">\"red\"</span>,<span class=\"string\">\"yellow\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent.prototype.run=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'We can run'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype=<span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">Child.prototype.constructor=Child;   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c1=<span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"keyword\">var</span> c2=<span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"></span><br><span class=\"line\">c1.colors; <span class=\"comment\">// ['red','yellow']</span></span><br><span class=\"line\">c2.colors; <span class=\"comment\">// ['red','yellow']</span></span><br><span class=\"line\"></span><br><span class=\"line\">c1.colors.push(<span class=\"string\">'green'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">c1.colors; <span class=\"comment\">// ['red','yellow','green']</span></span><br><span class=\"line\">c2.colors; <span class=\"comment\">// ['red','yellow','green']</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点  </li>\n</ul>\n<ol>\n<li>子类共用一个父类的实例，造成数据污染  </li>\n<li>创建子类实例时，无法向父类构造函数传参</li>\n</ol>\n<h3 id=\"组合式继承\"><a href=\"#组合式继承\" class=\"headerlink\" title=\"组合式继承\"></a>组合式继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=<span class=\"string\">'parent'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.colors=[<span class=\"string\">\"red\"</span>,<span class=\"string\">\"yellow\"</span>];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"I've executed\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent.prototype.run=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'We can run'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype=<span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">Child.prototype.constructor=Child;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c1=<span class=\"keyword\">new</span> Child(); <span class=\"comment\">// \"I've executed\" \"I've executed\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c2=<span class=\"keyword\">new</span> Child(); <span class=\"comment\">// \"I've executed\" \"I've executed\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">c1.colors; <span class=\"comment\">// ['red,yellow']</span></span><br><span class=\"line\">c2.colors; <span class=\"comment\">// ['red,yellow']</span></span><br><span class=\"line\"></span><br><span class=\"line\">c1.colors.push(<span class=\"string\">'green'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">c1.colors; <span class=\"comment\">// ['red,yellow','green']</span></span><br><span class=\"line\">c2.colors; <span class=\"comment\">// ['red,yellow']</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点  </li>\n</ul>\n<ol>\n<li>每新建一个子类都会调用两次父类构造器</li>\n</ol>\n<h3 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=<span class=\"string\">'parent'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.colors=[<span class=\"string\">\"red\"</span>,<span class=\"string\">\"yellow\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent.prototype.run=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'We can run'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* noop */</span>&#125;</span><br><span class=\"line\">Super.prototype=Parent.prototype;</span><br><span class=\"line\">Child.prototype=<span class=\"keyword\">new</span> Super();</span><br><span class=\"line\">Child.prototype.constructor=Child;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>特点  </li>\n</ul>\n<ol>\n<li>完美实现继承</li>\n<li>利用寄生函数实现父类构造函数只执行一次，将原型上的方法挂载到寄生函数上，最后将寄生函数的实例作为子类的原型对象</li>\n</ol>\n<h3 id=\"ES6-继承\"><a href=\"#ES6-继承\" class=\"headerlink\" title=\"ES6 继承\"></a>ES6 继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=<span class=\"string\">'parent'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.colors=[<span class=\"string\">\"red\"</span>,<span class=\"string\">\"yellow\"</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    run() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'We can run'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=<span class=\"string\">'child'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>特点</li>\n</ul>\n<ol>\n<li>简单明了 </li>\n<li>只是一种语法糖而已</li>\n</ol>\n<ul>\n<li>下面是babel将ES6转成ES5继承的实现</li>\n</ul>\n<h3 id=\"Babel-编译后的ES5代码\"><a href=\"#Babel-编译后的ES5代码\" class=\"headerlink\" title=\"Babel 编译后的ES5代码\"></a>Babel 编译后的ES5代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> _createClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineProperties</span>(<span class=\"params\">target, props</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; props.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> descriptor = props[i];</span><br><span class=\"line\">            descriptor.enumerable = descriptor.enumerable || <span class=\"literal\">false</span>;</span><br><span class=\"line\">            descriptor.configurable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"value\"</span><span class=\"keyword\">in</span> descriptor)</span><br><span class=\"line\">                descriptor.writable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">Object</span>.defineProperty(target, descriptor.key, descriptor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Constructor, protoProps, staticProps</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义原型对象的属性、方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protoProps)</span><br><span class=\"line\">            defineProperties(Constructor.prototype, protoProps);</span><br><span class=\"line\">        <span class=\"comment\">// 定义类的静态属性、方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (staticProps)</span><br><span class=\"line\">            defineProperties(Constructor, staticProps);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Constructor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"><span class=\"comment\">// 确保子类初始化时调用super</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_possibleConstructorReturn</span>(<span class=\"params\">self, call</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!self) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ReferenceError</span>(<span class=\"string\">\"this hasn't been initialised - super() hasn't been called\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> call &amp;&amp; (<span class=\"keyword\">typeof</span> call === <span class=\"string\">\"object\"</span> || <span class=\"keyword\">typeof</span> call === <span class=\"string\">\"function\"</span>) ? call : self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_inherits</span>(<span class=\"params\">subClass, superClass</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> superClass !== <span class=\"string\">\"function\"</span> &amp;&amp; superClass !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Super expression must either be null or a function, not \"</span> + <span class=\"keyword\">typeof</span> superClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 利用 Object.crete 创建了一个父类原型对象的新实例，并且修正了构造器指向</span></span><br><span class=\"line\">    subClass.prototype = <span class=\"built_in\">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>: &#123;</span><br><span class=\"line\">            value: subClass,</span><br><span class=\"line\">            enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 将子类原型链链到父类上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (superClass)</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.setPrototypeOf ? <span class=\"built_in\">Object</span>.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 安全检测，确保用 'new' 操作的构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_classCallCheck</span>(<span class=\"params\">instance, Constructor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(instance <span class=\"keyword\">instanceof</span> Constructor)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Cannot call a class as a function\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _classCallCheck(<span class=\"keyword\">this</span>, Parent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"yellow\"</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _createClass(Parent, [&#123;</span><br><span class=\"line\">        key: <span class=\"string\">\"run\"</span>,</span><br><span class=\"line\">        value: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'We can run'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Parent;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_Parent</span>) </span>&#123;</span><br><span class=\"line\">    _inherits(Child, _Parent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _classCallCheck(<span class=\"keyword\">this</span>, Child);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = _possibleConstructorReturn(<span class=\"keyword\">this</span>, (Child.__proto__ || <span class=\"built_in\">Object</span>.getPrototypeOf(Child)).call(<span class=\"keyword\">this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        _this.name = <span class=\"string\">'child'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Child;</span><br><span class=\"line\">&#125;(Parent);</span><br></pre></td></tr></table></figure>\n"},{"title":"Canvas 实现一个简单的贪吃蛇","date":"2018-11-15T05:46:49.000Z","_content":"\n###  Intro \n[点击预览](https://yangfan2016.github.io/gluttonous-snake/)  \n在之前的代码风格，和样式上做了大调整，如下图，主要是美化了移动端\n\n- Before\n\n![before-pc](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/snake-game-old.png)\n\n- After\n\n![poster](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/snake-game.gif)\n\n![snake-game-pc](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/snake-game-pc.JPG)\n\n### Start\n移动端：中间的圆点按钮是重新开始，周围的方向按钮和游戏手柄操作一样  \nweb端：键盘方向键控制\n\n### Technology stack\n`Typescript`  \n`rollup`  \n`yarn`   \n`canvas API`  \n\n### Done\n- 本次得分  \n- 历史最高分   \n- 移动端、web端适配\n\n### Todo\n- 蛇的样式美化    \n- 游戏设置障碍物  \n\n### Review and issues\n[github源码](https://github.com/Yangfan2016/gluttonous-snake)  \n[关注我](https://github.com/Yangfan2016)","source":"_posts/Canvas-实现一个简单的贪吃蛇.md","raw":"---\ntitle: Canvas 实现一个简单的贪吃蛇\ndate: 2018-11-15 13:46:49\ntags:\n---\n\n###  Intro \n[点击预览](https://yangfan2016.github.io/gluttonous-snake/)  \n在之前的代码风格，和样式上做了大调整，如下图，主要是美化了移动端\n\n- Before\n\n![before-pc](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/snake-game-old.png)\n\n- After\n\n![poster](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/snake-game.gif)\n\n![snake-game-pc](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/snake-game-pc.JPG)\n\n### Start\n移动端：中间的圆点按钮是重新开始，周围的方向按钮和游戏手柄操作一样  \nweb端：键盘方向键控制\n\n### Technology stack\n`Typescript`  \n`rollup`  \n`yarn`   \n`canvas API`  \n\n### Done\n- 本次得分  \n- 历史最高分   \n- 移动端、web端适配\n\n### Todo\n- 蛇的样式美化    \n- 游戏设置障碍物  \n\n### Review and issues\n[github源码](https://github.com/Yangfan2016/gluttonous-snake)  \n[关注我](https://github.com/Yangfan2016)","slug":"Canvas-实现一个简单的贪吃蛇","published":1,"updated":"2019-04-25T08:59:38.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaum50029aeyy3f6j9yti","content":"<h3 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h3><p><a href=\"https://yangfan2016.github.io/gluttonous-snake/\" target=\"_blank\" rel=\"noopener\">点击预览</a><br>在之前的代码风格，和样式上做了大调整，如下图，主要是美化了移动端</p>\n<ul>\n<li>Before</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/snake-game-old.png\" alt=\"before-pc\" title=\"\">\n                </div>\n                <div class=\"image-caption\">before-pc</div>\n            </figure>\n<ul>\n<li>After</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/snake-game.gif\" alt=\"poster\" title=\"\">\n                </div>\n                <div class=\"image-caption\">poster</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/snake-game-pc.JPG\" alt=\"snake-game-pc\" title=\"\">\n                </div>\n                <div class=\"image-caption\">snake-game-pc</div>\n            </figure>\n<h3 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h3><p>移动端：中间的圆点按钮是重新开始，周围的方向按钮和游戏手柄操作一样<br>web端：键盘方向键控制</p>\n<h3 id=\"Technology-stack\"><a href=\"#Technology-stack\" class=\"headerlink\" title=\"Technology stack\"></a>Technology stack</h3><p><code>Typescript</code><br><code>rollup</code><br><code>yarn</code><br><code>canvas API</code>  </p>\n<h3 id=\"Done\"><a href=\"#Done\" class=\"headerlink\" title=\"Done\"></a>Done</h3><ul>\n<li>本次得分  </li>\n<li>历史最高分   </li>\n<li>移动端、web端适配</li>\n</ul>\n<h3 id=\"Todo\"><a href=\"#Todo\" class=\"headerlink\" title=\"Todo\"></a>Todo</h3><ul>\n<li>蛇的样式美化    </li>\n<li>游戏设置障碍物  </li>\n</ul>\n<h3 id=\"Review-and-issues\"><a href=\"#Review-and-issues\" class=\"headerlink\" title=\"Review and issues\"></a>Review and issues</h3><p><a href=\"https://github.com/Yangfan2016/gluttonous-snake\" target=\"_blank\" rel=\"noopener\">github源码</a><br><a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">关注我</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h3><p><a href=\"https://yangfan2016.github.io/gluttonous-snake/\" target=\"_blank\" rel=\"noopener\">点击预览</a><br>在之前的代码风格，和样式上做了大调整，如下图，主要是美化了移动端</p>\n<ul>\n<li>Before</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/snake-game-old.png\" alt=\"before-pc\" title=\"\">\n                </div>\n                <div class=\"image-caption\">before-pc</div>\n            </figure>\n<ul>\n<li>After</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/snake-game.gif\" alt=\"poster\" title=\"\">\n                </div>\n                <div class=\"image-caption\">poster</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/Blog/snake-game-pc.JPG\" alt=\"snake-game-pc\" title=\"\">\n                </div>\n                <div class=\"image-caption\">snake-game-pc</div>\n            </figure>\n<h3 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h3><p>移动端：中间的圆点按钮是重新开始，周围的方向按钮和游戏手柄操作一样<br>web端：键盘方向键控制</p>\n<h3 id=\"Technology-stack\"><a href=\"#Technology-stack\" class=\"headerlink\" title=\"Technology stack\"></a>Technology stack</h3><p><code>Typescript</code><br><code>rollup</code><br><code>yarn</code><br><code>canvas API</code>  </p>\n<h3 id=\"Done\"><a href=\"#Done\" class=\"headerlink\" title=\"Done\"></a>Done</h3><ul>\n<li>本次得分  </li>\n<li>历史最高分   </li>\n<li>移动端、web端适配</li>\n</ul>\n<h3 id=\"Todo\"><a href=\"#Todo\" class=\"headerlink\" title=\"Todo\"></a>Todo</h3><ul>\n<li>蛇的样式美化    </li>\n<li>游戏设置障碍物  </li>\n</ul>\n<h3 id=\"Review-and-issues\"><a href=\"#Review-and-issues\" class=\"headerlink\" title=\"Review and issues\"></a>Review and issues</h3><p><a href=\"https://github.com/Yangfan2016/gluttonous-snake\" target=\"_blank\" rel=\"noopener\">github源码</a><br><a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">关注我</a></p>\n"},{"title":"【译】React 函数式组件和 React 类有何不同","date":"2019-04-07T06:16:44.000Z","_content":"\n\n## React 函数式组件和 React 类有何不同？\n\n> - 原文地址：https://overreacted.io/how-are-function-components-different-from-classes/\n> - 原文作者：[Dan Abramov](https://github.com/gaearon)\n> - Markdown 地址：https://github.com/gaearon/overreacted.io/edit/master/src/pages/how-are-function-components-different-from-classes/index.md\n> - 译者：[Yangfan2016](https://github.com/Yangfan2016)\n> - 英文版权所有：[Dan Abramov](https://github.com/gaearon/overreacted.io/blob/master/LICENSE-posts)\n\n一段时间内，权威的答案是 “类” 可以提供更多的特性的访问（比如，`state`）。而 [Hooks](https://reactjs.org/docs/hooks-intro.html) 就不一样了\n\n或许你已了解到一种最佳实践。哪一种内？大多数基准测试都[不完美](https://medium.com/@dan_abramov/this-benchmark-is-indeed-flawed-c3d6b5b6f97f?source=your_stories_page---------------------------)，因此我得小心谨慎从它们中得出结论。性能本质上取决于代码做了什么而不是你选择函数还是类。我们观察到，它们的性能差别微不足道，尽管优化策略有些[不同](https://reactjs.org/docs/hooks-faq.html#are-hooks-slow-because-of-creating-functions-in-render)\n\n无论哪种情况下，我们都[不推荐](https://reactjs.org/docs/hooks-faq.html#should-i-use-hooks-classes-or-a-mix-of-both)重写你已存在的组件，除非你有其他原因，和不介意做第一个 “吃螃蟹” 的人。`Hooks` 仍然是新概念（就像 2014 年的 React），并且那些 “最佳实践” 至今都没有在教程里找到\n\n那么给我们留下了什么内？React 函数和类有本质的区别吗？当然，它们有（在心智模型层面上）。**这篇文章，我将找到它们之间的最大的不同。** 它自从 2015 的函数式组件被[引入](https://reactjs.org/blog/2015/09/10/react-v0.14-rc1.html#stateless-function-components)就存在了，但是它经常被忽视：\n\n>**函数式组件捕获已渲染的值**\n\n让我们拆开这个概念来理解\n\n---\n\n**注意：这篇文章并不做类或函数的价值评判。我只是描述下这两种编程模式在 React 中的不同。更多采用函数式的问题，请查阅 [Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#adoption-strategy)**\n\n---\n\n仔细看看这个组件：\n\n```jsx\nfunction ProfilePage(props) {\n  const showMessage = () => {\n    alert('Followed ' + props.user);\n  };\n\n  const handleClick = () => {\n    setTimeout(showMessage, 3000);\n  };\n\n  return (\n    <button onClick={handleClick}>Follow</button>\n  );\n}\n```\n\n它会显示一个用 `setTimeout` 模拟网络请求的按钮，并且之后会显示一个确认框。例如，如果 `props.user` 的值是 `'Dan'`，那么在 3 秒之后会显示 `'Followed Dan'`。足够简单\n\n*（注意，在这个例子中，不论我使用箭头函数还是声明式函数都没有关系。`function handleClick()` 都会以相同的方式正确执行）*\n\n我们如何用 “类” 重写内？原生翻译看起来可能是这样的：\n\n```jsx\nclass ProfilePage extends React.Component {\n  showMessage = () => {\n    alert('Followed ' + this.props.user);\n  };\n\n  handleClick = () => {\n    setTimeout(this.showMessage, 3000);\n  };\n\n  render() {\n    return <button onClick={this.handleClick}>Follow</button>;\n  }\n}\n```\n\n通常认为这两个代码片段是等价的。人们总是在这些模式进行自由的重构，而从来没有注意到它们的意义：\n\n![找出两个版本的不同](https://overreacted.io/wtf-1d3c7a341ee3fcadc79df00e7d872e4b.gif)\n\n**然而，这两个代码片段只有细微的差别。** 仔细看看它们，你发现不同了吗？就我个人而言，我花了一些时间才找到\n\n**前方剧透，如果你要自己弄明白的话，请看这个[在线 demo](https://codesandbox.io/s/pjqnl16lm7)** ，文章的剩下的部分都在解释它们的差别和为何它如此重要\n\n---\n\n在继续之前，我想强调下这篇文章描述的区别和 React Hooks 半毛钱关系都没有。甚至上面的例子里都没有提及 Hooks！\n\n文章都是关于 React 中所有函数和 “类” 的差异。如果你计划在 React app 中更频繁的使用函数，你可能更想理解它\n\n---\n\n**我们将用一个 React 应用中常见的 \"类\" bug 来图解这个区别**\n\n打来这个 **[sandbox 例子](https://codesandbox.io/s/pjqnl16lm7)**，有一个简介选择器和两个 `信息页面`（每个都有一个关注按钮） \n\n试着按下面的顺序触发这两个按钮：\n\n1. **单击** 其中一个关注按钮  \n2. 在 3 秒过去之前 **改变** 已选的简介  \n3. **读取** 警告框的内容  \n\n你会发现一个奇怪的差异：\n\n* 使用上面的 **function** `信息页面` ，点击关注 Dan 的简介后，然后导航到 Sophie 的简介依然弹框显示 `'Followed Dan'`\n\n* 使用上面的 **class** `信息页面` ，它会弹框显示 `'Followed Sophie'`：\n\n![步骤示范](https://overreacted.io/bug-386a449110202d5140d67336a0ade5a0.gif)\n\n---\n\n\n在这个例子中，第一个行为是正确的。**如果我关注了一个人，然后导航到另一个人的简介页面，我的组件不应该困惑我到底关注了谁。** 这个  “类” 实现明显是个 bug \n\n*（虽然你完全可以这样关注 [Sophie](https://mobile.twitter.com/sophiebits)）*\n\n---\n\n那么为何我们的 “类” 例子会如此表现内？\n\n让我们仔细看看我们 “类” 方法 `showMessage`：\n\n```jsx{3}\nclass ProfilePage extends React.Component {\n  showMessage = () => {\n    alert('Followed ' + this.props.user);\n  };\n```\n\n这个 “类” 方法从 `this.props.user` 读取。Props 在 React 里是不可变的，因此它们永远也不会改变。**然而，`this` *是*，总是多变的** \n\n事实上，这就是 “类” 里 `this` 的全部目的。React 自己会随着时间改变，以至于你可以在 `render` 和生命周期方法获取到最新的版本\n\n因此如果我们在请求期间重新渲染我们的组件，`this.props` 会改变。`showMessage` 方法获取到 `user` 将是 “更新的” `props`\n\n这个例子揭露出一个关于用户界面本质的有趣的观察。如果我们说 UI 概念上是当前应用状态的函数，**那么事件处理器就是渲染结果的一部分（就像可视化输出一样）**。我们事件处理器 “属于” 一个拥有特定 props 和 state 的特定渲染\n\n然而，这些回调读取 `this.props` 超时会断开这个联系。我们的 `showMessage` 回调不能 “绑” 到任何特定的渲染，那么它就会 “丢失” 正确的 props。读取 `this` 的链接就会被切断  \n\n---\n\n**我们假设函数式组件不存在。** 我们该如何解决这个问题内？\n\n我们想以某种方式 “修复” 带着正确的 props 的 `render` 和 `showMessage` 回调读取它们的联系。在某个地方，`props` 可能会丢失\n\n一种方式是在事件处理更早读取 `this.props`，并且显示通过超时完成处理器传递进去：\n\n```jsx{2,7}\nclass ProfilePage extends React.Component {\n  showMessage = (user) => {\n    alert('Followed ' + user);\n  };\n\n  handleClick = () => {\n    const {user} = this.props;\n    setTimeout(() => this.showMessage(user), 3000);\n  };\n\n  render() {\n    return <button onClick={this.handleClick}>Follow</button>;\n  }\n}\n```\n\n起[作用](https://codesandbox.io/s/3q737pw8lq)了。然而，这种方式随着时间变化显著造成代码更冗余和容易出错。如果我们需要不止一个 prop？如果我们也需要访问这个 state？**如果 `showMessage` 调用其他方法，而且这个方法也需要读取 `this.props.something` 或 `this.state.something`，我们又遇到了同样的问题。** 因此我们把 `this.props` 和 `this.state` 作为参数从 `showMessage` 传递给每个它调用的方法\n\n\n这么做会破坏 “类” 正常提供的工程学。它也难以记住和执行，这就是为何人们常常满足于 bug 的原因\n\n同样，在 `handleClick` 里内嵌 `alert` 代码并不能解决更大的问题。我们想用一种方式结构化代码允许被更多方法拆分，*但是* 还是要读取调用相应渲染的 props 和 state。**这个问题甚至都不是 React 独有的（你可以把这个可变对象如 `this`，放到任何一个 UI 库里都可以重现）**\n\n或许，我们可以在构造器中 *绑定* 这个方法？\n\n```jsx{4-5}\nclass ProfilePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.showMessage = this.showMessage.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  showMessage() {\n    alert('Followed ' + this.props.user);\n  }\n\n  handleClick() {\n    setTimeout(this.showMessage, 3000);\n  }\n\n  render() {\n    return <button onClick={this.handleClick}>Follow</button>;\n  }\n}\n```\n\n不，它不会解决任何问题。记住，问题所在是我们读取 `this.props` 太迟了（不是我们使用的语法有错！）**然而，如果我们完全依赖 JavaScript 闭包可以解决这个问题** \n\n闭包总是被回避，因为它[难](https://wsvincent.com/javascript-closure-settimeout-for-loop/)以理解，值会随着时间变化。但是在 React 中，props 和 state 是不可变的！（或者至少，它是强烈推荐）消除了\n闭包的主要阻碍\n\n这意味着如果你在一个特别的渲染遮蔽了 props 或 state，你总是可以指望它们完全相同：\n\n```jsx{3,4,9}\nclass ProfilePage extends React.Component {\n  render() {\n    // 捕获这个 props！\n    const props = this.props;\n\n    // 注意：我们在 *render 内部*。\n    // 这些不是类方法\n    const showMessage = () => {\n      alert('Followed ' + props.user);\n    };\n\n    const handleClick = () => {\n      setTimeout(showMessage, 3000);\n    };\n\n    return <button onClick={handleClick}>Follow</button>;\n  }\n}\n```\n\n\n**你已经捕获了渲染时的 props：**\n\n![捕捉口袋妖怪](https://overreacted.io/pokemon-fa483dd5699aac1350c57591770a49be.gif)\n\n这种方法，任何代码内置在它里面（包含在 `showMessage` 里），保证看到特定渲染的 props。React 不再 “移动我们的奶酪”\n\n**我们可以在里面添加我们想要的任何数量的辅助函数，并且它们都将使用捕获的 prop 和 state。** 闭包营救了我们！\n\n\n---\n\n[上面这个例子](https://codesandbox.io/s/oqxy9m7om5)是对的，但是看起来有点怪，如果你在 `render` 里定义了函数而不是使用 “类” 方法，那么在 “类” 里这么做有什么意义内？\n\n事实上，我们可以通过移除它周围的 “壳” 来简化代码：\n\n```jsx\nfunction ProfilePage(props) {\n  const showMessage = () => {\n    alert('Followed ' + props.user);\n  };\n\n  const handleClick = () => {\n    setTimeout(showMessage, 3000);\n  };\n\n  return (\n    <button onClick={handleClick}>Follow</button>\n  );\n}\n```\n\n就像上面这样，`props` 依然可以被捕获（React 把它们作为参数传递进去）。**不像 `this`，`props` 对象永远不可能因 React 而发生改变**\n\n如果你把函数定义里的 `props` 解构的话，会更清晰：\n\n```jsx{1,3}\nfunction ProfilePage({ user }) {\n  const showMessage = () => {\n    alert('Followed ' + user);\n  };\n\n  const handleClick = () => {\n    setTimeout(showMessage, 3000);\n  };\n\n  return (\n    <button onClick={handleClick}>Follow</button>\n  );\n}\n```\n\n当父组件携带不同的 props 渲染 `ProfilePage` 时，React 会再次调用 `ProfilePage` 函数。但是我们已经点击 “属于” 前一次渲染它自己的 `user` 的值和读取 `showMessage` 回调的那个事件处理程序。它们都原封不动\n\n这就是为何在这个版本的 [demo](https://codesandbox.io/s/pjqnl16lm7) 函数中，点击关注 Sophie 的简介和改变选项到 Sunil 依然弹出 `'Followed Sophie'`：\n\n![正确行为的 demo](https://overreacted.io/fix-84396c4b3982827bead96912a947904e.gif)\n\n这个行为是对的。*（尽管你可能也想关注 [Sunil](https://mobile.twitter.com/threepointone)）*\n\n---\n\n现在我们就理解了 React 中 “类” 和函数的最大差别：\n\n>**函数式组件捕获已渲染的值**\n\n**对于 Hooks，同样的原则也适用于 state。** 仔细看看下面这个例子：\n\n```jsx\nfunction MessageThread() {\n  const [message, setMessage] = useState('');\n\n  const showMessage = () => {\n    alert('You said: ' + message);\n  };\n\n  const handleSendClick = () => {\n    setTimeout(showMessage, 3000);\n  };\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n  };\n\n  return (\n    <>\n      <input value={message} onChange={handleMessageChange} />\n      <button onClick={handleSendClick}>Send</button>\n    </>\n  );\n}\n```\n\n（这里有一个[在线 demo](https://codesandbox.io/s/93m5mz9w24)）\n\n\n虽然这个消息 app UI 并不是很好，但它阐述了相同的原理：如果我发送了一个特别的消息，那么组件不应该困惑发送出去的消息实际是什么。这个函数组件的 `message` 捕获了 “属于” 返回浏览器调用的点击处理程序的渲染的 state。因此，`message` 被设置为我点击 “发送” 那一时刻的输入框的值\n\n---\n\n因此我们了解到 React 的函数默认捕获 props 和 state。**但是如果 *想* 读取到最新的不是属于这个特定渲染的 props 或 state？** 假如我们想[从未来读取它们](https://dev.to/scastiel/react-hooks-get-the-current-state-back-to-the-future-3op2)？\n\n在 “类” 中，你可以通过 `this.props` 或 `this.state` 读取到，因为 `this` 本身是可变的。React 改变了它。在函数式组件里，你也可以拥有一个可变值，该值由所有组件渲染器共享。它称为 “ref”：\n\n```js\nfunction MyComponent() {\n  const ref = useRef(null);\n  // 你可以读取或设置 `ref.current`\n  // ...\n}\n```\n\n然而，你需要自己管理它\n\n一个 ref 扮演者和一个实例字段[相同的角色](https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables)。它是进入可变命令式世界的转义口。你或许对 “DOM refs” 很熟悉，但是这个概念更宽泛。它就像你放东西的盒子一样\n\n即使在视觉上，`this.something` 看起来像是 `something.current` 的镜像。它们代表相同的概念\n\n默认情况下，React 不会为了在函数式组件的最新 props 或 state 创建 refs。大多数情况下你不需要它们，而且给它们赋值会浪费工作。然而，如果你喜欢的话，可以手动跟踪这个值：\n\n```jsx{3,6,15}\nfunction MessageThread() {\n  const [message, setMessage] = useState('');\n  const latestMessage = useRef('');\n\n  const showMessage = () => {\n    alert('You said: ' + latestMessage.current);\n  };\n\n  const handleSendClick = () => {\n    setTimeout(showMessage, 3000);\n  };\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n    latestMessage.current = e.target.value;\n  };\n```\n\n如果我们在 `showMessage` 读取 `message`，我们会看到我们按下发送按钮时的那个消息。但是当我们读取 `latestMessage.current` 时，我们得到了最新的值（即使我们在发送按钮按下之后，仍然在打字输入）\n\n你可以比较这[两个](https://codesandbox.io/s/93m5mz9w24)[例子](https://codesandbox.io/s/ox200vw8k9)的区别。ref 是一种渲染一致性的 “选择性退出” 方法，而且在某些情况下很方便\n\n通常，你应该避免在渲染 *期间* 读取或设置 refs，因为它们是可变的。我们想要保持渲染的可预测性。**然而，如果想要得到一个特别的 prop 或 state 的最新值，手动更新 ref 可能会非常恼火。** 我们可以用这个效果实现自动化：\n\n```js{4-8,11}\nfunction MessageThread() {\n  const [message, setMessage] = useState('');\n\n  // 持续跟踪最新值\n  const latestMessage = useRef('');\n  useEffect(() => {\n    latestMessage.current = message;\n  });\n\n  const showMessage = () => {\n    alert('You said: ' + latestMessage.current);\n  };\n```\n\n（这有一个[demo](https://codesandbox.io/s/yqmnz7xy8x)）\n\n我们在这个效果 *内部* 进行赋值，以致于 ref 值只有在 DOM 更新之后改变。这就确保了我们的改变不会打破像 [Time Slicing and Suspense] (https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)特性，它们依赖渲染中断\n\n这样使用 ref  并不是经常必须的。**捕获 props 或 state 还是使用默认最好。** 然而，它可以方便处理像时间间隔和订阅类[命令式 API](/making-setinterval-declarative-with-react-hooks/)。记住你可以像 this 一样跟踪 *任何* 值（prop，state 变量，整个 props 对象，或甚至一个函数）\n\n这个模式也方便优化（例如，当 `useCallback` id 改变太频繁）。然而，[使用 reducer](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down)通常是一个[更好的解决方案](https://github.com/ryardley/hooks-perf-issues/pull/3)。（后面的文章会提及到这个主题！）\n\n---\n\n在这篇文章中，我们已经看到了 “类” 的常见的破坏模式，而且闭包如何帮助我们修复它。然而，你可能注意到当你试图指定的依赖数组优化 Hooks 时，你可能遇到陈旧的闭包的 bug。这么说是闭包的 “锅” 喽？我不这么认为\n\n正如我们上面看到的那样，闭包确实帮助我们 *修复* 了很难察觉的细微问题。同样，它们也使得在[并发模式](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)正常工作的代码更容易编写。它是有可能的，因为在组件内的逻辑遮蔽了已经渲染的正确的 props 和 state\n\n在我目前所遇到的所有情况里，**“陈旧的闭包” 的问题发生是由于假设 “函数不会发生改变” 或 ”props 总是相同的“** 造成的。事实并非如此，我希望通过这篇文章有助于澄清这一点\n\n函数遮蔽了它们的 props 和 state（而且因此它们的 id 是如此重要）。这不是 bug，而是函数式组件的一个特性。对于 `useEffect` 或 `useCallback` 函数不应该把 “依赖数组” 排除。（正确的修复是通常用 `useReducer` 或 `useRef` 来解决上面的问题 - 我们会尽快出如何在它们之间进行选择的文档）\n\n当我们在 React 写大多数函数时，我们需要调整我们关于[优化代码](https://github.com/ryardley/hooks-perf-issues/pull/3) 和 [什么值会随着时间改变](https://github.com/facebook/react/issues/14920)的直觉\n\n正如 [Fredrik](https://mobile.twitter.com/EphemeralCircle/status/1099095063223812096) 所说：\n>我目前在 hooks 发现的最好的心理规律就是 “代码就像任何值，任何时候都可能改变”\n\n函数也不例外。它需要花费一定的时间来了解 React 学习材料的常识。它需要从 “类” 中调整一些心态。但是我希望这篇文章可以帮助你刷新你的眼光\n\nReact 函数总是会捕获它们的值（现在我们知道原因了）\n\n![微笑的皮卡丘](https://overreacted.io/pikachu-fc3bddf6d4ca14bc77917ac0cfad3608.gif)\n\n它们是完全不同的口袋妖怪\n\n\n\n> - 本文仅代表原作者个人观点，译者不发表任何观点\n> - 版权由原作者所有   \nCopyright (c) Dan Abramov and the contributors.  \nAll rights reserved.\n\n\n\n","source":"_posts/【译】React-函数式组件和-React-类有何不同.md","raw":"---\ntitle: 【译】React 函数式组件和 React 类有何不同\ndate: 2019-04-07 14:16:44\ntags: [翻译计划]\n---\n\n\n## React 函数式组件和 React 类有何不同？\n\n> - 原文地址：https://overreacted.io/how-are-function-components-different-from-classes/\n> - 原文作者：[Dan Abramov](https://github.com/gaearon)\n> - Markdown 地址：https://github.com/gaearon/overreacted.io/edit/master/src/pages/how-are-function-components-different-from-classes/index.md\n> - 译者：[Yangfan2016](https://github.com/Yangfan2016)\n> - 英文版权所有：[Dan Abramov](https://github.com/gaearon/overreacted.io/blob/master/LICENSE-posts)\n\n一段时间内，权威的答案是 “类” 可以提供更多的特性的访问（比如，`state`）。而 [Hooks](https://reactjs.org/docs/hooks-intro.html) 就不一样了\n\n或许你已了解到一种最佳实践。哪一种内？大多数基准测试都[不完美](https://medium.com/@dan_abramov/this-benchmark-is-indeed-flawed-c3d6b5b6f97f?source=your_stories_page---------------------------)，因此我得小心谨慎从它们中得出结论。性能本质上取决于代码做了什么而不是你选择函数还是类。我们观察到，它们的性能差别微不足道，尽管优化策略有些[不同](https://reactjs.org/docs/hooks-faq.html#are-hooks-slow-because-of-creating-functions-in-render)\n\n无论哪种情况下，我们都[不推荐](https://reactjs.org/docs/hooks-faq.html#should-i-use-hooks-classes-or-a-mix-of-both)重写你已存在的组件，除非你有其他原因，和不介意做第一个 “吃螃蟹” 的人。`Hooks` 仍然是新概念（就像 2014 年的 React），并且那些 “最佳实践” 至今都没有在教程里找到\n\n那么给我们留下了什么内？React 函数和类有本质的区别吗？当然，它们有（在心智模型层面上）。**这篇文章，我将找到它们之间的最大的不同。** 它自从 2015 的函数式组件被[引入](https://reactjs.org/blog/2015/09/10/react-v0.14-rc1.html#stateless-function-components)就存在了，但是它经常被忽视：\n\n>**函数式组件捕获已渲染的值**\n\n让我们拆开这个概念来理解\n\n---\n\n**注意：这篇文章并不做类或函数的价值评判。我只是描述下这两种编程模式在 React 中的不同。更多采用函数式的问题，请查阅 [Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#adoption-strategy)**\n\n---\n\n仔细看看这个组件：\n\n```jsx\nfunction ProfilePage(props) {\n  const showMessage = () => {\n    alert('Followed ' + props.user);\n  };\n\n  const handleClick = () => {\n    setTimeout(showMessage, 3000);\n  };\n\n  return (\n    <button onClick={handleClick}>Follow</button>\n  );\n}\n```\n\n它会显示一个用 `setTimeout` 模拟网络请求的按钮，并且之后会显示一个确认框。例如，如果 `props.user` 的值是 `'Dan'`，那么在 3 秒之后会显示 `'Followed Dan'`。足够简单\n\n*（注意，在这个例子中，不论我使用箭头函数还是声明式函数都没有关系。`function handleClick()` 都会以相同的方式正确执行）*\n\n我们如何用 “类” 重写内？原生翻译看起来可能是这样的：\n\n```jsx\nclass ProfilePage extends React.Component {\n  showMessage = () => {\n    alert('Followed ' + this.props.user);\n  };\n\n  handleClick = () => {\n    setTimeout(this.showMessage, 3000);\n  };\n\n  render() {\n    return <button onClick={this.handleClick}>Follow</button>;\n  }\n}\n```\n\n通常认为这两个代码片段是等价的。人们总是在这些模式进行自由的重构，而从来没有注意到它们的意义：\n\n![找出两个版本的不同](https://overreacted.io/wtf-1d3c7a341ee3fcadc79df00e7d872e4b.gif)\n\n**然而，这两个代码片段只有细微的差别。** 仔细看看它们，你发现不同了吗？就我个人而言，我花了一些时间才找到\n\n**前方剧透，如果你要自己弄明白的话，请看这个[在线 demo](https://codesandbox.io/s/pjqnl16lm7)** ，文章的剩下的部分都在解释它们的差别和为何它如此重要\n\n---\n\n在继续之前，我想强调下这篇文章描述的区别和 React Hooks 半毛钱关系都没有。甚至上面的例子里都没有提及 Hooks！\n\n文章都是关于 React 中所有函数和 “类” 的差异。如果你计划在 React app 中更频繁的使用函数，你可能更想理解它\n\n---\n\n**我们将用一个 React 应用中常见的 \"类\" bug 来图解这个区别**\n\n打来这个 **[sandbox 例子](https://codesandbox.io/s/pjqnl16lm7)**，有一个简介选择器和两个 `信息页面`（每个都有一个关注按钮） \n\n试着按下面的顺序触发这两个按钮：\n\n1. **单击** 其中一个关注按钮  \n2. 在 3 秒过去之前 **改变** 已选的简介  \n3. **读取** 警告框的内容  \n\n你会发现一个奇怪的差异：\n\n* 使用上面的 **function** `信息页面` ，点击关注 Dan 的简介后，然后导航到 Sophie 的简介依然弹框显示 `'Followed Dan'`\n\n* 使用上面的 **class** `信息页面` ，它会弹框显示 `'Followed Sophie'`：\n\n![步骤示范](https://overreacted.io/bug-386a449110202d5140d67336a0ade5a0.gif)\n\n---\n\n\n在这个例子中，第一个行为是正确的。**如果我关注了一个人，然后导航到另一个人的简介页面，我的组件不应该困惑我到底关注了谁。** 这个  “类” 实现明显是个 bug \n\n*（虽然你完全可以这样关注 [Sophie](https://mobile.twitter.com/sophiebits)）*\n\n---\n\n那么为何我们的 “类” 例子会如此表现内？\n\n让我们仔细看看我们 “类” 方法 `showMessage`：\n\n```jsx{3}\nclass ProfilePage extends React.Component {\n  showMessage = () => {\n    alert('Followed ' + this.props.user);\n  };\n```\n\n这个 “类” 方法从 `this.props.user` 读取。Props 在 React 里是不可变的，因此它们永远也不会改变。**然而，`this` *是*，总是多变的** \n\n事实上，这就是 “类” 里 `this` 的全部目的。React 自己会随着时间改变，以至于你可以在 `render` 和生命周期方法获取到最新的版本\n\n因此如果我们在请求期间重新渲染我们的组件，`this.props` 会改变。`showMessage` 方法获取到 `user` 将是 “更新的” `props`\n\n这个例子揭露出一个关于用户界面本质的有趣的观察。如果我们说 UI 概念上是当前应用状态的函数，**那么事件处理器就是渲染结果的一部分（就像可视化输出一样）**。我们事件处理器 “属于” 一个拥有特定 props 和 state 的特定渲染\n\n然而，这些回调读取 `this.props` 超时会断开这个联系。我们的 `showMessage` 回调不能 “绑” 到任何特定的渲染，那么它就会 “丢失” 正确的 props。读取 `this` 的链接就会被切断  \n\n---\n\n**我们假设函数式组件不存在。** 我们该如何解决这个问题内？\n\n我们想以某种方式 “修复” 带着正确的 props 的 `render` 和 `showMessage` 回调读取它们的联系。在某个地方，`props` 可能会丢失\n\n一种方式是在事件处理更早读取 `this.props`，并且显示通过超时完成处理器传递进去：\n\n```jsx{2,7}\nclass ProfilePage extends React.Component {\n  showMessage = (user) => {\n    alert('Followed ' + user);\n  };\n\n  handleClick = () => {\n    const {user} = this.props;\n    setTimeout(() => this.showMessage(user), 3000);\n  };\n\n  render() {\n    return <button onClick={this.handleClick}>Follow</button>;\n  }\n}\n```\n\n起[作用](https://codesandbox.io/s/3q737pw8lq)了。然而，这种方式随着时间变化显著造成代码更冗余和容易出错。如果我们需要不止一个 prop？如果我们也需要访问这个 state？**如果 `showMessage` 调用其他方法，而且这个方法也需要读取 `this.props.something` 或 `this.state.something`，我们又遇到了同样的问题。** 因此我们把 `this.props` 和 `this.state` 作为参数从 `showMessage` 传递给每个它调用的方法\n\n\n这么做会破坏 “类” 正常提供的工程学。它也难以记住和执行，这就是为何人们常常满足于 bug 的原因\n\n同样，在 `handleClick` 里内嵌 `alert` 代码并不能解决更大的问题。我们想用一种方式结构化代码允许被更多方法拆分，*但是* 还是要读取调用相应渲染的 props 和 state。**这个问题甚至都不是 React 独有的（你可以把这个可变对象如 `this`，放到任何一个 UI 库里都可以重现）**\n\n或许，我们可以在构造器中 *绑定* 这个方法？\n\n```jsx{4-5}\nclass ProfilePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.showMessage = this.showMessage.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  showMessage() {\n    alert('Followed ' + this.props.user);\n  }\n\n  handleClick() {\n    setTimeout(this.showMessage, 3000);\n  }\n\n  render() {\n    return <button onClick={this.handleClick}>Follow</button>;\n  }\n}\n```\n\n不，它不会解决任何问题。记住，问题所在是我们读取 `this.props` 太迟了（不是我们使用的语法有错！）**然而，如果我们完全依赖 JavaScript 闭包可以解决这个问题** \n\n闭包总是被回避，因为它[难](https://wsvincent.com/javascript-closure-settimeout-for-loop/)以理解，值会随着时间变化。但是在 React 中，props 和 state 是不可变的！（或者至少，它是强烈推荐）消除了\n闭包的主要阻碍\n\n这意味着如果你在一个特别的渲染遮蔽了 props 或 state，你总是可以指望它们完全相同：\n\n```jsx{3,4,9}\nclass ProfilePage extends React.Component {\n  render() {\n    // 捕获这个 props！\n    const props = this.props;\n\n    // 注意：我们在 *render 内部*。\n    // 这些不是类方法\n    const showMessage = () => {\n      alert('Followed ' + props.user);\n    };\n\n    const handleClick = () => {\n      setTimeout(showMessage, 3000);\n    };\n\n    return <button onClick={handleClick}>Follow</button>;\n  }\n}\n```\n\n\n**你已经捕获了渲染时的 props：**\n\n![捕捉口袋妖怪](https://overreacted.io/pokemon-fa483dd5699aac1350c57591770a49be.gif)\n\n这种方法，任何代码内置在它里面（包含在 `showMessage` 里），保证看到特定渲染的 props。React 不再 “移动我们的奶酪”\n\n**我们可以在里面添加我们想要的任何数量的辅助函数，并且它们都将使用捕获的 prop 和 state。** 闭包营救了我们！\n\n\n---\n\n[上面这个例子](https://codesandbox.io/s/oqxy9m7om5)是对的，但是看起来有点怪，如果你在 `render` 里定义了函数而不是使用 “类” 方法，那么在 “类” 里这么做有什么意义内？\n\n事实上，我们可以通过移除它周围的 “壳” 来简化代码：\n\n```jsx\nfunction ProfilePage(props) {\n  const showMessage = () => {\n    alert('Followed ' + props.user);\n  };\n\n  const handleClick = () => {\n    setTimeout(showMessage, 3000);\n  };\n\n  return (\n    <button onClick={handleClick}>Follow</button>\n  );\n}\n```\n\n就像上面这样，`props` 依然可以被捕获（React 把它们作为参数传递进去）。**不像 `this`，`props` 对象永远不可能因 React 而发生改变**\n\n如果你把函数定义里的 `props` 解构的话，会更清晰：\n\n```jsx{1,3}\nfunction ProfilePage({ user }) {\n  const showMessage = () => {\n    alert('Followed ' + user);\n  };\n\n  const handleClick = () => {\n    setTimeout(showMessage, 3000);\n  };\n\n  return (\n    <button onClick={handleClick}>Follow</button>\n  );\n}\n```\n\n当父组件携带不同的 props 渲染 `ProfilePage` 时，React 会再次调用 `ProfilePage` 函数。但是我们已经点击 “属于” 前一次渲染它自己的 `user` 的值和读取 `showMessage` 回调的那个事件处理程序。它们都原封不动\n\n这就是为何在这个版本的 [demo](https://codesandbox.io/s/pjqnl16lm7) 函数中，点击关注 Sophie 的简介和改变选项到 Sunil 依然弹出 `'Followed Sophie'`：\n\n![正确行为的 demo](https://overreacted.io/fix-84396c4b3982827bead96912a947904e.gif)\n\n这个行为是对的。*（尽管你可能也想关注 [Sunil](https://mobile.twitter.com/threepointone)）*\n\n---\n\n现在我们就理解了 React 中 “类” 和函数的最大差别：\n\n>**函数式组件捕获已渲染的值**\n\n**对于 Hooks，同样的原则也适用于 state。** 仔细看看下面这个例子：\n\n```jsx\nfunction MessageThread() {\n  const [message, setMessage] = useState('');\n\n  const showMessage = () => {\n    alert('You said: ' + message);\n  };\n\n  const handleSendClick = () => {\n    setTimeout(showMessage, 3000);\n  };\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n  };\n\n  return (\n    <>\n      <input value={message} onChange={handleMessageChange} />\n      <button onClick={handleSendClick}>Send</button>\n    </>\n  );\n}\n```\n\n（这里有一个[在线 demo](https://codesandbox.io/s/93m5mz9w24)）\n\n\n虽然这个消息 app UI 并不是很好，但它阐述了相同的原理：如果我发送了一个特别的消息，那么组件不应该困惑发送出去的消息实际是什么。这个函数组件的 `message` 捕获了 “属于” 返回浏览器调用的点击处理程序的渲染的 state。因此，`message` 被设置为我点击 “发送” 那一时刻的输入框的值\n\n---\n\n因此我们了解到 React 的函数默认捕获 props 和 state。**但是如果 *想* 读取到最新的不是属于这个特定渲染的 props 或 state？** 假如我们想[从未来读取它们](https://dev.to/scastiel/react-hooks-get-the-current-state-back-to-the-future-3op2)？\n\n在 “类” 中，你可以通过 `this.props` 或 `this.state` 读取到，因为 `this` 本身是可变的。React 改变了它。在函数式组件里，你也可以拥有一个可变值，该值由所有组件渲染器共享。它称为 “ref”：\n\n```js\nfunction MyComponent() {\n  const ref = useRef(null);\n  // 你可以读取或设置 `ref.current`\n  // ...\n}\n```\n\n然而，你需要自己管理它\n\n一个 ref 扮演者和一个实例字段[相同的角色](https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables)。它是进入可变命令式世界的转义口。你或许对 “DOM refs” 很熟悉，但是这个概念更宽泛。它就像你放东西的盒子一样\n\n即使在视觉上，`this.something` 看起来像是 `something.current` 的镜像。它们代表相同的概念\n\n默认情况下，React 不会为了在函数式组件的最新 props 或 state 创建 refs。大多数情况下你不需要它们，而且给它们赋值会浪费工作。然而，如果你喜欢的话，可以手动跟踪这个值：\n\n```jsx{3,6,15}\nfunction MessageThread() {\n  const [message, setMessage] = useState('');\n  const latestMessage = useRef('');\n\n  const showMessage = () => {\n    alert('You said: ' + latestMessage.current);\n  };\n\n  const handleSendClick = () => {\n    setTimeout(showMessage, 3000);\n  };\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n    latestMessage.current = e.target.value;\n  };\n```\n\n如果我们在 `showMessage` 读取 `message`，我们会看到我们按下发送按钮时的那个消息。但是当我们读取 `latestMessage.current` 时，我们得到了最新的值（即使我们在发送按钮按下之后，仍然在打字输入）\n\n你可以比较这[两个](https://codesandbox.io/s/93m5mz9w24)[例子](https://codesandbox.io/s/ox200vw8k9)的区别。ref 是一种渲染一致性的 “选择性退出” 方法，而且在某些情况下很方便\n\n通常，你应该避免在渲染 *期间* 读取或设置 refs，因为它们是可变的。我们想要保持渲染的可预测性。**然而，如果想要得到一个特别的 prop 或 state 的最新值，手动更新 ref 可能会非常恼火。** 我们可以用这个效果实现自动化：\n\n```js{4-8,11}\nfunction MessageThread() {\n  const [message, setMessage] = useState('');\n\n  // 持续跟踪最新值\n  const latestMessage = useRef('');\n  useEffect(() => {\n    latestMessage.current = message;\n  });\n\n  const showMessage = () => {\n    alert('You said: ' + latestMessage.current);\n  };\n```\n\n（这有一个[demo](https://codesandbox.io/s/yqmnz7xy8x)）\n\n我们在这个效果 *内部* 进行赋值，以致于 ref 值只有在 DOM 更新之后改变。这就确保了我们的改变不会打破像 [Time Slicing and Suspense] (https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)特性，它们依赖渲染中断\n\n这样使用 ref  并不是经常必须的。**捕获 props 或 state 还是使用默认最好。** 然而，它可以方便处理像时间间隔和订阅类[命令式 API](/making-setinterval-declarative-with-react-hooks/)。记住你可以像 this 一样跟踪 *任何* 值（prop，state 变量，整个 props 对象，或甚至一个函数）\n\n这个模式也方便优化（例如，当 `useCallback` id 改变太频繁）。然而，[使用 reducer](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down)通常是一个[更好的解决方案](https://github.com/ryardley/hooks-perf-issues/pull/3)。（后面的文章会提及到这个主题！）\n\n---\n\n在这篇文章中，我们已经看到了 “类” 的常见的破坏模式，而且闭包如何帮助我们修复它。然而，你可能注意到当你试图指定的依赖数组优化 Hooks 时，你可能遇到陈旧的闭包的 bug。这么说是闭包的 “锅” 喽？我不这么认为\n\n正如我们上面看到的那样，闭包确实帮助我们 *修复* 了很难察觉的细微问题。同样，它们也使得在[并发模式](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)正常工作的代码更容易编写。它是有可能的，因为在组件内的逻辑遮蔽了已经渲染的正确的 props 和 state\n\n在我目前所遇到的所有情况里，**“陈旧的闭包” 的问题发生是由于假设 “函数不会发生改变” 或 ”props 总是相同的“** 造成的。事实并非如此，我希望通过这篇文章有助于澄清这一点\n\n函数遮蔽了它们的 props 和 state（而且因此它们的 id 是如此重要）。这不是 bug，而是函数式组件的一个特性。对于 `useEffect` 或 `useCallback` 函数不应该把 “依赖数组” 排除。（正确的修复是通常用 `useReducer` 或 `useRef` 来解决上面的问题 - 我们会尽快出如何在它们之间进行选择的文档）\n\n当我们在 React 写大多数函数时，我们需要调整我们关于[优化代码](https://github.com/ryardley/hooks-perf-issues/pull/3) 和 [什么值会随着时间改变](https://github.com/facebook/react/issues/14920)的直觉\n\n正如 [Fredrik](https://mobile.twitter.com/EphemeralCircle/status/1099095063223812096) 所说：\n>我目前在 hooks 发现的最好的心理规律就是 “代码就像任何值，任何时候都可能改变”\n\n函数也不例外。它需要花费一定的时间来了解 React 学习材料的常识。它需要从 “类” 中调整一些心态。但是我希望这篇文章可以帮助你刷新你的眼光\n\nReact 函数总是会捕获它们的值（现在我们知道原因了）\n\n![微笑的皮卡丘](https://overreacted.io/pikachu-fc3bddf6d4ca14bc77917ac0cfad3608.gif)\n\n它们是完全不同的口袋妖怪\n\n\n\n> - 本文仅代表原作者个人观点，译者不发表任何观点\n> - 版权由原作者所有   \nCopyright (c) Dan Abramov and the contributors.  \nAll rights reserved.\n\n\n\n","slug":"【译】React-函数式组件和-React-类有何不同","published":1,"updated":"2019-04-25T08:24:11.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaum7002aaeyysxpaxc4n","content":"<h2 id=\"React-函数式组件和-React-类有何不同？\"><a href=\"#React-函数式组件和-React-类有何不同？\" class=\"headerlink\" title=\"React 函数式组件和 React 类有何不同？\"></a>React 函数式组件和 React 类有何不同？</h2><blockquote>\n<ul>\n<li>原文地址：<a href=\"https://overreacted.io/how-are-function-components-different-from-classes/\" target=\"_blank\" rel=\"noopener\">https://overreacted.io/how-are-function-components-different-from-classes/</a></li>\n<li>原文作者：<a href=\"https://github.com/gaearon\" target=\"_blank\" rel=\"noopener\">Dan Abramov</a></li>\n<li>Markdown 地址：<a href=\"https://github.com/gaearon/overreacted.io/edit/master/src/pages/how-are-function-components-different-from-classes/index.md\" target=\"_blank\" rel=\"noopener\">https://github.com/gaearon/overreacted.io/edit/master/src/pages/how-are-function-components-different-from-classes/index.md</a></li>\n<li>译者：<a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">Yangfan2016</a></li>\n<li>英文版权所有：<a href=\"https://github.com/gaearon/overreacted.io/blob/master/LICENSE-posts\" target=\"_blank\" rel=\"noopener\">Dan Abramov</a></li>\n</ul>\n</blockquote>\n<p>一段时间内，权威的答案是 “类” 可以提供更多的特性的访问（比如，<code>state</code>）。而 <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener\">Hooks</a> 就不一样了</p>\n<p>或许你已了解到一种最佳实践。哪一种内？大多数基准测试都<a href=\"https://medium.com/@dan_abramov/this-benchmark-is-indeed-flawed-c3d6b5b6f97f?source=your_stories_page---------------------------\" target=\"_blank\" rel=\"noopener\">不完美</a>，因此我得小心谨慎从它们中得出结论。性能本质上取决于代码做了什么而不是你选择函数还是类。我们观察到，它们的性能差别微不足道，尽管优化策略有些<a href=\"https://reactjs.org/docs/hooks-faq.html#are-hooks-slow-because-of-creating-functions-in-render\" target=\"_blank\" rel=\"noopener\">不同</a></p>\n<p>无论哪种情况下，我们都<a href=\"https://reactjs.org/docs/hooks-faq.html#should-i-use-hooks-classes-or-a-mix-of-both\" target=\"_blank\" rel=\"noopener\">不推荐</a>重写你已存在的组件，除非你有其他原因，和不介意做第一个 “吃螃蟹” 的人。<code>Hooks</code> 仍然是新概念（就像 2014 年的 React），并且那些 “最佳实践” 至今都没有在教程里找到</p>\n<p>那么给我们留下了什么内？React 函数和类有本质的区别吗？当然，它们有（在心智模型层面上）。<strong>这篇文章，我将找到它们之间的最大的不同。</strong> 它自从 2015 的函数式组件被<a href=\"https://reactjs.org/blog/2015/09/10/react-v0.14-rc1.html#stateless-function-components\" target=\"_blank\" rel=\"noopener\">引入</a>就存在了，但是它经常被忽视：</p>\n<blockquote>\n<p><strong>函数式组件捕获已渲染的值</strong></p>\n</blockquote>\n<p>让我们拆开这个概念来理解</p>\n<hr>\n<p><strong>注意：这篇文章并不做类或函数的价值评判。我只是描述下这两种编程模式在 React 中的不同。更多采用函数式的问题，请查阅 <a href=\"https://reactjs.org/docs/hooks-faq.html#adoption-strategy\" target=\"_blank\" rel=\"noopener\">Hooks FAQ</a></strong></p>\n<hr>\n<p>仔细看看这个组件：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ProfilePage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> showMessage = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'Followed '</span> + props.user);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(showMessage, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;button onClick=&#123;handleClick&#125;&gt;Follow&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>它会显示一个用 <code>setTimeout</code> 模拟网络请求的按钮，并且之后会显示一个确认框。例如，如果 <code>props.user</code> 的值是 <code>&#39;Dan&#39;</code>，那么在 3 秒之后会显示 <code>&#39;Followed Dan&#39;</code>。足够简单</p>\n<p><em>（注意，在这个例子中，不论我使用箭头函数还是声明式函数都没有关系。<code>function handleClick()</code> 都会以相同的方式正确执行）</em></p>\n<p>我们如何用 “类” 重写内？原生翻译看起来可能是这样的：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProfilePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  showMessage = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'Followed '</span> + <span class=\"keyword\">this</span>.props.user);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"keyword\">this</span>.showMessage, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>Follow<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通常认为这两个代码片段是等价的。人们总是在这些模式进行自由的重构，而从来没有注意到它们的意义：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://overreacted.io/wtf-1d3c7a341ee3fcadc79df00e7d872e4b.gif\" alt=\"找出两个版本的不同\" title=\"\">\n                </div>\n                <div class=\"image-caption\">找出两个版本的不同</div>\n            </figure>\n<p><strong>然而，这两个代码片段只有细微的差别。</strong> 仔细看看它们，你发现不同了吗？就我个人而言，我花了一些时间才找到</p>\n<p><strong>前方剧透，如果你要自己弄明白的话，请看这个<a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"noopener\">在线 demo</a></strong> ，文章的剩下的部分都在解释它们的差别和为何它如此重要</p>\n<hr>\n<p>在继续之前，我想强调下这篇文章描述的区别和 React Hooks 半毛钱关系都没有。甚至上面的例子里都没有提及 Hooks！</p>\n<p>文章都是关于 React 中所有函数和 “类” 的差异。如果你计划在 React app 中更频繁的使用函数，你可能更想理解它</p>\n<hr>\n<p><strong>我们将用一个 React 应用中常见的 “类” bug 来图解这个区别</strong></p>\n<p>打来这个 <strong><a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"noopener\">sandbox 例子</a></strong>，有一个简介选择器和两个 <code>信息页面</code>（每个都有一个关注按钮） </p>\n<p>试着按下面的顺序触发这两个按钮：</p>\n<ol>\n<li><strong>单击</strong> 其中一个关注按钮  </li>\n<li>在 3 秒过去之前 <strong>改变</strong> 已选的简介  </li>\n<li><strong>读取</strong> 警告框的内容  </li>\n</ol>\n<p>你会发现一个奇怪的差异：</p>\n<ul>\n<li><p>使用上面的 <strong>function</strong> <code>信息页面</code> ，点击关注 Dan 的简介后，然后导航到 Sophie 的简介依然弹框显示 <code>&#39;Followed Dan&#39;</code></p>\n</li>\n<li><p>使用上面的 <strong>class</strong> <code>信息页面</code> ，它会弹框显示 <code>&#39;Followed Sophie&#39;</code>：</p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://overreacted.io/bug-386a449110202d5140d67336a0ade5a0.gif\" alt=\"步骤示范\" title=\"\">\n                </div>\n                <div class=\"image-caption\">步骤示范</div>\n            </figure>\n<hr>\n<p>在这个例子中，第一个行为是正确的。<strong>如果我关注了一个人，然后导航到另一个人的简介页面，我的组件不应该困惑我到底关注了谁。</strong> 这个  “类” 实现明显是个 bug </p>\n<p><em>（虽然你完全可以这样关注 <a href=\"https://mobile.twitter.com/sophiebits\" target=\"_blank\" rel=\"noopener\">Sophie</a>）</em></p>\n<hr>\n<p>那么为何我们的 “类” 例子会如此表现内？</p>\n<p>让我们仔细看看我们 “类” 方法 <code>showMessage</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ProfilePage extends React.Component &#123;</span><br><span class=\"line\">  showMessage = () =&gt; &#123;</span><br><span class=\"line\">    alert(&apos;Followed &apos; + this.props.user);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>这个 “类” 方法从 <code>this.props.user</code> 读取。Props 在 React 里是不可变的，因此它们永远也不会改变。<strong>然而，<code>this</code> <em>是</em>，总是多变的</strong> </p>\n<p>事实上，这就是 “类” 里 <code>this</code> 的全部目的。React 自己会随着时间改变，以至于你可以在 <code>render</code> 和生命周期方法获取到最新的版本</p>\n<p>因此如果我们在请求期间重新渲染我们的组件，<code>this.props</code> 会改变。<code>showMessage</code> 方法获取到 <code>user</code> 将是 “更新的” <code>props</code></p>\n<p>这个例子揭露出一个关于用户界面本质的有趣的观察。如果我们说 UI 概念上是当前应用状态的函数，<strong>那么事件处理器就是渲染结果的一部分（就像可视化输出一样）</strong>。我们事件处理器 “属于” 一个拥有特定 props 和 state 的特定渲染</p>\n<p>然而，这些回调读取 <code>this.props</code> 超时会断开这个联系。我们的 <code>showMessage</code> 回调不能 “绑” 到任何特定的渲染，那么它就会 “丢失” 正确的 props。读取 <code>this</code> 的链接就会被切断  </p>\n<hr>\n<p><strong>我们假设函数式组件不存在。</strong> 我们该如何解决这个问题内？</p>\n<p>我们想以某种方式 “修复” 带着正确的 props 的 <code>render</code> 和 <code>showMessage</code> 回调读取它们的联系。在某个地方，<code>props</code> 可能会丢失</p>\n<p>一种方式是在事件处理更早读取 <code>this.props</code>，并且显示通过超时完成处理器传递进去：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ProfilePage extends React.Component &#123;</span><br><span class=\"line\">  showMessage = (user) =&gt; &#123;</span><br><span class=\"line\">    alert(&apos;Followed &apos; + user);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick = () =&gt; &#123;</span><br><span class=\"line\">    const &#123;user&#125; = this.props;</span><br><span class=\"line\">    setTimeout(() =&gt; this.showMessage(user), 3000);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;button onClick=&#123;this.handleClick&#125;&gt;Follow&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>起<a href=\"https://codesandbox.io/s/3q737pw8lq\" target=\"_blank\" rel=\"noopener\">作用</a>了。然而，这种方式随着时间变化显著造成代码更冗余和容易出错。如果我们需要不止一个 prop？如果我们也需要访问这个 state？<strong>如果 <code>showMessage</code> 调用其他方法，而且这个方法也需要读取 <code>this.props.something</code> 或 <code>this.state.something</code>，我们又遇到了同样的问题。</strong> 因此我们把 <code>this.props</code> 和 <code>this.state</code> 作为参数从 <code>showMessage</code> 传递给每个它调用的方法</p>\n<p>这么做会破坏 “类” 正常提供的工程学。它也难以记住和执行，这就是为何人们常常满足于 bug 的原因</p>\n<p>同样，在 <code>handleClick</code> 里内嵌 <code>alert</code> 代码并不能解决更大的问题。我们想用一种方式结构化代码允许被更多方法拆分，<em>但是</em> 还是要读取调用相应渲染的 props 和 state。<strong>这个问题甚至都不是 React 独有的（你可以把这个可变对象如 <code>this</code>，放到任何一个 UI 库里都可以重现）</strong></p>\n<p>或许，我们可以在构造器中 <em>绑定</em> 这个方法？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ProfilePage extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.showMessage = this.showMessage.bind(this);</span><br><span class=\"line\">    this.handleClick = this.handleClick.bind(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  showMessage() &#123;</span><br><span class=\"line\">    alert(&apos;Followed &apos; + this.props.user);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    setTimeout(this.showMessage, 3000);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;button onClick=&#123;this.handleClick&#125;&gt;Follow&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不，它不会解决任何问题。记住，问题所在是我们读取 <code>this.props</code> 太迟了（不是我们使用的语法有错！）<strong>然而，如果我们完全依赖 JavaScript 闭包可以解决这个问题</strong> </p>\n<p>闭包总是被回避，因为它<a href=\"https://wsvincent.com/javascript-closure-settimeout-for-loop/\" target=\"_blank\" rel=\"noopener\">难</a>以理解，值会随着时间变化。但是在 React 中，props 和 state 是不可变的！（或者至少，它是强烈推荐）消除了<br>闭包的主要阻碍</p>\n<p>这意味着如果你在一个特别的渲染遮蔽了 props 或 state，你总是可以指望它们完全相同：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ProfilePage extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // 捕获这个 props！</span><br><span class=\"line\">    const props = this.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 注意：我们在 *render 内部*。</span><br><span class=\"line\">    // 这些不是类方法</span><br><span class=\"line\">    const showMessage = () =&gt; &#123;</span><br><span class=\"line\">      alert(&apos;Followed &apos; + props.user);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    const handleClick = () =&gt; &#123;</span><br><span class=\"line\">      setTimeout(showMessage, 3000);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &lt;button onClick=&#123;handleClick&#125;&gt;Follow&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>你已经捕获了渲染时的 props：</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://overreacted.io/pokemon-fa483dd5699aac1350c57591770a49be.gif\" alt=\"捕捉口袋妖怪\" title=\"\">\n                </div>\n                <div class=\"image-caption\">捕捉口袋妖怪</div>\n            </figure>\n<p>这种方法，任何代码内置在它里面（包含在 <code>showMessage</code> 里），保证看到特定渲染的 props。React 不再 “移动我们的奶酪”</p>\n<p><strong>我们可以在里面添加我们想要的任何数量的辅助函数，并且它们都将使用捕获的 prop 和 state。</strong> 闭包营救了我们！</p>\n<hr>\n<p><a href=\"https://codesandbox.io/s/oqxy9m7om5\" target=\"_blank\" rel=\"noopener\">上面这个例子</a>是对的，但是看起来有点怪，如果你在 <code>render</code> 里定义了函数而不是使用 “类” 方法，那么在 “类” 里这么做有什么意义内？</p>\n<p>事实上，我们可以通过移除它周围的 “壳” 来简化代码：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ProfilePage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> showMessage = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'Followed '</span> + props.user);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(showMessage, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;button onClick=&#123;handleClick&#125;&gt;Follow&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>就像上面这样，<code>props</code> 依然可以被捕获（React 把它们作为参数传递进去）。<strong>不像 <code>this</code>，<code>props</code> 对象永远不可能因 React 而发生改变</strong></p>\n<p>如果你把函数定义里的 <code>props</code> 解构的话，会更清晰：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ProfilePage(&#123; user &#125;) &#123;</span><br><span class=\"line\">  const showMessage = () =&gt; &#123;</span><br><span class=\"line\">    alert(&apos;Followed &apos; + user);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const handleClick = () =&gt; &#123;</span><br><span class=\"line\">    setTimeout(showMessage, 3000);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;button onClick=&#123;handleClick&#125;&gt;Follow&lt;/button&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当父组件携带不同的 props 渲染 <code>ProfilePage</code> 时，React 会再次调用 <code>ProfilePage</code> 函数。但是我们已经点击 “属于” 前一次渲染它自己的 <code>user</code> 的值和读取 <code>showMessage</code> 回调的那个事件处理程序。它们都原封不动</p>\n<p>这就是为何在这个版本的 <a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"noopener\">demo</a> 函数中，点击关注 Sophie 的简介和改变选项到 Sunil 依然弹出 <code>&#39;Followed Sophie&#39;</code>：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://overreacted.io/fix-84396c4b3982827bead96912a947904e.gif\" alt=\"正确行为的 demo\" title=\"\">\n                </div>\n                <div class=\"image-caption\">正确行为的 demo</div>\n            </figure>\n<p>这个行为是对的。<em>（尽管你可能也想关注 <a href=\"https://mobile.twitter.com/threepointone\" target=\"_blank\" rel=\"noopener\">Sunil</a>）</em></p>\n<hr>\n<p>现在我们就理解了 React 中 “类” 和函数的最大差别：</p>\n<blockquote>\n<p><strong>函数式组件捕获已渲染的值</strong></p>\n</blockquote>\n<p><strong>对于 Hooks，同样的原则也适用于 state。</strong> 仔细看看下面这个例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MessageThread</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [message, setMessage] = useState(<span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> showMessage = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'You said: '</span> + message);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleSendClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(showMessage, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleMessageChange = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setMessage(e.target.value);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;input value=&#123;message&#125; onChange=&#123;handleMessageChange&#125; /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleSendClick&#125;&gt;Send&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（这里有一个<a href=\"https://codesandbox.io/s/93m5mz9w24\" target=\"_blank\" rel=\"noopener\">在线 demo</a>）</p>\n<p>虽然这个消息 app UI 并不是很好，但它阐述了相同的原理：如果我发送了一个特别的消息，那么组件不应该困惑发送出去的消息实际是什么。这个函数组件的 <code>message</code> 捕获了 “属于” 返回浏览器调用的点击处理程序的渲染的 state。因此，<code>message</code> 被设置为我点击 “发送” 那一时刻的输入框的值</p>\n<hr>\n<p>因此我们了解到 React 的函数默认捕获 props 和 state。<strong>但是如果 <em>想</em> 读取到最新的不是属于这个特定渲染的 props 或 state？</strong> 假如我们想<a href=\"https://dev.to/scastiel/react-hooks-get-the-current-state-back-to-the-future-3op2\" target=\"_blank\" rel=\"noopener\">从未来读取它们</a>？</p>\n<p>在 “类” 中，你可以通过 <code>this.props</code> 或 <code>this.state</code> 读取到，因为 <code>this</code> 本身是可变的。React 改变了它。在函数式组件里，你也可以拥有一个可变值，该值由所有组件渲染器共享。它称为 “ref”：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = useRef(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 你可以读取或设置 `ref.current`</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然而，你需要自己管理它</p>\n<p>一个 ref 扮演者和一个实例字段<a href=\"https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables\" target=\"_blank\" rel=\"noopener\">相同的角色</a>。它是进入可变命令式世界的转义口。你或许对 “DOM refs” 很熟悉，但是这个概念更宽泛。它就像你放东西的盒子一样</p>\n<p>即使在视觉上，<code>this.something</code> 看起来像是 <code>something.current</code> 的镜像。它们代表相同的概念</p>\n<p>默认情况下，React 不会为了在函数式组件的最新 props 或 state 创建 refs。大多数情况下你不需要它们，而且给它们赋值会浪费工作。然而，如果你喜欢的话，可以手动跟踪这个值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function MessageThread() &#123;</span><br><span class=\"line\">  const [message, setMessage] = useState(&apos;&apos;);</span><br><span class=\"line\">  const latestMessage = useRef(&apos;&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">  const showMessage = () =&gt; &#123;</span><br><span class=\"line\">    alert(&apos;You said: &apos; + latestMessage.current);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const handleSendClick = () =&gt; &#123;</span><br><span class=\"line\">    setTimeout(showMessage, 3000);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const handleMessageChange = (e) =&gt; &#123;</span><br><span class=\"line\">    setMessage(e.target.value);</span><br><span class=\"line\">    latestMessage.current = e.target.value;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>如果我们在 <code>showMessage</code> 读取 <code>message</code>，我们会看到我们按下发送按钮时的那个消息。但是当我们读取 <code>latestMessage.current</code> 时，我们得到了最新的值（即使我们在发送按钮按下之后，仍然在打字输入）</p>\n<p>你可以比较这<a href=\"https://codesandbox.io/s/93m5mz9w24\" target=\"_blank\" rel=\"noopener\">两个</a><a href=\"https://codesandbox.io/s/ox200vw8k9\" target=\"_blank\" rel=\"noopener\">例子</a>的区别。ref 是一种渲染一致性的 “选择性退出” 方法，而且在某些情况下很方便</p>\n<p>通常，你应该避免在渲染 <em>期间</em> 读取或设置 refs，因为它们是可变的。我们想要保持渲染的可预测性。<strong>然而，如果想要得到一个特别的 prop 或 state 的最新值，手动更新 ref 可能会非常恼火。</strong> 我们可以用这个效果实现自动化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function MessageThread() &#123;</span><br><span class=\"line\">  const [message, setMessage] = useState(&apos;&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">  // 持续跟踪最新值</span><br><span class=\"line\">  const latestMessage = useRef(&apos;&apos;);</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    latestMessage.current = message;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  const showMessage = () =&gt; &#123;</span><br><span class=\"line\">    alert(&apos;You said: &apos; + latestMessage.current);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>（这有一个<a href=\"https://codesandbox.io/s/yqmnz7xy8x\" target=\"_blank\" rel=\"noopener\">demo</a>）</p>\n<p>我们在这个效果 <em>内部</em> 进行赋值，以致于 ref 值只有在 DOM 更新之后改变。这就确保了我们的改变不会打破像 [Time Slicing and Suspense] (<a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)特性，它们依赖渲染中断\" target=\"_blank\" rel=\"noopener\">https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)特性，它们依赖渲染中断</a></p>\n<p>这样使用 ref  并不是经常必须的。<strong>捕获 props 或 state 还是使用默认最好。</strong> 然而，它可以方便处理像时间间隔和订阅类<a href=\"/making-setinterval-declarative-with-react-hooks/\">命令式 API</a>。记住你可以像 this 一样跟踪 <em>任何</em> 值（prop，state 变量，整个 props 对象，或甚至一个函数）</p>\n<p>这个模式也方便优化（例如，当 <code>useCallback</code> id 改变太频繁）。然而，<a href=\"https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\" target=\"_blank\" rel=\"noopener\">使用 reducer</a>通常是一个<a href=\"https://github.com/ryardley/hooks-perf-issues/pull/3\" target=\"_blank\" rel=\"noopener\">更好的解决方案</a>。（后面的文章会提及到这个主题！）</p>\n<hr>\n<p>在这篇文章中，我们已经看到了 “类” 的常见的破坏模式，而且闭包如何帮助我们修复它。然而，你可能注意到当你试图指定的依赖数组优化 Hooks 时，你可能遇到陈旧的闭包的 bug。这么说是闭包的 “锅” 喽？我不这么认为</p>\n<p>正如我们上面看到的那样，闭包确实帮助我们 <em>修复</em> 了很难察觉的细微问题。同样，它们也使得在<a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\" target=\"_blank\" rel=\"noopener\">并发模式</a>正常工作的代码更容易编写。它是有可能的，因为在组件内的逻辑遮蔽了已经渲染的正确的 props 和 state</p>\n<p>在我目前所遇到的所有情况里，<strong>“陈旧的闭包” 的问题发生是由于假设 “函数不会发生改变” 或 ”props 总是相同的“</strong> 造成的。事实并非如此，我希望通过这篇文章有助于澄清这一点</p>\n<p>函数遮蔽了它们的 props 和 state（而且因此它们的 id 是如此重要）。这不是 bug，而是函数式组件的一个特性。对于 <code>useEffect</code> 或 <code>useCallback</code> 函数不应该把 “依赖数组” 排除。（正确的修复是通常用 <code>useReducer</code> 或 <code>useRef</code> 来解决上面的问题 - 我们会尽快出如何在它们之间进行选择的文档）</p>\n<p>当我们在 React 写大多数函数时，我们需要调整我们关于<a href=\"https://github.com/ryardley/hooks-perf-issues/pull/3\" target=\"_blank\" rel=\"noopener\">优化代码</a> 和 <a href=\"https://github.com/facebook/react/issues/14920\" target=\"_blank\" rel=\"noopener\">什么值会随着时间改变</a>的直觉</p>\n<p>正如 <a href=\"https://mobile.twitter.com/EphemeralCircle/status/1099095063223812096\" target=\"_blank\" rel=\"noopener\">Fredrik</a> 所说：</p>\n<blockquote>\n<p>我目前在 hooks 发现的最好的心理规律就是 “代码就像任何值，任何时候都可能改变”</p>\n</blockquote>\n<p>函数也不例外。它需要花费一定的时间来了解 React 学习材料的常识。它需要从 “类” 中调整一些心态。但是我希望这篇文章可以帮助你刷新你的眼光</p>\n<p>React 函数总是会捕获它们的值（现在我们知道原因了）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://overreacted.io/pikachu-fc3bddf6d4ca14bc77917ac0cfad3608.gif\" alt=\"微笑的皮卡丘\" title=\"\">\n                </div>\n                <div class=\"image-caption\">微笑的皮卡丘</div>\n            </figure>\n<p>它们是完全不同的口袋妖怪</p>\n<blockquote>\n<ul>\n<li>本文仅代表原作者个人观点，译者不发表任何观点</li>\n<li>版权由原作者所有<br>Copyright (c) Dan Abramov and the contributors.<br>All rights reserved.</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"React-函数式组件和-React-类有何不同？\"><a href=\"#React-函数式组件和-React-类有何不同？\" class=\"headerlink\" title=\"React 函数式组件和 React 类有何不同？\"></a>React 函数式组件和 React 类有何不同？</h2><blockquote>\n<ul>\n<li>原文地址：<a href=\"https://overreacted.io/how-are-function-components-different-from-classes/\" target=\"_blank\" rel=\"noopener\">https://overreacted.io/how-are-function-components-different-from-classes/</a></li>\n<li>原文作者：<a href=\"https://github.com/gaearon\" target=\"_blank\" rel=\"noopener\">Dan Abramov</a></li>\n<li>Markdown 地址：<a href=\"https://github.com/gaearon/overreacted.io/edit/master/src/pages/how-are-function-components-different-from-classes/index.md\" target=\"_blank\" rel=\"noopener\">https://github.com/gaearon/overreacted.io/edit/master/src/pages/how-are-function-components-different-from-classes/index.md</a></li>\n<li>译者：<a href=\"https://github.com/Yangfan2016\" target=\"_blank\" rel=\"noopener\">Yangfan2016</a></li>\n<li>英文版权所有：<a href=\"https://github.com/gaearon/overreacted.io/blob/master/LICENSE-posts\" target=\"_blank\" rel=\"noopener\">Dan Abramov</a></li>\n</ul>\n</blockquote>\n<p>一段时间内，权威的答案是 “类” 可以提供更多的特性的访问（比如，<code>state</code>）。而 <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener\">Hooks</a> 就不一样了</p>\n<p>或许你已了解到一种最佳实践。哪一种内？大多数基准测试都<a href=\"https://medium.com/@dan_abramov/this-benchmark-is-indeed-flawed-c3d6b5b6f97f?source=your_stories_page---------------------------\" target=\"_blank\" rel=\"noopener\">不完美</a>，因此我得小心谨慎从它们中得出结论。性能本质上取决于代码做了什么而不是你选择函数还是类。我们观察到，它们的性能差别微不足道，尽管优化策略有些<a href=\"https://reactjs.org/docs/hooks-faq.html#are-hooks-slow-because-of-creating-functions-in-render\" target=\"_blank\" rel=\"noopener\">不同</a></p>\n<p>无论哪种情况下，我们都<a href=\"https://reactjs.org/docs/hooks-faq.html#should-i-use-hooks-classes-or-a-mix-of-both\" target=\"_blank\" rel=\"noopener\">不推荐</a>重写你已存在的组件，除非你有其他原因，和不介意做第一个 “吃螃蟹” 的人。<code>Hooks</code> 仍然是新概念（就像 2014 年的 React），并且那些 “最佳实践” 至今都没有在教程里找到</p>\n<p>那么给我们留下了什么内？React 函数和类有本质的区别吗？当然，它们有（在心智模型层面上）。<strong>这篇文章，我将找到它们之间的最大的不同。</strong> 它自从 2015 的函数式组件被<a href=\"https://reactjs.org/blog/2015/09/10/react-v0.14-rc1.html#stateless-function-components\" target=\"_blank\" rel=\"noopener\">引入</a>就存在了，但是它经常被忽视：</p>\n<blockquote>\n<p><strong>函数式组件捕获已渲染的值</strong></p>\n</blockquote>\n<p>让我们拆开这个概念来理解</p>\n<hr>\n<p><strong>注意：这篇文章并不做类或函数的价值评判。我只是描述下这两种编程模式在 React 中的不同。更多采用函数式的问题，请查阅 <a href=\"https://reactjs.org/docs/hooks-faq.html#adoption-strategy\" target=\"_blank\" rel=\"noopener\">Hooks FAQ</a></strong></p>\n<hr>\n<p>仔细看看这个组件：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ProfilePage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> showMessage = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'Followed '</span> + props.user);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(showMessage, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;button onClick=&#123;handleClick&#125;&gt;Follow&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>它会显示一个用 <code>setTimeout</code> 模拟网络请求的按钮，并且之后会显示一个确认框。例如，如果 <code>props.user</code> 的值是 <code>&#39;Dan&#39;</code>，那么在 3 秒之后会显示 <code>&#39;Followed Dan&#39;</code>。足够简单</p>\n<p><em>（注意，在这个例子中，不论我使用箭头函数还是声明式函数都没有关系。<code>function handleClick()</code> 都会以相同的方式正确执行）</em></p>\n<p>我们如何用 “类” 重写内？原生翻译看起来可能是这样的：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProfilePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  showMessage = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'Followed '</span> + <span class=\"keyword\">this</span>.props.user);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"keyword\">this</span>.showMessage, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>Follow<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通常认为这两个代码片段是等价的。人们总是在这些模式进行自由的重构，而从来没有注意到它们的意义：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://overreacted.io/wtf-1d3c7a341ee3fcadc79df00e7d872e4b.gif\" alt=\"找出两个版本的不同\" title=\"\">\n                </div>\n                <div class=\"image-caption\">找出两个版本的不同</div>\n            </figure>\n<p><strong>然而，这两个代码片段只有细微的差别。</strong> 仔细看看它们，你发现不同了吗？就我个人而言，我花了一些时间才找到</p>\n<p><strong>前方剧透，如果你要自己弄明白的话，请看这个<a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"noopener\">在线 demo</a></strong> ，文章的剩下的部分都在解释它们的差别和为何它如此重要</p>\n<hr>\n<p>在继续之前，我想强调下这篇文章描述的区别和 React Hooks 半毛钱关系都没有。甚至上面的例子里都没有提及 Hooks！</p>\n<p>文章都是关于 React 中所有函数和 “类” 的差异。如果你计划在 React app 中更频繁的使用函数，你可能更想理解它</p>\n<hr>\n<p><strong>我们将用一个 React 应用中常见的 “类” bug 来图解这个区别</strong></p>\n<p>打来这个 <strong><a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"noopener\">sandbox 例子</a></strong>，有一个简介选择器和两个 <code>信息页面</code>（每个都有一个关注按钮） </p>\n<p>试着按下面的顺序触发这两个按钮：</p>\n<ol>\n<li><strong>单击</strong> 其中一个关注按钮  </li>\n<li>在 3 秒过去之前 <strong>改变</strong> 已选的简介  </li>\n<li><strong>读取</strong> 警告框的内容  </li>\n</ol>\n<p>你会发现一个奇怪的差异：</p>\n<ul>\n<li><p>使用上面的 <strong>function</strong> <code>信息页面</code> ，点击关注 Dan 的简介后，然后导航到 Sophie 的简介依然弹框显示 <code>&#39;Followed Dan&#39;</code></p>\n</li>\n<li><p>使用上面的 <strong>class</strong> <code>信息页面</code> ，它会弹框显示 <code>&#39;Followed Sophie&#39;</code>：</p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://overreacted.io/bug-386a449110202d5140d67336a0ade5a0.gif\" alt=\"步骤示范\" title=\"\">\n                </div>\n                <div class=\"image-caption\">步骤示范</div>\n            </figure>\n<hr>\n<p>在这个例子中，第一个行为是正确的。<strong>如果我关注了一个人，然后导航到另一个人的简介页面，我的组件不应该困惑我到底关注了谁。</strong> 这个  “类” 实现明显是个 bug </p>\n<p><em>（虽然你完全可以这样关注 <a href=\"https://mobile.twitter.com/sophiebits\" target=\"_blank\" rel=\"noopener\">Sophie</a>）</em></p>\n<hr>\n<p>那么为何我们的 “类” 例子会如此表现内？</p>\n<p>让我们仔细看看我们 “类” 方法 <code>showMessage</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ProfilePage extends React.Component &#123;</span><br><span class=\"line\">  showMessage = () =&gt; &#123;</span><br><span class=\"line\">    alert(&apos;Followed &apos; + this.props.user);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>这个 “类” 方法从 <code>this.props.user</code> 读取。Props 在 React 里是不可变的，因此它们永远也不会改变。<strong>然而，<code>this</code> <em>是</em>，总是多变的</strong> </p>\n<p>事实上，这就是 “类” 里 <code>this</code> 的全部目的。React 自己会随着时间改变，以至于你可以在 <code>render</code> 和生命周期方法获取到最新的版本</p>\n<p>因此如果我们在请求期间重新渲染我们的组件，<code>this.props</code> 会改变。<code>showMessage</code> 方法获取到 <code>user</code> 将是 “更新的” <code>props</code></p>\n<p>这个例子揭露出一个关于用户界面本质的有趣的观察。如果我们说 UI 概念上是当前应用状态的函数，<strong>那么事件处理器就是渲染结果的一部分（就像可视化输出一样）</strong>。我们事件处理器 “属于” 一个拥有特定 props 和 state 的特定渲染</p>\n<p>然而，这些回调读取 <code>this.props</code> 超时会断开这个联系。我们的 <code>showMessage</code> 回调不能 “绑” 到任何特定的渲染，那么它就会 “丢失” 正确的 props。读取 <code>this</code> 的链接就会被切断  </p>\n<hr>\n<p><strong>我们假设函数式组件不存在。</strong> 我们该如何解决这个问题内？</p>\n<p>我们想以某种方式 “修复” 带着正确的 props 的 <code>render</code> 和 <code>showMessage</code> 回调读取它们的联系。在某个地方，<code>props</code> 可能会丢失</p>\n<p>一种方式是在事件处理更早读取 <code>this.props</code>，并且显示通过超时完成处理器传递进去：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ProfilePage extends React.Component &#123;</span><br><span class=\"line\">  showMessage = (user) =&gt; &#123;</span><br><span class=\"line\">    alert(&apos;Followed &apos; + user);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick = () =&gt; &#123;</span><br><span class=\"line\">    const &#123;user&#125; = this.props;</span><br><span class=\"line\">    setTimeout(() =&gt; this.showMessage(user), 3000);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;button onClick=&#123;this.handleClick&#125;&gt;Follow&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>起<a href=\"https://codesandbox.io/s/3q737pw8lq\" target=\"_blank\" rel=\"noopener\">作用</a>了。然而，这种方式随着时间变化显著造成代码更冗余和容易出错。如果我们需要不止一个 prop？如果我们也需要访问这个 state？<strong>如果 <code>showMessage</code> 调用其他方法，而且这个方法也需要读取 <code>this.props.something</code> 或 <code>this.state.something</code>，我们又遇到了同样的问题。</strong> 因此我们把 <code>this.props</code> 和 <code>this.state</code> 作为参数从 <code>showMessage</code> 传递给每个它调用的方法</p>\n<p>这么做会破坏 “类” 正常提供的工程学。它也难以记住和执行，这就是为何人们常常满足于 bug 的原因</p>\n<p>同样，在 <code>handleClick</code> 里内嵌 <code>alert</code> 代码并不能解决更大的问题。我们想用一种方式结构化代码允许被更多方法拆分，<em>但是</em> 还是要读取调用相应渲染的 props 和 state。<strong>这个问题甚至都不是 React 独有的（你可以把这个可变对象如 <code>this</code>，放到任何一个 UI 库里都可以重现）</strong></p>\n<p>或许，我们可以在构造器中 <em>绑定</em> 这个方法？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ProfilePage extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.showMessage = this.showMessage.bind(this);</span><br><span class=\"line\">    this.handleClick = this.handleClick.bind(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  showMessage() &#123;</span><br><span class=\"line\">    alert(&apos;Followed &apos; + this.props.user);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    setTimeout(this.showMessage, 3000);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;button onClick=&#123;this.handleClick&#125;&gt;Follow&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不，它不会解决任何问题。记住，问题所在是我们读取 <code>this.props</code> 太迟了（不是我们使用的语法有错！）<strong>然而，如果我们完全依赖 JavaScript 闭包可以解决这个问题</strong> </p>\n<p>闭包总是被回避，因为它<a href=\"https://wsvincent.com/javascript-closure-settimeout-for-loop/\" target=\"_blank\" rel=\"noopener\">难</a>以理解，值会随着时间变化。但是在 React 中，props 和 state 是不可变的！（或者至少，它是强烈推荐）消除了<br>闭包的主要阻碍</p>\n<p>这意味着如果你在一个特别的渲染遮蔽了 props 或 state，你总是可以指望它们完全相同：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ProfilePage extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // 捕获这个 props！</span><br><span class=\"line\">    const props = this.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 注意：我们在 *render 内部*。</span><br><span class=\"line\">    // 这些不是类方法</span><br><span class=\"line\">    const showMessage = () =&gt; &#123;</span><br><span class=\"line\">      alert(&apos;Followed &apos; + props.user);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    const handleClick = () =&gt; &#123;</span><br><span class=\"line\">      setTimeout(showMessage, 3000);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &lt;button onClick=&#123;handleClick&#125;&gt;Follow&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>你已经捕获了渲染时的 props：</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://overreacted.io/pokemon-fa483dd5699aac1350c57591770a49be.gif\" alt=\"捕捉口袋妖怪\" title=\"\">\n                </div>\n                <div class=\"image-caption\">捕捉口袋妖怪</div>\n            </figure>\n<p>这种方法，任何代码内置在它里面（包含在 <code>showMessage</code> 里），保证看到特定渲染的 props。React 不再 “移动我们的奶酪”</p>\n<p><strong>我们可以在里面添加我们想要的任何数量的辅助函数，并且它们都将使用捕获的 prop 和 state。</strong> 闭包营救了我们！</p>\n<hr>\n<p><a href=\"https://codesandbox.io/s/oqxy9m7om5\" target=\"_blank\" rel=\"noopener\">上面这个例子</a>是对的，但是看起来有点怪，如果你在 <code>render</code> 里定义了函数而不是使用 “类” 方法，那么在 “类” 里这么做有什么意义内？</p>\n<p>事实上，我们可以通过移除它周围的 “壳” 来简化代码：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ProfilePage</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> showMessage = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'Followed '</span> + props.user);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(showMessage, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;button onClick=&#123;handleClick&#125;&gt;Follow&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>就像上面这样，<code>props</code> 依然可以被捕获（React 把它们作为参数传递进去）。<strong>不像 <code>this</code>，<code>props</code> 对象永远不可能因 React 而发生改变</strong></p>\n<p>如果你把函数定义里的 <code>props</code> 解构的话，会更清晰：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ProfilePage(&#123; user &#125;) &#123;</span><br><span class=\"line\">  const showMessage = () =&gt; &#123;</span><br><span class=\"line\">    alert(&apos;Followed &apos; + user);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const handleClick = () =&gt; &#123;</span><br><span class=\"line\">    setTimeout(showMessage, 3000);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;button onClick=&#123;handleClick&#125;&gt;Follow&lt;/button&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当父组件携带不同的 props 渲染 <code>ProfilePage</code> 时，React 会再次调用 <code>ProfilePage</code> 函数。但是我们已经点击 “属于” 前一次渲染它自己的 <code>user</code> 的值和读取 <code>showMessage</code> 回调的那个事件处理程序。它们都原封不动</p>\n<p>这就是为何在这个版本的 <a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"noopener\">demo</a> 函数中，点击关注 Sophie 的简介和改变选项到 Sunil 依然弹出 <code>&#39;Followed Sophie&#39;</code>：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://overreacted.io/fix-84396c4b3982827bead96912a947904e.gif\" alt=\"正确行为的 demo\" title=\"\">\n                </div>\n                <div class=\"image-caption\">正确行为的 demo</div>\n            </figure>\n<p>这个行为是对的。<em>（尽管你可能也想关注 <a href=\"https://mobile.twitter.com/threepointone\" target=\"_blank\" rel=\"noopener\">Sunil</a>）</em></p>\n<hr>\n<p>现在我们就理解了 React 中 “类” 和函数的最大差别：</p>\n<blockquote>\n<p><strong>函数式组件捕获已渲染的值</strong></p>\n</blockquote>\n<p><strong>对于 Hooks，同样的原则也适用于 state。</strong> 仔细看看下面这个例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MessageThread</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [message, setMessage] = useState(<span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> showMessage = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'You said: '</span> + message);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleSendClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(showMessage, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleMessageChange = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setMessage(e.target.value);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;input value=&#123;message&#125; onChange=&#123;handleMessageChange&#125; /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleSendClick&#125;&gt;Send&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（这里有一个<a href=\"https://codesandbox.io/s/93m5mz9w24\" target=\"_blank\" rel=\"noopener\">在线 demo</a>）</p>\n<p>虽然这个消息 app UI 并不是很好，但它阐述了相同的原理：如果我发送了一个特别的消息，那么组件不应该困惑发送出去的消息实际是什么。这个函数组件的 <code>message</code> 捕获了 “属于” 返回浏览器调用的点击处理程序的渲染的 state。因此，<code>message</code> 被设置为我点击 “发送” 那一时刻的输入框的值</p>\n<hr>\n<p>因此我们了解到 React 的函数默认捕获 props 和 state。<strong>但是如果 <em>想</em> 读取到最新的不是属于这个特定渲染的 props 或 state？</strong> 假如我们想<a href=\"https://dev.to/scastiel/react-hooks-get-the-current-state-back-to-the-future-3op2\" target=\"_blank\" rel=\"noopener\">从未来读取它们</a>？</p>\n<p>在 “类” 中，你可以通过 <code>this.props</code> 或 <code>this.state</code> 读取到，因为 <code>this</code> 本身是可变的。React 改变了它。在函数式组件里，你也可以拥有一个可变值，该值由所有组件渲染器共享。它称为 “ref”：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = useRef(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 你可以读取或设置 `ref.current`</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然而，你需要自己管理它</p>\n<p>一个 ref 扮演者和一个实例字段<a href=\"https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables\" target=\"_blank\" rel=\"noopener\">相同的角色</a>。它是进入可变命令式世界的转义口。你或许对 “DOM refs” 很熟悉，但是这个概念更宽泛。它就像你放东西的盒子一样</p>\n<p>即使在视觉上，<code>this.something</code> 看起来像是 <code>something.current</code> 的镜像。它们代表相同的概念</p>\n<p>默认情况下，React 不会为了在函数式组件的最新 props 或 state 创建 refs。大多数情况下你不需要它们，而且给它们赋值会浪费工作。然而，如果你喜欢的话，可以手动跟踪这个值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function MessageThread() &#123;</span><br><span class=\"line\">  const [message, setMessage] = useState(&apos;&apos;);</span><br><span class=\"line\">  const latestMessage = useRef(&apos;&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">  const showMessage = () =&gt; &#123;</span><br><span class=\"line\">    alert(&apos;You said: &apos; + latestMessage.current);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const handleSendClick = () =&gt; &#123;</span><br><span class=\"line\">    setTimeout(showMessage, 3000);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const handleMessageChange = (e) =&gt; &#123;</span><br><span class=\"line\">    setMessage(e.target.value);</span><br><span class=\"line\">    latestMessage.current = e.target.value;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>如果我们在 <code>showMessage</code> 读取 <code>message</code>，我们会看到我们按下发送按钮时的那个消息。但是当我们读取 <code>latestMessage.current</code> 时，我们得到了最新的值（即使我们在发送按钮按下之后，仍然在打字输入）</p>\n<p>你可以比较这<a href=\"https://codesandbox.io/s/93m5mz9w24\" target=\"_blank\" rel=\"noopener\">两个</a><a href=\"https://codesandbox.io/s/ox200vw8k9\" target=\"_blank\" rel=\"noopener\">例子</a>的区别。ref 是一种渲染一致性的 “选择性退出” 方法，而且在某些情况下很方便</p>\n<p>通常，你应该避免在渲染 <em>期间</em> 读取或设置 refs，因为它们是可变的。我们想要保持渲染的可预测性。<strong>然而，如果想要得到一个特别的 prop 或 state 的最新值，手动更新 ref 可能会非常恼火。</strong> 我们可以用这个效果实现自动化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function MessageThread() &#123;</span><br><span class=\"line\">  const [message, setMessage] = useState(&apos;&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">  // 持续跟踪最新值</span><br><span class=\"line\">  const latestMessage = useRef(&apos;&apos;);</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    latestMessage.current = message;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  const showMessage = () =&gt; &#123;</span><br><span class=\"line\">    alert(&apos;You said: &apos; + latestMessage.current);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>（这有一个<a href=\"https://codesandbox.io/s/yqmnz7xy8x\" target=\"_blank\" rel=\"noopener\">demo</a>）</p>\n<p>我们在这个效果 <em>内部</em> 进行赋值，以致于 ref 值只有在 DOM 更新之后改变。这就确保了我们的改变不会打破像 [Time Slicing and Suspense] (<a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)特性，它们依赖渲染中断\" target=\"_blank\" rel=\"noopener\">https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)特性，它们依赖渲染中断</a></p>\n<p>这样使用 ref  并不是经常必须的。<strong>捕获 props 或 state 还是使用默认最好。</strong> 然而，它可以方便处理像时间间隔和订阅类<a href=\"/making-setinterval-declarative-with-react-hooks/\">命令式 API</a>。记住你可以像 this 一样跟踪 <em>任何</em> 值（prop，state 变量，整个 props 对象，或甚至一个函数）</p>\n<p>这个模式也方便优化（例如，当 <code>useCallback</code> id 改变太频繁）。然而，<a href=\"https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\" target=\"_blank\" rel=\"noopener\">使用 reducer</a>通常是一个<a href=\"https://github.com/ryardley/hooks-perf-issues/pull/3\" target=\"_blank\" rel=\"noopener\">更好的解决方案</a>。（后面的文章会提及到这个主题！）</p>\n<hr>\n<p>在这篇文章中，我们已经看到了 “类” 的常见的破坏模式，而且闭包如何帮助我们修复它。然而，你可能注意到当你试图指定的依赖数组优化 Hooks 时，你可能遇到陈旧的闭包的 bug。这么说是闭包的 “锅” 喽？我不这么认为</p>\n<p>正如我们上面看到的那样，闭包确实帮助我们 <em>修复</em> 了很难察觉的细微问题。同样，它们也使得在<a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\" target=\"_blank\" rel=\"noopener\">并发模式</a>正常工作的代码更容易编写。它是有可能的，因为在组件内的逻辑遮蔽了已经渲染的正确的 props 和 state</p>\n<p>在我目前所遇到的所有情况里，<strong>“陈旧的闭包” 的问题发生是由于假设 “函数不会发生改变” 或 ”props 总是相同的“</strong> 造成的。事实并非如此，我希望通过这篇文章有助于澄清这一点</p>\n<p>函数遮蔽了它们的 props 和 state（而且因此它们的 id 是如此重要）。这不是 bug，而是函数式组件的一个特性。对于 <code>useEffect</code> 或 <code>useCallback</code> 函数不应该把 “依赖数组” 排除。（正确的修复是通常用 <code>useReducer</code> 或 <code>useRef</code> 来解决上面的问题 - 我们会尽快出如何在它们之间进行选择的文档）</p>\n<p>当我们在 React 写大多数函数时，我们需要调整我们关于<a href=\"https://github.com/ryardley/hooks-perf-issues/pull/3\" target=\"_blank\" rel=\"noopener\">优化代码</a> 和 <a href=\"https://github.com/facebook/react/issues/14920\" target=\"_blank\" rel=\"noopener\">什么值会随着时间改变</a>的直觉</p>\n<p>正如 <a href=\"https://mobile.twitter.com/EphemeralCircle/status/1099095063223812096\" target=\"_blank\" rel=\"noopener\">Fredrik</a> 所说：</p>\n<blockquote>\n<p>我目前在 hooks 发现的最好的心理规律就是 “代码就像任何值，任何时候都可能改变”</p>\n</blockquote>\n<p>函数也不例外。它需要花费一定的时间来了解 React 学习材料的常识。它需要从 “类” 中调整一些心态。但是我希望这篇文章可以帮助你刷新你的眼光</p>\n<p>React 函数总是会捕获它们的值（现在我们知道原因了）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://overreacted.io/pikachu-fc3bddf6d4ca14bc77917ac0cfad3608.gif\" alt=\"微笑的皮卡丘\" title=\"\">\n                </div>\n                <div class=\"image-caption\">微笑的皮卡丘</div>\n            </figure>\n<p>它们是完全不同的口袋妖怪</p>\n<blockquote>\n<ul>\n<li>本文仅代表原作者个人观点，译者不发表任何观点</li>\n<li>版权由原作者所有<br>Copyright (c) Dan Abramov and the contributors.<br>All rights reserved.</li>\n</ul>\n</blockquote>\n"},{"title":"高德地图 Javascript API 入门（四）","date":"2017-02-22T11:03:02.000Z","_content":"\n\n高德地图 Javascript API 入门（四）\n===\n\n\n地图覆盖物\n---\n\n#### 覆盖物\n\n\n<table style=\"width:100%;border-collapse:collapse;\"><thead><tr><th class=\"\">类名</th><th class=\"\">说明</th><th>是否插件</th></tr></thead><tbody><tr><td><a href=\"#Marker\">AMap.Marker</a></td><td><p style=\"margin-top:10px\">点标记</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Icon\">AMap.Icon</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;点标记&gt;复杂点标记对象，对普通点标记Marker 的扩展</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Polyline\">AMap.Polyline</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;折线</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Polygon\">AMap.Polygon</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;多边形</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Circle\">AMap.Circle</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;圆</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#GroundImage\">AMap.GroundImage</a></td><td><p style=\"margin-top:10px\">图片覆盖物</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#ContextMenu\">AMap.ContextMenu</a></td><td><p style=\"margin-top:10px\">地图右键菜单</p></td><td><p style=\"margin-top:10px\">否</p></td></tr></tbody></table>\n\n\n\n#### 点标记\n\nJS\n\n```js\n\tvar marker=new AMap.Marker({\n\t\tmap:map,\n\t\tposition:new AMap.LngLat(112.736465,37.696495)\n\t});\n```\n\n\n预览\n\n![iamge](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap401.JPG)\n\n\n自定义点标记\n\nJS\n\n```js\n\tvar marker=new AMap.Marker({\n\t\tmap:map,\n\t\tposition:new AMap.LngLat(112.736465,37.696495),\n\t\ticon:new AMap.Icon({\n\t\t\timage:\"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2803620233,1906638381&fm=23&gp=0.jpg\",\n\t\t\tsize:[72,72],\n\t\t\timageSize:[36,36]\n\t\t}),\n\t\tdraggable:true,\n\t\traiseOnDrag:true,\n\t\tshape:new AMap.MarkerShape({\n\t\t\ttype:\"circle\",\n\t\t\tcoords:[112.736465,37.696495,100]\n\t\t}),\n\t\tlabel:{\n\t\t\tcontent:\"label\",\n\t\t\toffset:new AMap.Pixel(0,-36)\n\t\t}\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap402.JPG)\n\n\n##### 多边形\n\n\nJS\n\n```js\n\tvar lineArr=[\n\t\t[112.49157,37.897392],\n\t\t[112.602806,37.898747],\n\t\t[112.608643,37.797355],\n\t\t[112.49775,37.79627]\n\t];\n\tvar polygon=new AMap.Polygon({\n\t\tmap:map,\n\t\tpath:lineArr\n\t});\n```\n\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap404.JPG)\n\n\n#### 右键菜单\n\nJS\n\n```js\n\tvar contextmenu=new AMap.ContextMenu();\n\tvar pos=[];\n\t// 添加右键菜单内容项\n\tcontextmenu.addItem(\"放大\",function () {\n\t\tmap.zoomIn();\n\t},0);\n\tcontextmenu.addItem(\"缩小\",function () {\n\t\tmap.zoomOut();\n\t},1);\n\tcontextmenu.addItem(\"添加点标记\",function () {\n\t\tvar marker=new AMap.Marker({\n\t\t\tmap:map,\n\t\t\tposition:pos\n\t\t});\n\t},2);\n\t// 监听鼠标右击事件\n\tmap.on(\"rightclick\",function (e) {\n\t\tcontextmenu.open(map,e.lnglat);\n\t\tpos=e.lnglat;\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap405.JPG)\n\n\n\n\n\n信息窗体\n---\n\n#### 信息窗体\n\nJS\n\n```js\n\tvar infowindow=new AMap.InfoWindow({\n\t\tisCustom:false,\n\t\tcontent:\"<h3>Hello,Yuanping</h3>\",\n\t\toffset:new AMap.Pixel(0,-36),\n\t\tshowShadow:true,\n\t\tcloseWhenClickMap:true,\n\t\tautoMove:true\n\t});\n\tinfowindow.open(map,new AMap.LngLat(112.736465,38.696495));\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap406.JPG)\n\n\n\n小练习\n---\n\n#### 鼠标划过山西大剧院时，弹出信息窗体\n\nJS\n\n```js\n\t// 坐标\n\tvar lineArr=[\n\t\t[112.532802,37.808395],\n\t\t[112.533049,37.808395],\n\t\t[112.533124,37.808476],\n\t\t[112.533521,37.808459],\n\t\t[112.533558,37.808391],\n\t\t[112.533832,37.808391],\n\t\t[112.533848,37.80792],\n\t\t[112.534159,37.807959],\n\t\t[112.534159,37.80748],\n\t\t[112.533826,37.807514],\n\t\t[112.533832,37.807179],\n\t\t[112.533966,37.806848],\n\t\t[112.533376,37.806683],\n\t\t[112.533054,37.806687],\n\t\t[112.532684,37.806878],\n\t\t[112.53278,37.807191],\n\t\t[112.532796,37.80745],\n\t\t[112.532013,37.807285],\n\t\t[112.532019,37.808213],\n\t\t[112.532796,37.808018],\n\t\t[112.532818,37.808412]\n\t];\n\t// 实例化Polygon类\n\tvar polygon=new AMap.Polygon({\n\t\tmap:map,\n\t\tpath:lineArr\n\t});\n\t// 适应窗口\n\tmap.setFitView();\n\t// 实例化信息窗体类\n\tvar infowindow=new AMap.InfoWindow({\n\t\tcontent:\"<h3>太原市</h3><p>山西大剧院</p>\",\n\t\tcloseWhenClickMap:true\n\t});\n\t// 监听鼠标移入、移除事件\n\tpolygon.on(\"mouseover\",function (e) {\n\t\tinfowindow.open(map,map.getCenter());\n\t}).on(\"mouseout\",function () {\n\t\tinfowindow.close();\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap407.JPG)\n\n\n\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","source":"_posts/高德地图 Javascript API 入门（四）.md","raw":"---\ntitle: 高德地图 Javascript API 入门（四）\ndate: 2017-02-22 19:03:02\ntags: [GIS,API,JS]\n---\n\n\n高德地图 Javascript API 入门（四）\n===\n\n\n地图覆盖物\n---\n\n#### 覆盖物\n\n\n<table style=\"width:100%;border-collapse:collapse;\"><thead><tr><th class=\"\">类名</th><th class=\"\">说明</th><th>是否插件</th></tr></thead><tbody><tr><td><a href=\"#Marker\">AMap.Marker</a></td><td><p style=\"margin-top:10px\">点标记</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Icon\">AMap.Icon</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;点标记&gt;复杂点标记对象，对普通点标记Marker 的扩展</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Polyline\">AMap.Polyline</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;折线</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Polygon\">AMap.Polygon</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;多边形</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Circle\">AMap.Circle</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;圆</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#GroundImage\">AMap.GroundImage</a></td><td><p style=\"margin-top:10px\">图片覆盖物</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#ContextMenu\">AMap.ContextMenu</a></td><td><p style=\"margin-top:10px\">地图右键菜单</p></td><td><p style=\"margin-top:10px\">否</p></td></tr></tbody></table>\n\n\n\n#### 点标记\n\nJS\n\n```js\n\tvar marker=new AMap.Marker({\n\t\tmap:map,\n\t\tposition:new AMap.LngLat(112.736465,37.696495)\n\t});\n```\n\n\n预览\n\n![iamge](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap401.JPG)\n\n\n自定义点标记\n\nJS\n\n```js\n\tvar marker=new AMap.Marker({\n\t\tmap:map,\n\t\tposition:new AMap.LngLat(112.736465,37.696495),\n\t\ticon:new AMap.Icon({\n\t\t\timage:\"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2803620233,1906638381&fm=23&gp=0.jpg\",\n\t\t\tsize:[72,72],\n\t\t\timageSize:[36,36]\n\t\t}),\n\t\tdraggable:true,\n\t\traiseOnDrag:true,\n\t\tshape:new AMap.MarkerShape({\n\t\t\ttype:\"circle\",\n\t\t\tcoords:[112.736465,37.696495,100]\n\t\t}),\n\t\tlabel:{\n\t\t\tcontent:\"label\",\n\t\t\toffset:new AMap.Pixel(0,-36)\n\t\t}\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap402.JPG)\n\n\n##### 多边形\n\n\nJS\n\n```js\n\tvar lineArr=[\n\t\t[112.49157,37.897392],\n\t\t[112.602806,37.898747],\n\t\t[112.608643,37.797355],\n\t\t[112.49775,37.79627]\n\t];\n\tvar polygon=new AMap.Polygon({\n\t\tmap:map,\n\t\tpath:lineArr\n\t});\n```\n\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap404.JPG)\n\n\n#### 右键菜单\n\nJS\n\n```js\n\tvar contextmenu=new AMap.ContextMenu();\n\tvar pos=[];\n\t// 添加右键菜单内容项\n\tcontextmenu.addItem(\"放大\",function () {\n\t\tmap.zoomIn();\n\t},0);\n\tcontextmenu.addItem(\"缩小\",function () {\n\t\tmap.zoomOut();\n\t},1);\n\tcontextmenu.addItem(\"添加点标记\",function () {\n\t\tvar marker=new AMap.Marker({\n\t\t\tmap:map,\n\t\t\tposition:pos\n\t\t});\n\t},2);\n\t// 监听鼠标右击事件\n\tmap.on(\"rightclick\",function (e) {\n\t\tcontextmenu.open(map,e.lnglat);\n\t\tpos=e.lnglat;\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap405.JPG)\n\n\n\n\n\n信息窗体\n---\n\n#### 信息窗体\n\nJS\n\n```js\n\tvar infowindow=new AMap.InfoWindow({\n\t\tisCustom:false,\n\t\tcontent:\"<h3>Hello,Yuanping</h3>\",\n\t\toffset:new AMap.Pixel(0,-36),\n\t\tshowShadow:true,\n\t\tcloseWhenClickMap:true,\n\t\tautoMove:true\n\t});\n\tinfowindow.open(map,new AMap.LngLat(112.736465,38.696495));\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap406.JPG)\n\n\n\n小练习\n---\n\n#### 鼠标划过山西大剧院时，弹出信息窗体\n\nJS\n\n```js\n\t// 坐标\n\tvar lineArr=[\n\t\t[112.532802,37.808395],\n\t\t[112.533049,37.808395],\n\t\t[112.533124,37.808476],\n\t\t[112.533521,37.808459],\n\t\t[112.533558,37.808391],\n\t\t[112.533832,37.808391],\n\t\t[112.533848,37.80792],\n\t\t[112.534159,37.807959],\n\t\t[112.534159,37.80748],\n\t\t[112.533826,37.807514],\n\t\t[112.533832,37.807179],\n\t\t[112.533966,37.806848],\n\t\t[112.533376,37.806683],\n\t\t[112.533054,37.806687],\n\t\t[112.532684,37.806878],\n\t\t[112.53278,37.807191],\n\t\t[112.532796,37.80745],\n\t\t[112.532013,37.807285],\n\t\t[112.532019,37.808213],\n\t\t[112.532796,37.808018],\n\t\t[112.532818,37.808412]\n\t];\n\t// 实例化Polygon类\n\tvar polygon=new AMap.Polygon({\n\t\tmap:map,\n\t\tpath:lineArr\n\t});\n\t// 适应窗口\n\tmap.setFitView();\n\t// 实例化信息窗体类\n\tvar infowindow=new AMap.InfoWindow({\n\t\tcontent:\"<h3>太原市</h3><p>山西大剧院</p>\",\n\t\tcloseWhenClickMap:true\n\t});\n\t// 监听鼠标移入、移除事件\n\tpolygon.on(\"mouseover\",function (e) {\n\t\tinfowindow.open(map,map.getCenter());\n\t}).on(\"mouseout\",function () {\n\t\tinfowindow.close();\n\t});\n```\n\n\n预览\n\n![image](https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap407.JPG)\n\n\n\n\n------\n参考来源：[http://lbs.amap.com/](http://lbs.amap.com/ \"高德地图开放平台\")  \n作者：[Yangfan](http://yangfan.ga \"http://yangfan.ga\")\n\n","slug":"高德地图 Javascript API 入门（四）","published":1,"updated":"2019-04-25T09:00:11.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaump002caeyyptlfstob","content":"<h1 id=\"高德地图-Javascript-API-入门（四）\"><a href=\"#高德地图-Javascript-API-入门（四）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（四）\"></a>高德地图 Javascript API 入门（四）</h1><h2 id=\"地图覆盖物\"><a href=\"#地图覆盖物\" class=\"headerlink\" title=\"地图覆盖物\"></a>地图覆盖物</h2><h4 id=\"覆盖物\"><a href=\"#覆盖物\" class=\"headerlink\" title=\"覆盖物\"></a>覆盖物</h4><table style=\"width:100%;border-collapse:collapse;\"><thead><tr><th class=\"\">类名</th><th class=\"\">说明</th><th>是否插件</th></tr></thead><tbody><tr><td><a href=\"#Marker\">AMap.Marker</a></td><td><p style=\"margin-top:10px\">点标记</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Icon\">AMap.Icon</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;点标记&gt;复杂点标记对象，对普通点标记Marker 的扩展</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Polyline\">AMap.Polyline</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;折线</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Polygon\">AMap.Polygon</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;多边形</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Circle\">AMap.Circle</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;圆</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#GroundImage\">AMap.GroundImage</a></td><td><p style=\"margin-top:10px\">图片覆盖物</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#ContextMenu\">AMap.ContextMenu</a></td><td><p style=\"margin-top:10px\">地图右键菜单</p></td><td><p style=\"margin-top:10px\">否</p></td></tr></tbody></table>\n\n\n\n<h4 id=\"点标记\"><a href=\"#点标记\" class=\"headerlink\" title=\"点标记\"></a>点标记</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> marker=<span class=\"keyword\">new</span> AMap.Marker(&#123;</span><br><span class=\"line\">\tmap:map,</span><br><span class=\"line\">\tposition:<span class=\"keyword\">new</span> AMap.LngLat(<span class=\"number\">112.736465</span>,<span class=\"number\">37.696495</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap401.JPG\" alt=\"iamge\" title=\"\">\n                </div>\n                <div class=\"image-caption\">iamge</div>\n            </figure>\n<p>自定义点标记</p>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> marker=<span class=\"keyword\">new</span> AMap.Marker(&#123;</span><br><span class=\"line\">\tmap:map,</span><br><span class=\"line\">\tposition:<span class=\"keyword\">new</span> AMap.LngLat(<span class=\"number\">112.736465</span>,<span class=\"number\">37.696495</span>),</span><br><span class=\"line\">\ticon:<span class=\"keyword\">new</span> AMap.Icon(&#123;</span><br><span class=\"line\">\t\timage:<span class=\"string\">\"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2803620233,1906638381&amp;fm=23&amp;gp=0.jpg\"</span>,</span><br><span class=\"line\">\t\tsize:[<span class=\"number\">72</span>,<span class=\"number\">72</span>],</span><br><span class=\"line\">\t\timageSize:[<span class=\"number\">36</span>,<span class=\"number\">36</span>]</span><br><span class=\"line\">\t&#125;),</span><br><span class=\"line\">\tdraggable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\traiseOnDrag:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\tshape:<span class=\"keyword\">new</span> AMap.MarkerShape(&#123;</span><br><span class=\"line\">\t\ttype:<span class=\"string\">\"circle\"</span>,</span><br><span class=\"line\">\t\tcoords:[<span class=\"number\">112.736465</span>,<span class=\"number\">37.696495</span>,<span class=\"number\">100</span>]</span><br><span class=\"line\">\t&#125;),</span><br><span class=\"line\">\tlabel:&#123;</span><br><span class=\"line\">\t\tcontent:<span class=\"string\">\"label\"</span>,</span><br><span class=\"line\">\t\toffset:<span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">0</span>,<span class=\"number\">-36</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap402.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h5 id=\"多边形\"><a href=\"#多边形\" class=\"headerlink\" title=\"多边形\"></a>多边形</h5><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lineArr=[</span><br><span class=\"line\">\t[<span class=\"number\">112.49157</span>,<span class=\"number\">37.897392</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.602806</span>,<span class=\"number\">37.898747</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.608643</span>,<span class=\"number\">37.797355</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.49775</span>,<span class=\"number\">37.79627</span>]</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">var</span> polygon=<span class=\"keyword\">new</span> AMap.Polygon(&#123;</span><br><span class=\"line\">\tmap:map,</span><br><span class=\"line\">\tpath:lineArr</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap404.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"右键菜单\"><a href=\"#右键菜单\" class=\"headerlink\" title=\"右键菜单\"></a>右键菜单</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> contextmenu=<span class=\"keyword\">new</span> AMap.ContextMenu();</span><br><span class=\"line\"><span class=\"keyword\">var</span> pos=[];</span><br><span class=\"line\"><span class=\"comment\">// 添加右键菜单内容项</span></span><br><span class=\"line\">contextmenu.addItem(<span class=\"string\">\"放大\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tmap.zoomIn();</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\">contextmenu.addItem(<span class=\"string\">\"缩小\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tmap.zoomOut();</span><br><span class=\"line\">&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">contextmenu.addItem(<span class=\"string\">\"添加点标记\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> marker=<span class=\"keyword\">new</span> AMap.Marker(&#123;</span><br><span class=\"line\">\t\tmap:map,</span><br><span class=\"line\">\t\tposition:pos</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 监听鼠标右击事件</span></span><br><span class=\"line\">map.on(<span class=\"string\">\"rightclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\tcontextmenu.open(map,e.lnglat);</span><br><span class=\"line\">\tpos=e.lnglat;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap405.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h2 id=\"信息窗体\"><a href=\"#信息窗体\" class=\"headerlink\" title=\"信息窗体\"></a>信息窗体</h2><h4 id=\"信息窗体-1\"><a href=\"#信息窗体-1\" class=\"headerlink\" title=\"信息窗体\"></a>信息窗体</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> infowindow=<span class=\"keyword\">new</span> AMap.InfoWindow(&#123;</span><br><span class=\"line\">\tisCustom:<span class=\"literal\">false</span>,</span><br><span class=\"line\">\tcontent:<span class=\"string\">\"&lt;h3&gt;Hello,Yuanping&lt;/h3&gt;\"</span>,</span><br><span class=\"line\">\toffset:<span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">0</span>,<span class=\"number\">-36</span>),</span><br><span class=\"line\">\tshowShadow:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\tcloseWhenClickMap:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\tautoMove:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">infowindow.open(map,<span class=\"keyword\">new</span> AMap.LngLat(<span class=\"number\">112.736465</span>,<span class=\"number\">38.696495</span>));</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap406.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h2 id=\"小练习\"><a href=\"#小练习\" class=\"headerlink\" title=\"小练习\"></a>小练习</h2><h4 id=\"鼠标划过山西大剧院时，弹出信息窗体\"><a href=\"#鼠标划过山西大剧院时，弹出信息窗体\" class=\"headerlink\" title=\"鼠标划过山西大剧院时，弹出信息窗体\"></a>鼠标划过山西大剧院时，弹出信息窗体</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 坐标</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lineArr=[</span><br><span class=\"line\">\t[<span class=\"number\">112.532802</span>,<span class=\"number\">37.808395</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533049</span>,<span class=\"number\">37.808395</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533124</span>,<span class=\"number\">37.808476</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533521</span>,<span class=\"number\">37.808459</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533558</span>,<span class=\"number\">37.808391</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533832</span>,<span class=\"number\">37.808391</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533848</span>,<span class=\"number\">37.80792</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.534159</span>,<span class=\"number\">37.807959</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.534159</span>,<span class=\"number\">37.80748</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533826</span>,<span class=\"number\">37.807514</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533832</span>,<span class=\"number\">37.807179</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533966</span>,<span class=\"number\">37.806848</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533376</span>,<span class=\"number\">37.806683</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533054</span>,<span class=\"number\">37.806687</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.532684</span>,<span class=\"number\">37.806878</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.53278</span>,<span class=\"number\">37.807191</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.532796</span>,<span class=\"number\">37.80745</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.532013</span>,<span class=\"number\">37.807285</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.532019</span>,<span class=\"number\">37.808213</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.532796</span>,<span class=\"number\">37.808018</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.532818</span>,<span class=\"number\">37.808412</span>]</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 实例化Polygon类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> polygon=<span class=\"keyword\">new</span> AMap.Polygon(&#123;</span><br><span class=\"line\">\tmap:map,</span><br><span class=\"line\">\tpath:lineArr</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 适应窗口</span></span><br><span class=\"line\">map.setFitView();</span><br><span class=\"line\"><span class=\"comment\">// 实例化信息窗体类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> infowindow=<span class=\"keyword\">new</span> AMap.InfoWindow(&#123;</span><br><span class=\"line\">\tcontent:<span class=\"string\">\"&lt;h3&gt;太原市&lt;/h3&gt;&lt;p&gt;山西大剧院&lt;/p&gt;\"</span>,</span><br><span class=\"line\">\tcloseWhenClickMap:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 监听鼠标移入、移除事件</span></span><br><span class=\"line\">polygon.on(<span class=\"string\">\"mouseover\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\tinfowindow.open(map,map.getCenter());</span><br><span class=\"line\">&#125;).on(<span class=\"string\">\"mouseout\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tinfowindow.close();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap407.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"高德地图-Javascript-API-入门（四）\"><a href=\"#高德地图-Javascript-API-入门（四）\" class=\"headerlink\" title=\"高德地图 Javascript API 入门（四）\"></a>高德地图 Javascript API 入门（四）</h1><h2 id=\"地图覆盖物\"><a href=\"#地图覆盖物\" class=\"headerlink\" title=\"地图覆盖物\"></a>地图覆盖物</h2><h4 id=\"覆盖物\"><a href=\"#覆盖物\" class=\"headerlink\" title=\"覆盖物\"></a>覆盖物</h4><table style=\"width:100%;border-collapse:collapse;\"><thead><tr><th class=\"\">类名</th><th class=\"\">说明</th><th>是否插件</th></tr></thead><tbody><tr><td><a href=\"#Marker\">AMap.Marker</a></td><td><p style=\"margin-top:10px\">点标记</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Icon\">AMap.Icon</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;点标记&gt;复杂点标记对象，对普通点标记Marker 的扩展</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Polyline\">AMap.Polyline</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;折线</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Polygon\">AMap.Polygon</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;多边形</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#Circle\">AMap.Circle</a></td><td><p style=\"margin-top:10px\">覆盖物&gt;圆</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#GroundImage\">AMap.GroundImage</a></td><td><p style=\"margin-top:10px\">图片覆盖物</p></td><td><p style=\"margin-top:10px\">否</p></td></tr><tr><td><a href=\"#ContextMenu\">AMap.ContextMenu</a></td><td><p style=\"margin-top:10px\">地图右键菜单</p></td><td><p style=\"margin-top:10px\">否</p></td></tr></tbody></table>\n\n\n\n<h4 id=\"点标记\"><a href=\"#点标记\" class=\"headerlink\" title=\"点标记\"></a>点标记</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> marker=<span class=\"keyword\">new</span> AMap.Marker(&#123;</span><br><span class=\"line\">\tmap:map,</span><br><span class=\"line\">\tposition:<span class=\"keyword\">new</span> AMap.LngLat(<span class=\"number\">112.736465</span>,<span class=\"number\">37.696495</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap401.JPG\" alt=\"iamge\" title=\"\">\n                </div>\n                <div class=\"image-caption\">iamge</div>\n            </figure>\n<p>自定义点标记</p>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> marker=<span class=\"keyword\">new</span> AMap.Marker(&#123;</span><br><span class=\"line\">\tmap:map,</span><br><span class=\"line\">\tposition:<span class=\"keyword\">new</span> AMap.LngLat(<span class=\"number\">112.736465</span>,<span class=\"number\">37.696495</span>),</span><br><span class=\"line\">\ticon:<span class=\"keyword\">new</span> AMap.Icon(&#123;</span><br><span class=\"line\">\t\timage:<span class=\"string\">\"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2803620233,1906638381&amp;fm=23&amp;gp=0.jpg\"</span>,</span><br><span class=\"line\">\t\tsize:[<span class=\"number\">72</span>,<span class=\"number\">72</span>],</span><br><span class=\"line\">\t\timageSize:[<span class=\"number\">36</span>,<span class=\"number\">36</span>]</span><br><span class=\"line\">\t&#125;),</span><br><span class=\"line\">\tdraggable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\traiseOnDrag:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\tshape:<span class=\"keyword\">new</span> AMap.MarkerShape(&#123;</span><br><span class=\"line\">\t\ttype:<span class=\"string\">\"circle\"</span>,</span><br><span class=\"line\">\t\tcoords:[<span class=\"number\">112.736465</span>,<span class=\"number\">37.696495</span>,<span class=\"number\">100</span>]</span><br><span class=\"line\">\t&#125;),</span><br><span class=\"line\">\tlabel:&#123;</span><br><span class=\"line\">\t\tcontent:<span class=\"string\">\"label\"</span>,</span><br><span class=\"line\">\t\toffset:<span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">0</span>,<span class=\"number\">-36</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap402.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h5 id=\"多边形\"><a href=\"#多边形\" class=\"headerlink\" title=\"多边形\"></a>多边形</h5><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lineArr=[</span><br><span class=\"line\">\t[<span class=\"number\">112.49157</span>,<span class=\"number\">37.897392</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.602806</span>,<span class=\"number\">37.898747</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.608643</span>,<span class=\"number\">37.797355</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.49775</span>,<span class=\"number\">37.79627</span>]</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">var</span> polygon=<span class=\"keyword\">new</span> AMap.Polygon(&#123;</span><br><span class=\"line\">\tmap:map,</span><br><span class=\"line\">\tpath:lineArr</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap404.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h4 id=\"右键菜单\"><a href=\"#右键菜单\" class=\"headerlink\" title=\"右键菜单\"></a>右键菜单</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> contextmenu=<span class=\"keyword\">new</span> AMap.ContextMenu();</span><br><span class=\"line\"><span class=\"keyword\">var</span> pos=[];</span><br><span class=\"line\"><span class=\"comment\">// 添加右键菜单内容项</span></span><br><span class=\"line\">contextmenu.addItem(<span class=\"string\">\"放大\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tmap.zoomIn();</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\">contextmenu.addItem(<span class=\"string\">\"缩小\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tmap.zoomOut();</span><br><span class=\"line\">&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">contextmenu.addItem(<span class=\"string\">\"添加点标记\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> marker=<span class=\"keyword\">new</span> AMap.Marker(&#123;</span><br><span class=\"line\">\t\tmap:map,</span><br><span class=\"line\">\t\tposition:pos</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 监听鼠标右击事件</span></span><br><span class=\"line\">map.on(<span class=\"string\">\"rightclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\tcontextmenu.open(map,e.lnglat);</span><br><span class=\"line\">\tpos=e.lnglat;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap405.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h2 id=\"信息窗体\"><a href=\"#信息窗体\" class=\"headerlink\" title=\"信息窗体\"></a>信息窗体</h2><h4 id=\"信息窗体-1\"><a href=\"#信息窗体-1\" class=\"headerlink\" title=\"信息窗体\"></a>信息窗体</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> infowindow=<span class=\"keyword\">new</span> AMap.InfoWindow(&#123;</span><br><span class=\"line\">\tisCustom:<span class=\"literal\">false</span>,</span><br><span class=\"line\">\tcontent:<span class=\"string\">\"&lt;h3&gt;Hello,Yuanping&lt;/h3&gt;\"</span>,</span><br><span class=\"line\">\toffset:<span class=\"keyword\">new</span> AMap.Pixel(<span class=\"number\">0</span>,<span class=\"number\">-36</span>),</span><br><span class=\"line\">\tshowShadow:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\tcloseWhenClickMap:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\tautoMove:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">infowindow.open(map,<span class=\"keyword\">new</span> AMap.LngLat(<span class=\"number\">112.736465</span>,<span class=\"number\">38.696495</span>));</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap406.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h2 id=\"小练习\"><a href=\"#小练习\" class=\"headerlink\" title=\"小练习\"></a>小练习</h2><h4 id=\"鼠标划过山西大剧院时，弹出信息窗体\"><a href=\"#鼠标划过山西大剧院时，弹出信息窗体\" class=\"headerlink\" title=\"鼠标划过山西大剧院时，弹出信息窗体\"></a>鼠标划过山西大剧院时，弹出信息窗体</h4><p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 坐标</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lineArr=[</span><br><span class=\"line\">\t[<span class=\"number\">112.532802</span>,<span class=\"number\">37.808395</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533049</span>,<span class=\"number\">37.808395</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533124</span>,<span class=\"number\">37.808476</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533521</span>,<span class=\"number\">37.808459</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533558</span>,<span class=\"number\">37.808391</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533832</span>,<span class=\"number\">37.808391</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533848</span>,<span class=\"number\">37.80792</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.534159</span>,<span class=\"number\">37.807959</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.534159</span>,<span class=\"number\">37.80748</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533826</span>,<span class=\"number\">37.807514</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533832</span>,<span class=\"number\">37.807179</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533966</span>,<span class=\"number\">37.806848</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533376</span>,<span class=\"number\">37.806683</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.533054</span>,<span class=\"number\">37.806687</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.532684</span>,<span class=\"number\">37.806878</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.53278</span>,<span class=\"number\">37.807191</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.532796</span>,<span class=\"number\">37.80745</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.532013</span>,<span class=\"number\">37.807285</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.532019</span>,<span class=\"number\">37.808213</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.532796</span>,<span class=\"number\">37.808018</span>],</span><br><span class=\"line\">\t[<span class=\"number\">112.532818</span>,<span class=\"number\">37.808412</span>]</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 实例化Polygon类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> polygon=<span class=\"keyword\">new</span> AMap.Polygon(&#123;</span><br><span class=\"line\">\tmap:map,</span><br><span class=\"line\">\tpath:lineArr</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 适应窗口</span></span><br><span class=\"line\">map.setFitView();</span><br><span class=\"line\"><span class=\"comment\">// 实例化信息窗体类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> infowindow=<span class=\"keyword\">new</span> AMap.InfoWindow(&#123;</span><br><span class=\"line\">\tcontent:<span class=\"string\">\"&lt;h3&gt;太原市&lt;/h3&gt;&lt;p&gt;山西大剧院&lt;/p&gt;\"</span>,</span><br><span class=\"line\">\tcloseWhenClickMap:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 监听鼠标移入、移除事件</span></span><br><span class=\"line\">polygon.on(<span class=\"string\">\"mouseover\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\tinfowindow.open(map,map.getCenter());</span><br><span class=\"line\">&#125;).on(<span class=\"string\">\"mouseout\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tinfowindow.close();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>预览</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://raw.githubusercontent.com/Yangfan2016/PicBed/master/AMap/amap407.JPG\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<hr>\n<p>参考来源：<a href=\"http://lbs.amap.com/\" title=\"高德地图开放平台\" target=\"_blank\" rel=\"noopener\">http://lbs.amap.com/</a><br>作者：<a href=\"http://yangfan.ga\" title=\"http://yangfan.ga\" target=\"_blank\" rel=\"noopener\">Yangfan</a></p>\n"},{"title":"浏览器兼容性问题Q&A","date":"2018-05-14T03:07:01.000Z","_content":"\n# 浏览器兼容性问题Q&A\n\n### `Date` 对象时间格式差异性\n\nQ:  \n\n日期参数为 `yyyy/MM/dd hh:mm:ss` 格式时，IE浏览器不支持，chrome和firefox支持\n```js\nnew Date(\"2018-05-05 12:25:23\") // Invalid Date\n```\n\n日期参数为 `yyyy/MM/ddThh:mm:ss` 格式时，IE支持,chrome和firefox也支持\n\n```js\nnew Date(\"2018-05-05T12:25:23\") // [date] Sat May 05 2018 12:25:23 GMT+0800 (中国标准时间)\n```\n\nA:  \n原因：\n各个浏览器对采用的时间格式标准解析不一致\n\n解决方法：\n最好采用ISO的标准时间格式`YYYY-MM-DDTHH:mm:ss.sssZ`\n或者使用时间戳代替\n\n```js\n\nnew Date(\"2018-05-05T12:25:23.235Z\");\n\n// or\n\nnew Date(1525523123235)\n\n```\n\n\n### `window.open` 在异步代码中执行被浏览器拦截  \nQ: \n下面方式打开新页面会被浏览器拦截\n```js\n\n// 异步代码\n\nsetTimeout(function () {\n    window.open(\"http://www.sogou.com\")\n},1001)\n// AJAX异步请求\n\n$.ajax({\n    url:\"xxx\",\n    success:function () {\n        window.open(\"yyy\")\n    }\n});\n\n```\nA:  \n原因：\n出于安全考虑浏览器会拦截掉非用户操作的行为 \n\n解决方法：\n```js\n\n// window.open()先执行，打开一个空的窗口（例如 加载页）\n\nvar newWin = window.open('http://xxx.com/loading.html')\n\n// 然后等异步代码执行完再重定向 \n\nnewWin.location.href = 'http://www.baidu.com'\n```\n\n### `a` 标签href属性为`javascript:void(0)` 时，各浏览器处理方式不同\n\nQ:  \n```html\n<a href=\"javascript:void(0)\" target=\"_blank\">我是空链接，在这里当做一个按钮</a>\n```\nfirefox和IE浏览器会弹出一个新窗口\n\nA:  \n原因：\n浏览器默认处理事件的顺序有差异。   \nChrome顺序：onclick -> href -> target   \nIE和Firefox顺序：onclick -> target -> href\n\n解决方法：  \n1. 添加onclick事件，直接return false阻止之后浏览器默认事件的执行\n```html\n<a target=\"_blank\" onclick=\"return false\" href=\"javascript:void(0);\">点我啊</a>\n```\n2. 去掉href属性\n```html\n<a target=\"_blank\">点我啊</a>\n```\n```html\n<a>点我啊</a>\n```\n\n\n### 各浏览器对 `table` 不规范写法解析不一致\n\n最好以W3C的标准来写HTML，不然浏览器对HTML解析有差异  \n\n```html\n<table border=\"1\">\n    <thead>\n        <tr>\n            <th>Month</th>\n            <th>Savings</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>January</td>\n            <td>$100</td>\n        </tr>\n    </tbody>\n    <tfoot>\n        <tr>\n            <td>Sum</td>\n            <td>$180</td>\n        </tr>\n    </tfoot>\n</table>\n```\n\n### 鼠标事件 mouseout 和 mouseleave 区别\n\n- `mouseleave` 只有鼠标移开被监听的元素时，才触发 （`mouseenter`同理）  \n- `mouseout` 不论鼠标移开被监听元素，还是子元素，均会触发（`mouseover`同理） \n\n### window.URL.createObjectURL(new Blob) 在Microsoft IE和Chrome 的区别  [https://blog.csdn.net/u013131203/article/details/80894440](https://blog.csdn.net/u013131203/article/details/80894440)\n\nChrome 带域名\n\n```js\n\nURL.createObjectURL(new Blob())\n// \"blob:https://note.youdao.com/e4132750-7b95-4595-b331-158267d8d9e3\"\n\n```\n\nie不带域名\n\n```js\n\nURL.createObjectURL(new Blob())\n// \"blob:e4132750-7b95-4595-b331-158267d8d9e3\"\n\n```\n\n### IE浏览器缓存 get方式的XHR请求 [https://www.cnblogs.com/bk233/p/7280595.html](https://www.cnblogs.com/bk233/p/7280595.html)\n\n每次发请求时携带一个随机参数 例如  GET http://123.com?t=15123153156161\n\n\n### 浅谈 AJAX 跨域请求时的 OPTIONS 方法 [https://juejin.im/entry/58eaf351a22b9d0058a8e35c](https://juejin.im/entry/58eaf351a22b9d0058a8e35c)\n\n`For cross-domain requests, setting the content type to anything other than application/x-www-form-urlencoded, multipart/form-data, or text/plain will trigger the browser to send a preflight OPTIONS request to the server.`    \n非简单请求必须先发送预检请求，如果发送的请求内容类型如果不是 `application/x-www-form-urlencoded`，`multipart/form-data` 或 `text/plain` 这三者的话，便会触发 OPTIONS 请求","source":"_posts/浏览器兼容性问题Q-A.md","raw":"---\ntitle: 浏览器兼容性问题Q&A\ndate: 2018-05-14 11:07:01\ntags: [浏览器,兼容性]\n---\n\n# 浏览器兼容性问题Q&A\n\n### `Date` 对象时间格式差异性\n\nQ:  \n\n日期参数为 `yyyy/MM/dd hh:mm:ss` 格式时，IE浏览器不支持，chrome和firefox支持\n```js\nnew Date(\"2018-05-05 12:25:23\") // Invalid Date\n```\n\n日期参数为 `yyyy/MM/ddThh:mm:ss` 格式时，IE支持,chrome和firefox也支持\n\n```js\nnew Date(\"2018-05-05T12:25:23\") // [date] Sat May 05 2018 12:25:23 GMT+0800 (中国标准时间)\n```\n\nA:  \n原因：\n各个浏览器对采用的时间格式标准解析不一致\n\n解决方法：\n最好采用ISO的标准时间格式`YYYY-MM-DDTHH:mm:ss.sssZ`\n或者使用时间戳代替\n\n```js\n\nnew Date(\"2018-05-05T12:25:23.235Z\");\n\n// or\n\nnew Date(1525523123235)\n\n```\n\n\n### `window.open` 在异步代码中执行被浏览器拦截  \nQ: \n下面方式打开新页面会被浏览器拦截\n```js\n\n// 异步代码\n\nsetTimeout(function () {\n    window.open(\"http://www.sogou.com\")\n},1001)\n// AJAX异步请求\n\n$.ajax({\n    url:\"xxx\",\n    success:function () {\n        window.open(\"yyy\")\n    }\n});\n\n```\nA:  \n原因：\n出于安全考虑浏览器会拦截掉非用户操作的行为 \n\n解决方法：\n```js\n\n// window.open()先执行，打开一个空的窗口（例如 加载页）\n\nvar newWin = window.open('http://xxx.com/loading.html')\n\n// 然后等异步代码执行完再重定向 \n\nnewWin.location.href = 'http://www.baidu.com'\n```\n\n### `a` 标签href属性为`javascript:void(0)` 时，各浏览器处理方式不同\n\nQ:  \n```html\n<a href=\"javascript:void(0)\" target=\"_blank\">我是空链接，在这里当做一个按钮</a>\n```\nfirefox和IE浏览器会弹出一个新窗口\n\nA:  \n原因：\n浏览器默认处理事件的顺序有差异。   \nChrome顺序：onclick -> href -> target   \nIE和Firefox顺序：onclick -> target -> href\n\n解决方法：  \n1. 添加onclick事件，直接return false阻止之后浏览器默认事件的执行\n```html\n<a target=\"_blank\" onclick=\"return false\" href=\"javascript:void(0);\">点我啊</a>\n```\n2. 去掉href属性\n```html\n<a target=\"_blank\">点我啊</a>\n```\n```html\n<a>点我啊</a>\n```\n\n\n### 各浏览器对 `table` 不规范写法解析不一致\n\n最好以W3C的标准来写HTML，不然浏览器对HTML解析有差异  \n\n```html\n<table border=\"1\">\n    <thead>\n        <tr>\n            <th>Month</th>\n            <th>Savings</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>January</td>\n            <td>$100</td>\n        </tr>\n    </tbody>\n    <tfoot>\n        <tr>\n            <td>Sum</td>\n            <td>$180</td>\n        </tr>\n    </tfoot>\n</table>\n```\n\n### 鼠标事件 mouseout 和 mouseleave 区别\n\n- `mouseleave` 只有鼠标移开被监听的元素时，才触发 （`mouseenter`同理）  \n- `mouseout` 不论鼠标移开被监听元素，还是子元素，均会触发（`mouseover`同理） \n\n### window.URL.createObjectURL(new Blob) 在Microsoft IE和Chrome 的区别  [https://blog.csdn.net/u013131203/article/details/80894440](https://blog.csdn.net/u013131203/article/details/80894440)\n\nChrome 带域名\n\n```js\n\nURL.createObjectURL(new Blob())\n// \"blob:https://note.youdao.com/e4132750-7b95-4595-b331-158267d8d9e3\"\n\n```\n\nie不带域名\n\n```js\n\nURL.createObjectURL(new Blob())\n// \"blob:e4132750-7b95-4595-b331-158267d8d9e3\"\n\n```\n\n### IE浏览器缓存 get方式的XHR请求 [https://www.cnblogs.com/bk233/p/7280595.html](https://www.cnblogs.com/bk233/p/7280595.html)\n\n每次发请求时携带一个随机参数 例如  GET http://123.com?t=15123153156161\n\n\n### 浅谈 AJAX 跨域请求时的 OPTIONS 方法 [https://juejin.im/entry/58eaf351a22b9d0058a8e35c](https://juejin.im/entry/58eaf351a22b9d0058a8e35c)\n\n`For cross-domain requests, setting the content type to anything other than application/x-www-form-urlencoded, multipart/form-data, or text/plain will trigger the browser to send a preflight OPTIONS request to the server.`    \n非简单请求必须先发送预检请求，如果发送的请求内容类型如果不是 `application/x-www-form-urlencoded`，`multipart/form-data` 或 `text/plain` 这三者的话，便会触发 OPTIONS 请求","slug":"浏览器兼容性问题Q-A","published":1,"updated":"2019-04-25T09:00:59.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuwfaun0002gaeyysx9l9l66","content":"<h1 id=\"浏览器兼容性问题Q-amp-A\"><a href=\"#浏览器兼容性问题Q-amp-A\" class=\"headerlink\" title=\"浏览器兼容性问题Q&amp;A\"></a>浏览器兼容性问题Q&amp;A</h1><h3 id=\"Date-对象时间格式差异性\"><a href=\"#Date-对象时间格式差异性\" class=\"headerlink\" title=\"Date 对象时间格式差异性\"></a><code>Date</code> 对象时间格式差异性</h3><p>Q:  </p>\n<p>日期参数为 <code>yyyy/MM/dd hh:mm:ss</code> 格式时，IE浏览器不支持，chrome和firefox支持<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2018-05-05 12:25:23\"</span>) <span class=\"comment\">// Invalid Date</span></span><br></pre></td></tr></table></figure></p>\n<p>日期参数为 <code>yyyy/MM/ddThh:mm:ss</code> 格式时，IE支持,chrome和firefox也支持</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2018-05-05T12:25:23\"</span>) <span class=\"comment\">// [date] Sat May 05 2018 12:25:23 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>\n<p>A:<br>原因：<br>各个浏览器对采用的时间格式标准解析不一致</p>\n<p>解决方法：<br>最好采用ISO的标准时间格式<code>YYYY-MM-DDTHH:mm:ss.sssZ</code><br>或者使用时间戳代替</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2018-05-05T12:25:23.235Z\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1525523123235</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"window-open-在异步代码中执行被浏览器拦截\"><a href=\"#window-open-在异步代码中执行被浏览器拦截\" class=\"headerlink\" title=\"window.open 在异步代码中执行被浏览器拦截\"></a><code>window.open</code> 在异步代码中执行被浏览器拦截</h3><p>Q:<br>下面方式打开新页面会被浏览器拦截<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.open(<span class=\"string\">\"http://www.sogou.com\"</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">1001</span>)</span><br><span class=\"line\"><span class=\"comment\">// AJAX异步请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">    success:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.open(<span class=\"string\">\"yyy\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>A:<br>原因：<br>出于安全考虑浏览器会拦截掉非用户操作的行为 </p>\n<p>解决方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// window.open()先执行，打开一个空的窗口（例如 加载页）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newWin = <span class=\"built_in\">window</span>.open(<span class=\"string\">'http://xxx.com/loading.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后等异步代码执行完再重定向 </span></span><br><span class=\"line\"></span><br><span class=\"line\">newWin.location.href = <span class=\"string\">'http://www.baidu.com'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"a-标签href属性为javascript-void-0-时，各浏览器处理方式不同\"><a href=\"#a-标签href属性为javascript-void-0-时，各浏览器处理方式不同\" class=\"headerlink\" title=\"a 标签href属性为javascript:void(0) 时，各浏览器处理方式不同\"></a><code>a</code> 标签href属性为<code>javascript:void(0)</code> 时，各浏览器处理方式不同</h3><p>Q:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:void(0)\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>我是空链接，在这里当做一个按钮<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>firefox和IE浏览器会弹出一个新窗口</p>\n<p>A:<br>原因：<br>浏览器默认处理事件的顺序有差异。<br>Chrome顺序：onclick -&gt; href -&gt; target<br>IE和Firefox顺序：onclick -&gt; target -&gt; href</p>\n<p>解决方法：  </p>\n<ol>\n<li><p>添加onclick事件，直接return false阻止之后浏览器默认事件的执行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:void(0);\"</span>&gt;</span>点我啊<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>去掉href属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>点我啊<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>点我啊<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"各浏览器对-table-不规范写法解析不一致\"><a href=\"#各浏览器对-table-不规范写法解析不一致\" class=\"headerlink\" title=\"各浏览器对 table 不规范写法解析不一致\"></a>各浏览器对 <code>table</code> 不规范写法解析不一致</h3><p>最好以W3C的标准来写HTML，不然浏览器对HTML解析有差异  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Month<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Savings<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>January<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$100<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Sum<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$180<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"鼠标事件-mouseout-和-mouseleave-区别\"><a href=\"#鼠标事件-mouseout-和-mouseleave-区别\" class=\"headerlink\" title=\"鼠标事件 mouseout 和 mouseleave 区别\"></a>鼠标事件 mouseout 和 mouseleave 区别</h3><ul>\n<li><code>mouseleave</code> 只有鼠标移开被监听的元素时，才触发 （<code>mouseenter</code>同理）  </li>\n<li><code>mouseout</code> 不论鼠标移开被监听元素，还是子元素，均会触发（<code>mouseover</code>同理） </li>\n</ul>\n<h3 id=\"window-URL-createObjectURL-new-Blob-在Microsoft-IE和Chrome-的区别-https-blog-csdn-net-u013131203-article-details-80894440\"><a href=\"#window-URL-createObjectURL-new-Blob-在Microsoft-IE和Chrome-的区别-https-blog-csdn-net-u013131203-article-details-80894440\" class=\"headerlink\" title=\"window.URL.createObjectURL(new Blob) 在Microsoft IE和Chrome 的区别  https://blog.csdn.net/u013131203/article/details/80894440\"></a>window.URL.createObjectURL(new Blob) 在Microsoft IE和Chrome 的区别  <a href=\"https://blog.csdn.net/u013131203/article/details/80894440\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u013131203/article/details/80894440</a></h3><p>Chrome 带域名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">URL.createObjectURL(<span class=\"keyword\">new</span> Blob())</span><br><span class=\"line\"><span class=\"comment\">// \"blob:https://note.youdao.com/e4132750-7b95-4595-b331-158267d8d9e3\"</span></span><br></pre></td></tr></table></figure>\n<p>ie不带域名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">URL.createObjectURL(<span class=\"keyword\">new</span> Blob())</span><br><span class=\"line\"><span class=\"comment\">// \"blob:e4132750-7b95-4595-b331-158267d8d9e3\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"IE浏览器缓存-get方式的XHR请求-https-www-cnblogs-com-bk233-p-7280595-html\"><a href=\"#IE浏览器缓存-get方式的XHR请求-https-www-cnblogs-com-bk233-p-7280595-html\" class=\"headerlink\" title=\"IE浏览器缓存 get方式的XHR请求 https://www.cnblogs.com/bk233/p/7280595.html\"></a>IE浏览器缓存 get方式的XHR请求 <a href=\"https://www.cnblogs.com/bk233/p/7280595.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/bk233/p/7280595.html</a></h3><p>每次发请求时携带一个随机参数 例如  GET <a href=\"http://123.com?t=15123153156161\" target=\"_blank\" rel=\"noopener\">http://123.com?t=15123153156161</a></p>\n<h3 id=\"浅谈-AJAX-跨域请求时的-OPTIONS-方法-https-juejin-im-entry-58eaf351a22b9d0058a8e35c\"><a href=\"#浅谈-AJAX-跨域请求时的-OPTIONS-方法-https-juejin-im-entry-58eaf351a22b9d0058a8e35c\" class=\"headerlink\" title=\"浅谈 AJAX 跨域请求时的 OPTIONS 方法 https://juejin.im/entry/58eaf351a22b9d0058a8e35c\"></a>浅谈 AJAX 跨域请求时的 OPTIONS 方法 <a href=\"https://juejin.im/entry/58eaf351a22b9d0058a8e35c\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/58eaf351a22b9d0058a8e35c</a></h3><p><code>For cross-domain requests, setting the content type to anything other than application/x-www-form-urlencoded, multipart/form-data, or text/plain will trigger the browser to send a preflight OPTIONS request to the server.</code><br>非简单请求必须先发送预检请求，如果发送的请求内容类型如果不是 <code>application/x-www-form-urlencoded</code>，<code>multipart/form-data</code> 或 <code>text/plain</code> 这三者的话，便会触发 OPTIONS 请求</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"浏览器兼容性问题Q-amp-A\"><a href=\"#浏览器兼容性问题Q-amp-A\" class=\"headerlink\" title=\"浏览器兼容性问题Q&amp;A\"></a>浏览器兼容性问题Q&amp;A</h1><h3 id=\"Date-对象时间格式差异性\"><a href=\"#Date-对象时间格式差异性\" class=\"headerlink\" title=\"Date 对象时间格式差异性\"></a><code>Date</code> 对象时间格式差异性</h3><p>Q:  </p>\n<p>日期参数为 <code>yyyy/MM/dd hh:mm:ss</code> 格式时，IE浏览器不支持，chrome和firefox支持<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2018-05-05 12:25:23\"</span>) <span class=\"comment\">// Invalid Date</span></span><br></pre></td></tr></table></figure></p>\n<p>日期参数为 <code>yyyy/MM/ddThh:mm:ss</code> 格式时，IE支持,chrome和firefox也支持</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2018-05-05T12:25:23\"</span>) <span class=\"comment\">// [date] Sat May 05 2018 12:25:23 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>\n<p>A:<br>原因：<br>各个浏览器对采用的时间格式标准解析不一致</p>\n<p>解决方法：<br>最好采用ISO的标准时间格式<code>YYYY-MM-DDTHH:mm:ss.sssZ</code><br>或者使用时间戳代替</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2018-05-05T12:25:23.235Z\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1525523123235</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"window-open-在异步代码中执行被浏览器拦截\"><a href=\"#window-open-在异步代码中执行被浏览器拦截\" class=\"headerlink\" title=\"window.open 在异步代码中执行被浏览器拦截\"></a><code>window.open</code> 在异步代码中执行被浏览器拦截</h3><p>Q:<br>下面方式打开新页面会被浏览器拦截<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.open(<span class=\"string\">\"http://www.sogou.com\"</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">1001</span>)</span><br><span class=\"line\"><span class=\"comment\">// AJAX异步请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">    success:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.open(<span class=\"string\">\"yyy\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>A:<br>原因：<br>出于安全考虑浏览器会拦截掉非用户操作的行为 </p>\n<p>解决方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// window.open()先执行，打开一个空的窗口（例如 加载页）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newWin = <span class=\"built_in\">window</span>.open(<span class=\"string\">'http://xxx.com/loading.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后等异步代码执行完再重定向 </span></span><br><span class=\"line\"></span><br><span class=\"line\">newWin.location.href = <span class=\"string\">'http://www.baidu.com'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"a-标签href属性为javascript-void-0-时，各浏览器处理方式不同\"><a href=\"#a-标签href属性为javascript-void-0-时，各浏览器处理方式不同\" class=\"headerlink\" title=\"a 标签href属性为javascript:void(0) 时，各浏览器处理方式不同\"></a><code>a</code> 标签href属性为<code>javascript:void(0)</code> 时，各浏览器处理方式不同</h3><p>Q:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:void(0)\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>我是空链接，在这里当做一个按钮<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>firefox和IE浏览器会弹出一个新窗口</p>\n<p>A:<br>原因：<br>浏览器默认处理事件的顺序有差异。<br>Chrome顺序：onclick -&gt; href -&gt; target<br>IE和Firefox顺序：onclick -&gt; target -&gt; href</p>\n<p>解决方法：  </p>\n<ol>\n<li><p>添加onclick事件，直接return false阻止之后浏览器默认事件的执行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:void(0);\"</span>&gt;</span>点我啊<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>去掉href属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>点我啊<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>点我啊<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"各浏览器对-table-不规范写法解析不一致\"><a href=\"#各浏览器对-table-不规范写法解析不一致\" class=\"headerlink\" title=\"各浏览器对 table 不规范写法解析不一致\"></a>各浏览器对 <code>table</code> 不规范写法解析不一致</h3><p>最好以W3C的标准来写HTML，不然浏览器对HTML解析有差异  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Month<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Savings<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>January<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$100<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Sum<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$180<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"鼠标事件-mouseout-和-mouseleave-区别\"><a href=\"#鼠标事件-mouseout-和-mouseleave-区别\" class=\"headerlink\" title=\"鼠标事件 mouseout 和 mouseleave 区别\"></a>鼠标事件 mouseout 和 mouseleave 区别</h3><ul>\n<li><code>mouseleave</code> 只有鼠标移开被监听的元素时，才触发 （<code>mouseenter</code>同理）  </li>\n<li><code>mouseout</code> 不论鼠标移开被监听元素，还是子元素，均会触发（<code>mouseover</code>同理） </li>\n</ul>\n<h3 id=\"window-URL-createObjectURL-new-Blob-在Microsoft-IE和Chrome-的区别-https-blog-csdn-net-u013131203-article-details-80894440\"><a href=\"#window-URL-createObjectURL-new-Blob-在Microsoft-IE和Chrome-的区别-https-blog-csdn-net-u013131203-article-details-80894440\" class=\"headerlink\" title=\"window.URL.createObjectURL(new Blob) 在Microsoft IE和Chrome 的区别  https://blog.csdn.net/u013131203/article/details/80894440\"></a>window.URL.createObjectURL(new Blob) 在Microsoft IE和Chrome 的区别  <a href=\"https://blog.csdn.net/u013131203/article/details/80894440\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u013131203/article/details/80894440</a></h3><p>Chrome 带域名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">URL.createObjectURL(<span class=\"keyword\">new</span> Blob())</span><br><span class=\"line\"><span class=\"comment\">// \"blob:https://note.youdao.com/e4132750-7b95-4595-b331-158267d8d9e3\"</span></span><br></pre></td></tr></table></figure>\n<p>ie不带域名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">URL.createObjectURL(<span class=\"keyword\">new</span> Blob())</span><br><span class=\"line\"><span class=\"comment\">// \"blob:e4132750-7b95-4595-b331-158267d8d9e3\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"IE浏览器缓存-get方式的XHR请求-https-www-cnblogs-com-bk233-p-7280595-html\"><a href=\"#IE浏览器缓存-get方式的XHR请求-https-www-cnblogs-com-bk233-p-7280595-html\" class=\"headerlink\" title=\"IE浏览器缓存 get方式的XHR请求 https://www.cnblogs.com/bk233/p/7280595.html\"></a>IE浏览器缓存 get方式的XHR请求 <a href=\"https://www.cnblogs.com/bk233/p/7280595.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/bk233/p/7280595.html</a></h3><p>每次发请求时携带一个随机参数 例如  GET <a href=\"http://123.com?t=15123153156161\" target=\"_blank\" rel=\"noopener\">http://123.com?t=15123153156161</a></p>\n<h3 id=\"浅谈-AJAX-跨域请求时的-OPTIONS-方法-https-juejin-im-entry-58eaf351a22b9d0058a8e35c\"><a href=\"#浅谈-AJAX-跨域请求时的-OPTIONS-方法-https-juejin-im-entry-58eaf351a22b9d0058a8e35c\" class=\"headerlink\" title=\"浅谈 AJAX 跨域请求时的 OPTIONS 方法 https://juejin.im/entry/58eaf351a22b9d0058a8e35c\"></a>浅谈 AJAX 跨域请求时的 OPTIONS 方法 <a href=\"https://juejin.im/entry/58eaf351a22b9d0058a8e35c\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/58eaf351a22b9d0058a8e35c</a></h3><p><code>For cross-domain requests, setting the content type to anything other than application/x-www-form-urlencoded, multipart/form-data, or text/plain will trigger the browser to send a preflight OPTIONS request to the server.</code><br>非简单请求必须先发送预检请求，如果发送的请求内容类型如果不是 <code>application/x-www-form-urlencoded</code>，<code>multipart/form-data</code> 或 <code>text/plain</code> 这三者的话，便会触发 OPTIONS 请求</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjuwfauif0000aeyyjtlwo50z","tag_id":"cjuwfauj00002aeyyrzw126w3","_id":"cjuwfaujq000aaeyyqo8og0mk"},{"post_id":"cjuwfauif0000aeyyjtlwo50z","tag_id":"cjuwfauj80006aeyyylelyaod","_id":"cjuwfaujr000caeyyw02byerz"},{"post_id":"cjuwfaujc0009aeyy4ipyetll","tag_id":"cjuwfaujr000daeyyu03xjge1","_id":"cjuwfauk1000maeyyidy77135"},{"post_id":"cjuwfaujc0009aeyy4ipyetll","tag_id":"cjuwfaujx000haeyyllcmz5f1","_id":"cjuwfauk3000oaeyybdlbn36e"},{"post_id":"cjuwfaujx000iaeyytioumvi9","tag_id":"cjuwfaujr000daeyyu03xjge1","_id":"cjuwfaukc000vaeyy2sqc4di2"},{"post_id":"cjuwfaujx000iaeyytioumvi9","tag_id":"cjuwfaujz000kaeyy8o48wuy7","_id":"cjuwfaukd000waeyy10difhid"},{"post_id":"cjuwfaujx000iaeyytioumvi9","tag_id":"cjuwfauk7000qaeyyry61vi7s","_id":"cjuwfaukd000yaeyyblduigz4"},{"post_id":"cjuwfauk0000laeyy3m2szh6f","tag_id":"cjuwfaukb000taeyyijb6gfur","_id":"cjuwfaukd0010aeyyomc8eg7u"},{"post_id":"cjuwfauk0000laeyy3m2szh6f","tag_id":"cjuwfaukd000xaeyyh4xx1a84","_id":"cjuwfauke0011aeyy4uo1pr0t"},{"post_id":"cjuwfauk4000paeyye1iar187","tag_id":"cjuwfaukd000zaeyy0ljgis5m","_id":"cjuwfaukh0014aeyyshp4i1gs"},{"post_id":"cjuwfauk4000paeyye1iar187","tag_id":"cjuwfauke0012aeyyrmhw7oid","_id":"cjuwfaukh0015aeyyyuokx63f"},{"post_id":"cjuwfauk4000paeyye1iar187","tag_id":"cjuwfauj00002aeyyrzw126w3","_id":"cjuwfauki0017aeyy2nw28ci3"},{"post_id":"cjuwfauk8000raeyyqaygis4g","tag_id":"cjuwfaukd000zaeyy0ljgis5m","_id":"cjuwfaukj0019aeyydqwempie"},{"post_id":"cjuwfauk8000raeyyqaygis4g","tag_id":"cjuwfauke0012aeyyrmhw7oid","_id":"cjuwfaukj001aaeyyx609q3j9"},{"post_id":"cjuwfauk8000raeyyqaygis4g","tag_id":"cjuwfauj00002aeyyrzw126w3","_id":"cjuwfaukk001caeyy9zzpxx4g"},{"post_id":"cjuwfauk9000saeyy76uyo7vm","tag_id":"cjuwfaukd000zaeyy0ljgis5m","_id":"cjuwfaukl001eaeyy42izkjdx"},{"post_id":"cjuwfauk9000saeyy76uyo7vm","tag_id":"cjuwfauke0012aeyyrmhw7oid","_id":"cjuwfaukl001faeyybukv30zk"},{"post_id":"cjuwfauk9000saeyy76uyo7vm","tag_id":"cjuwfauj00002aeyyrzw126w3","_id":"cjuwfaukl001haeyyj1c49q1w"},{"post_id":"cjuwfaukb000uaeyy4njuaid9","tag_id":"cjuwfaukd000zaeyy0ljgis5m","_id":"cjuwfaukm001iaeyybe3rmibc"},{"post_id":"cjuwfaukb000uaeyy4njuaid9","tag_id":"cjuwfauke0012aeyyrmhw7oid","_id":"cjuwfaukm001jaeyy5xrr5ayf"},{"post_id":"cjuwfaukb000uaeyy4njuaid9","tag_id":"cjuwfauj00002aeyyrzw126w3","_id":"cjuwfaukm001kaeyygcuha021"},{"post_id":"cjuwfauld001laeyyq4x8yuev","tag_id":"cjuwfaukd000zaeyy0ljgis5m","_id":"cjuwfaulh001oaeyyo87pesf8"},{"post_id":"cjuwfauld001laeyyq4x8yuev","tag_id":"cjuwfauke0012aeyyrmhw7oid","_id":"cjuwfaulj001qaeyynv8ue0bq"},{"post_id":"cjuwfauld001laeyyq4x8yuev","tag_id":"cjuwfauj00002aeyyrzw126w3","_id":"cjuwfaull001saeyyevgydtkg"},{"post_id":"cjuwfaulp001waeyybosivi29","tag_id":"cjuwfaukd000zaeyy0ljgis5m","_id":"cjuwfauls001zaeyyysbbo4yn"},{"post_id":"cjuwfaulp001waeyybosivi29","tag_id":"cjuwfauke0012aeyyrmhw7oid","_id":"cjuwfault0021aeyyuutrcet9"},{"post_id":"cjuwfaulp001waeyybosivi29","tag_id":"cjuwfauj00002aeyyrzw126w3","_id":"cjuwfaulv0023aeyyoie74fad"},{"post_id":"cjuwfaulj001raeyyqg29lfks","tag_id":"cjuwfauln001uaeyy0mb6f101","_id":"cjuwfaulw0024aeyygnxwictf"},{"post_id":"cjuwfaulq001xaeyyma9ne7k5","tag_id":"cjuwfaukd000zaeyy0ljgis5m","_id":"cjuwfaulw0025aeyys86xfekr"},{"post_id":"cjuwfaulq001xaeyyma9ne7k5","tag_id":"cjuwfauke0012aeyyrmhw7oid","_id":"cjuwfaulw0026aeyy5he56bes"},{"post_id":"cjuwfaulq001xaeyyma9ne7k5","tag_id":"cjuwfauj00002aeyyrzw126w3","_id":"cjuwfaulw0027aeyyfwhp15yp"},{"post_id":"cjuwfaulm001taeyypyo2zlre","tag_id":"cjuwfaulr001yaeyyjhh7arfx","_id":"cjuwfaulx0028aeyyrzip2xhy"},{"post_id":"cjuwfaum7002aaeyysxpaxc4n","tag_id":"cjuwfauln001uaeyy0mb6f101","_id":"cjuwfaumf002baeyyezzitqjp"},{"post_id":"cjuwfaump002caeyyptlfstob","tag_id":"cjuwfaukd000zaeyy0ljgis5m","_id":"cjuwfaums002daeyyo7bhme91"},{"post_id":"cjuwfaump002caeyyptlfstob","tag_id":"cjuwfauke0012aeyyrmhw7oid","_id":"cjuwfaums002eaeyy6jetbksn"},{"post_id":"cjuwfaump002caeyyptlfstob","tag_id":"cjuwfauj00002aeyyrzw126w3","_id":"cjuwfaumu002faeyyfnlmb5gw"},{"post_id":"cjuwfaun0002gaeyysx9l9l66","tag_id":"cjuwfaun2002haeyydnyw9en3","_id":"cjuwfaun2002jaeyywdrsvbd4"},{"post_id":"cjuwfaun0002gaeyysx9l9l66","tag_id":"cjuwfaun2002iaeyynfx9bnbv","_id":"cjuwfaun2002kaeyyjifm15iy"}],"Tag":[{"name":"JS","_id":"cjuwfauj00002aeyyrzw126w3"},{"name":"网站优化","_id":"cjuwfauj80006aeyyylelyaod"},{"name":"博客","_id":"cjuwfaujr000daeyyu03xjge1"},{"name":"Git","_id":"cjuwfaujx000haeyyllcmz5f1"},{"name":"建站","_id":"cjuwfaujz000kaeyy8o48wuy7"},{"name":"Hexo","_id":"cjuwfauk7000qaeyyry61vi7s"},{"name":"前端","_id":"cjuwfaukb000taeyyijb6gfur"},{"name":"音乐播放器","_id":"cjuwfaukd000xaeyyh4xx1a84"},{"name":"GIS","_id":"cjuwfaukd000zaeyy0ljgis5m"},{"name":"API","_id":"cjuwfauke0012aeyyrmhw7oid"},{"name":"翻译计划","_id":"cjuwfauln001uaeyy0mb6f101"},{"name":"算法","_id":"cjuwfaulr001yaeyyjhh7arfx"},{"name":"浏览器","_id":"cjuwfaun2002haeyydnyw9en3"},{"name":"兼容性","_id":"cjuwfaun2002iaeyynfx9bnbv"}]}}